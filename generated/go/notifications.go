// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
)

type ProjectNotifications struct {
	// Limit total notifications in the response. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Offset which notifications are returned. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
}

type ResourceNotifications struct {
	// Limit total notifications in the response. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Offset which notifications are returned. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
}

// OK
type ProjectNotificationsResponse struct {
	Offset int                        `json:"offset" url:"offset"`
	Limit  int                        `json:"limit" url:"limit"`
	Next   bool                       `json:"next" url:"next"`
	Data   []*ProjectNotificationData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (p *ProjectNotificationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectNotificationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectNotificationsResponse(value)
	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectNotificationsResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// OK
type ResourceNotificationsResponse struct {
	Offset int                         `json:"offset" url:"offset"`
	Limit  int                         `json:"limit" url:"limit"`
	Next   bool                        `json:"next" url:"next"`
	Data   []*ResourceNotificationData `json:"data,omitempty" url:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (r *ResourceNotificationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceNotificationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceNotificationsResponse(value)
	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceNotificationsResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
