// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type ProjectNotifications struct {
	// Limit total notifications in the response. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Offset which notifications are returned. Defaults to 0.
	Offset *int                    `json:"-" url:"offset,omitempty"`
	Sort   *NotificationsSortField `json:"-" url:"sort,omitempty"`
}

type ResourceNotifications struct {
	// Limit total notifications in the response. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Offset which notifications are returned. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
}

type Notification struct {
	// The type of notification, currently limited to 'risk'
	Type NotificationType `json:"type" url:"type"`
	// The field that the notification is for
	Field Risk `json:"field" url:"field"`
	// The previous values of the field
	Values []*RiskValue `json:"values,omitempty" url:"values,omitempty"`
	// The date the notification was created
	Date                  string                             `json:"date" url:"date"`
	AdditionalInformation *NotificationAdditionalInformation `json:"additional_information,omitempty" url:"additional_information,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *Notification) GetType() NotificationType {
	if n == nil {
		return ""
	}
	return n.Type
}

func (n *Notification) GetField() Risk {
	if n == nil {
		return ""
	}
	return n.Field
}

func (n *Notification) GetValues() []*RiskValue {
	if n == nil {
		return nil
	}
	return n.Values
}

func (n *Notification) GetDate() string {
	if n == nil {
		return ""
	}
	return n.Date
}

func (n *Notification) GetAdditionalInformation() *NotificationAdditionalInformation {
	if n == nil {
		return nil
	}
	return n.AdditionalInformation
}

func (n *Notification) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *Notification) UnmarshalJSON(data []byte) error {
	type unmarshaler Notification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Notification(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *Notification) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationAdditionalInformation struct {
	Value      map[string]interface{}             `json:"value,omitempty" url:"value,omitempty"`
	Properties []*AdditionalInformationProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotificationAdditionalInformation) GetValue() map[string]interface{} {
	if n == nil {
		return nil
	}
	return n.Value
}

func (n *NotificationAdditionalInformation) GetProperties() []*AdditionalInformationProperties {
	if n == nil {
		return nil
	}
	return n.Properties
}

func (n *NotificationAdditionalInformation) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationAdditionalInformation) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationAdditionalInformation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationAdditionalInformation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationAdditionalInformation) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationType string

const (
	NotificationTypeRisk NotificationType = "risk"
)

func NewNotificationTypeFromString(s string) (NotificationType, error) {
	switch s {
	case "risk":
		return NotificationTypeRisk, nil
	}
	var t NotificationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationType) Ptr() *NotificationType {
	return &n
}

// Defines a sort order on a field. The value should begin with a '-' to indicate a descending sort, followed by a field name to sort on.
type NotificationsSortField string

const (
	// The date the notification was generated, descending.
	NotificationsSortFieldDateDesc NotificationsSortField = "-date"
)

func NewNotificationsSortFieldFromString(s string) (NotificationsSortField, error) {
	switch s {
	case "-date":
		return NotificationsSortFieldDateDesc, nil
	}
	var t NotificationsSortField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationsSortField) Ptr() *NotificationsSortField {
	return &n
}

type ProjectNotificationData struct {
	// The ID of the entity
	Id string `json:"id" url:"id"`
	// The ID of the saved resource
	ResourceId string `json:"resource_id" url:"resource_id"`
	// The ID of the entity
	EntityId      string          `json:"entity_id" url:"entity_id"`
	Notifications []*Notification `json:"notifications,omitempty" url:"notifications,omitempty"`
	// <Warning>This property is in beta and is subject to change. It is provided for early access and testing purposes only.</Warning> custom user key/value pairs (key must be prefixed with "custom_" and value must be "string" type)
	CustomFields interface{} `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`
	// Aggregated risk notifications
	RiskNotifications *ProjectNotificationRiskData `json:"risk_notifications,omitempty" url:"risk_notifications,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectNotificationData) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProjectNotificationData) GetResourceId() string {
	if p == nil {
		return ""
	}
	return p.ResourceId
}

func (p *ProjectNotificationData) GetEntityId() string {
	if p == nil {
		return ""
	}
	return p.EntityId
}

func (p *ProjectNotificationData) GetNotifications() []*Notification {
	if p == nil {
		return nil
	}
	return p.Notifications
}

func (p *ProjectNotificationData) GetCustomFields() interface{} {
	if p == nil {
		return nil
	}
	return p.CustomFields
}

func (p *ProjectNotificationData) GetRiskNotifications() *ProjectNotificationRiskData {
	if p == nil {
		return nil
	}
	return p.RiskNotifications
}

func (p *ProjectNotificationData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectNotificationData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectNotificationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectNotificationData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectNotificationData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectNotificationRiskData struct {
	// The list of fields added
	Added []string `json:"added,omitempty" url:"added,omitempty"`
	// The list of fields removed
	Removed []string `json:"removed,omitempty" url:"removed,omitempty"`
	// The date of the notification
	Date string `json:"date" url:"date"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectNotificationRiskData) GetAdded() []string {
	if p == nil {
		return nil
	}
	return p.Added
}

func (p *ProjectNotificationRiskData) GetRemoved() []string {
	if p == nil {
		return nil
	}
	return p.Removed
}

func (p *ProjectNotificationRiskData) GetDate() string {
	if p == nil {
		return ""
	}
	return p.Date
}

func (p *ProjectNotificationRiskData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectNotificationRiskData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectNotificationRiskData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectNotificationRiskData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectNotificationRiskData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// OK
type ProjectNotificationsResponse struct {
	Offset int                        `json:"offset" url:"offset"`
	Limit  int                        `json:"limit" url:"limit"`
	Next   bool                       `json:"next" url:"next"`
	Data   []*ProjectNotificationData `json:"data,omitempty" url:"data,omitempty"`
	Size   *QualifiedCount            `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectNotificationsResponse) GetOffset() int {
	if p == nil {
		return 0
	}
	return p.Offset
}

func (p *ProjectNotificationsResponse) GetLimit() int {
	if p == nil {
		return 0
	}
	return p.Limit
}

func (p *ProjectNotificationsResponse) GetNext() bool {
	if p == nil {
		return false
	}
	return p.Next
}

func (p *ProjectNotificationsResponse) GetData() []*ProjectNotificationData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectNotificationsResponse) GetSize() *QualifiedCount {
	if p == nil {
		return nil
	}
	return p.Size
}

func (p *ProjectNotificationsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectNotificationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectNotificationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectNotificationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectNotificationsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ResourceNotificationData struct {
	// The ID of the saved resource
	SavedResourceId string `json:"saved_resource_id" url:"saved_resource_id"`
	// The ID of the project the entity is saved to
	ProjectId string `json:"project_id" url:"project_id"`
	// The ID of the entity
	EntityId string `json:"entity_id" url:"entity_id"`
	// The type of notification, currently limited to 'risk'
	Type NotificationType `json:"type" url:"type"`
	// The field that the notification is for
	Field Risk `json:"field" url:"field"`
	// The previous value of the field
	Value *RiskValue `json:"value,omitempty" url:"value,omitempty"`
	// The date the notification was created
	Date string `json:"date" url:"date"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceNotificationData) GetSavedResourceId() string {
	if r == nil {
		return ""
	}
	return r.SavedResourceId
}

func (r *ResourceNotificationData) GetProjectId() string {
	if r == nil {
		return ""
	}
	return r.ProjectId
}

func (r *ResourceNotificationData) GetEntityId() string {
	if r == nil {
		return ""
	}
	return r.EntityId
}

func (r *ResourceNotificationData) GetType() NotificationType {
	if r == nil {
		return ""
	}
	return r.Type
}

func (r *ResourceNotificationData) GetField() Risk {
	if r == nil {
		return ""
	}
	return r.Field
}

func (r *ResourceNotificationData) GetValue() *RiskValue {
	if r == nil {
		return nil
	}
	return r.Value
}

func (r *ResourceNotificationData) GetDate() string {
	if r == nil {
		return ""
	}
	return r.Date
}

func (r *ResourceNotificationData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceNotificationData) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceNotificationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceNotificationData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceNotificationData) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// OK
type ResourceNotificationsResponse struct {
	Offset int                         `json:"offset" url:"offset"`
	Limit  int                         `json:"limit" url:"limit"`
	Next   bool                        `json:"next" url:"next"`
	Data   []*ResourceNotificationData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResourceNotificationsResponse) GetOffset() int {
	if r == nil {
		return 0
	}
	return r.Offset
}

func (r *ResourceNotificationsResponse) GetLimit() int {
	if r == nil {
		return 0
	}
	return r.Limit
}

func (r *ResourceNotificationsResponse) GetNext() bool {
	if r == nil {
		return false
	}
	return r.Next
}

func (r *ResourceNotificationsResponse) GetData() []*ResourceNotificationData {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *ResourceNotificationsResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceNotificationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceNotificationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceNotificationsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceNotificationsResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}
