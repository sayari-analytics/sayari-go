// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
	time "time"
)

type GetOntologyAttributesRequest struct {
	// Attribute Id filter.
	Id []Attributes `json:"-" url:"id,omitempty"`
}

type GetOntologyCountriesRequest struct {
	// Country Id filter.
	Id []Country `json:"-" url:"id,omitempty"`
}

type GetOntologyCurrenciesRequest struct {
	// Currency Id filter.
	Id []Currency `json:"-" url:"id,omitempty"`
}

type GetOntologyEntityTypesRequest struct {
	// Entity type Id filter.
	Id []Entities `json:"-" url:"id,omitempty"`
}

type GetOntologyEnumsRequest struct {
	// Enum Id filter.
	Id []string `json:"-" url:"id,omitempty"`
}

type GetOntologyHsCodesRequest struct {
	// HS code filter.
	Code []string `json:"-" url:"code,omitempty"`
}

type GetOntologyIdentifiersRequest struct {
	// Identifier Id filter.
	Id []IdentifierType `json:"-" url:"id,omitempty"`
}

type GetOntologyLanguagesRequest struct {
	// Language Id filter.
	Id []Language `json:"-" url:"id,omitempty"`
}

type GetOntologyRegionsRequest struct {
	// Region Id filter.
	Id []string `json:"-" url:"id,omitempty"`
}

type GetOntologyRelationshipsRequest struct {
	// Relationship Id filter.
	Id []Relationships `json:"-" url:"id,omitempty"`
}

type GetOntologyRiskFactorsRequest struct {
	// Risk factor Id filter.
	Id []Risk `json:"-" url:"id,omitempty"`
	// Risk category filter.
	RiskCategory []RiskCategory `json:"-" url:"risk_category,omitempty"`
	// Risk level filter.
	Level []RiskLevel `json:"-" url:"level,omitempty"`
	// Risk type filter.
	RiskType []string `json:"-" url:"risk_type,omitempty"`
	// Risk enabled filter.
	Enabled *bool `json:"-" url:"enabled,omitempty"`
	// Risk visible filter.
	Visible *bool `json:"-" url:"visible,omitempty"`
}

type GetOntologySourceTypesRequest struct {
	// Source type Id filter.
	Id []string `json:"-" url:"id,omitempty"`
}

type GetOntologySourcesRequest struct {
	// Source Id filter.
	Id []string `json:"-" url:"id,omitempty"`
	// Source country filter.
	Country []Country `json:"-" url:"country,omitempty"`
	// Source type filter.
	SourceType []string `json:"-" url:"source_type,omitempty"`
}

type GetOntologyAttributesResponse struct {
	Filters    *OntologyAttributesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyAttribute       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                        `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyAttributesResponse) GetFilters() *OntologyAttributesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyAttributesResponse) GetData() []*OntologyAttribute {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyAttributesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyAttributesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyAttributesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyAttributesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyAttributesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyAttributesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyCountriesResponse struct {
	Filters    *OntologyCountriesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyCountry        `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                       `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyCountriesResponse) GetFilters() *OntologyCountriesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyCountriesResponse) GetData() []*OntologyCountry {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyCountriesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyCountriesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyCountriesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyCountriesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyCountriesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyCountriesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyCurrenciesResponse struct {
	Filters    *OntologyCurrenciesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyCurrency        `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                        `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyCurrenciesResponse) GetFilters() *OntologyCurrenciesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyCurrenciesResponse) GetData() []*OntologyCurrency {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyCurrenciesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyCurrenciesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyCurrenciesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyCurrenciesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyCurrenciesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyCurrenciesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyEntityTypesResponse struct {
	Filters    *OntologyEntityTypesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyEntityType       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                         `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyEntityTypesResponse) GetFilters() *OntologyEntityTypesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyEntityTypesResponse) GetData() []*OntologyEntityType {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyEntityTypesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyEntityTypesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyEntityTypesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyEntityTypesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyEntityTypesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyEntityTypesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyEnumsResponse struct {
	Filters    *OntologyBaseFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyEnum      `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                  `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyEnumsResponse) GetFilters() *OntologyBaseFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyEnumsResponse) GetData() []*OntologyEnum {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyEnumsResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyEnumsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyEnumsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyEnumsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyEnumsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyEnumsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyHsCodesResponse struct {
	Filters    *OntologyHsCodesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyHsCode       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                     `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyHsCodesResponse) GetFilters() *OntologyHsCodesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyHsCodesResponse) GetData() []*OntologyHsCode {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyHsCodesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyHsCodesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyHsCodesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyHsCodesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyHsCodesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyHsCodesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyIdentifiersResponse struct {
	Filters    *OntologyIdentifiersFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyIdentifier       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                         `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyIdentifiersResponse) GetFilters() *OntologyIdentifiersFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyIdentifiersResponse) GetData() []*OntologyIdentifier {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyIdentifiersResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyIdentifiersResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyIdentifiersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyIdentifiersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyIdentifiersResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyIdentifiersResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyLanguagesResponse struct {
	Filters    *OntologyLanguagesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyLanguage       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                       `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyLanguagesResponse) GetFilters() *OntologyLanguagesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyLanguagesResponse) GetData() []*OntologyLanguage {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyLanguagesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyLanguagesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyLanguagesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyLanguagesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyLanguagesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyLanguagesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyRegionsResponse struct {
	Filters    *OntologyBaseFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyRegion    `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                  `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyRegionsResponse) GetFilters() *OntologyBaseFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyRegionsResponse) GetData() []*OntologyRegion {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyRegionsResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyRegionsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyRegionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyRegionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyRegionsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyRegionsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyRelationshipsResponse struct {
	Filters    *OntologyRelationshipsFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyRelationship       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                           `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyRelationshipsResponse) GetFilters() *OntologyRelationshipsFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyRelationshipsResponse) GetData() []*OntologyRelationship {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyRelationshipsResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyRelationshipsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyRelationshipsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyRelationshipsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyRelationshipsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyRelationshipsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyResponse struct {
	Data *GetOntologyResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyResponse) GetData() *GetOntologyResponseData {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyResponseData struct {
	Attributes    []*OntologyAttribute    `json:"attributes,omitempty" url:"attributes,omitempty"`
	Countries     []*OntologyCountry      `json:"countries,omitempty" url:"countries,omitempty"`
	Currencies    []*OntologyCurrency     `json:"currencies,omitempty" url:"currencies,omitempty"`
	EntityTypes   []*OntologyEntityType   `json:"entity_types,omitempty" url:"entity_types,omitempty"`
	Enums         []*OntologyEnum         `json:"enums,omitempty" url:"enums,omitempty"`
	Identifiers   []*OntologyIdentifier   `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	Languages     []*OntologyLanguage     `json:"languages,omitempty" url:"languages,omitempty"`
	Regions       []*OntologyRegion       `json:"regions,omitempty" url:"regions,omitempty"`
	Relationships []*OntologyRelationship `json:"relationships,omitempty" url:"relationships,omitempty"`
	RiskFactors   []*OntologyRiskFactor   `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	Sources       []*OntologySource       `json:"sources,omitempty" url:"sources,omitempty"`
	SourceTypes   []*OntologySourceType   `json:"source_types,omitempty" url:"source_types,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyResponseData) GetAttributes() []*OntologyAttribute {
	if g == nil {
		return nil
	}
	return g.Attributes
}

func (g *GetOntologyResponseData) GetCountries() []*OntologyCountry {
	if g == nil {
		return nil
	}
	return g.Countries
}

func (g *GetOntologyResponseData) GetCurrencies() []*OntologyCurrency {
	if g == nil {
		return nil
	}
	return g.Currencies
}

func (g *GetOntologyResponseData) GetEntityTypes() []*OntologyEntityType {
	if g == nil {
		return nil
	}
	return g.EntityTypes
}

func (g *GetOntologyResponseData) GetEnums() []*OntologyEnum {
	if g == nil {
		return nil
	}
	return g.Enums
}

func (g *GetOntologyResponseData) GetIdentifiers() []*OntologyIdentifier {
	if g == nil {
		return nil
	}
	return g.Identifiers
}

func (g *GetOntologyResponseData) GetLanguages() []*OntologyLanguage {
	if g == nil {
		return nil
	}
	return g.Languages
}

func (g *GetOntologyResponseData) GetRegions() []*OntologyRegion {
	if g == nil {
		return nil
	}
	return g.Regions
}

func (g *GetOntologyResponseData) GetRelationships() []*OntologyRelationship {
	if g == nil {
		return nil
	}
	return g.Relationships
}

func (g *GetOntologyResponseData) GetRiskFactors() []*OntologyRiskFactor {
	if g == nil {
		return nil
	}
	return g.RiskFactors
}

func (g *GetOntologyResponseData) GetSources() []*OntologySource {
	if g == nil {
		return nil
	}
	return g.Sources
}

func (g *GetOntologyResponseData) GetSourceTypes() []*OntologySourceType {
	if g == nil {
		return nil
	}
	return g.SourceTypes
}

func (g *GetOntologyResponseData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyResponseData) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologyRiskFactorsResponse struct {
	Filters    *OntologyRiskFactorsFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologyRiskFactor       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                         `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologyRiskFactorsResponse) GetFilters() *OntologyRiskFactorsFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologyRiskFactorsResponse) GetData() []*OntologyRiskFactor {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologyRiskFactorsResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologyRiskFactorsResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologyRiskFactorsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologyRiskFactorsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologyRiskFactorsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologyRiskFactorsResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologySourceTypesResponse struct {
	Filters    *OntologyBaseFilters  `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologySourceType `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                   `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologySourceTypesResponse) GetFilters() *OntologyBaseFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologySourceTypesResponse) GetData() []*OntologySourceType {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologySourceTypesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologySourceTypesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologySourceTypesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologySourceTypesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologySourceTypesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologySourceTypesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetOntologySourcesResponse struct {
	Filters    *OntologySourcesFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data       []*OntologySource       `json:"data,omitempty" url:"data,omitempty"`
	TotalCount int                     `json:"total_count" url:"total_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GetOntologySourcesResponse) GetFilters() *OntologySourcesFilters {
	if g == nil {
		return nil
	}
	return g.Filters
}

func (g *GetOntologySourcesResponse) GetData() []*OntologySource {
	if g == nil {
		return nil
	}
	return g.Data
}

func (g *GetOntologySourcesResponse) GetTotalCount() int {
	if g == nil {
		return 0
	}
	return g.TotalCount
}

func (g *GetOntologySourcesResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOntologySourcesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOntologySourcesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOntologySourcesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOntologySourcesResponse) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type OntologyAttribute struct {
	Id      Attributes                `json:"id" url:"id"`
	Label   string                    `json:"label" url:"label"`
	Comment string                    `json:"comment" url:"comment"`
	Fields  []*OntologyAttributeField `json:"fields,omitempty" url:"fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyAttribute) GetId() Attributes {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyAttribute) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyAttribute) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyAttribute) GetFields() []*OntologyAttributeField {
	if o == nil {
		return nil
	}
	return o.Fields
}

func (o *OntologyAttribute) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyAttribute(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyAttribute) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyAttributeField struct {
	Id      string   `json:"id" url:"id"`
	Label   string   `json:"label" url:"label"`
	Comment string   `json:"comment" url:"comment"`
	Type    []string `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyAttributeField) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyAttributeField) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyAttributeField) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyAttributeField) GetType() []string {
	if o == nil {
		return nil
	}
	return o.Type
}

func (o *OntologyAttributeField) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyAttributeField) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyAttributeField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyAttributeField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyAttributeField) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyAttributesFilters struct {
	// Attribute Id filter.
	Id []Attributes `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyAttributesFilters) GetId() []Attributes {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyAttributesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyAttributesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyAttributesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyAttributesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyAttributesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyBaseFilters struct {
	// Resource Id filter.
	Id []string `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyBaseFilters) GetId() []string {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyBaseFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyBaseFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyBaseFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyBaseFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyBaseFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyCountriesFilters struct {
	// Country Id filter.
	Id []Country `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyCountriesFilters) GetId() []Country {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyCountriesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyCountriesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyCountriesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyCountriesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyCountriesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyCountry struct {
	Id    Country `json:"id" url:"id"`
	Label string  `json:"label" url:"label"`
	Code  int     `json:"code" url:"code"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyCountry) GetId() Country {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyCountry) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyCountry) GetCode() int {
	if o == nil {
		return 0
	}
	return o.Code
}

func (o *OntologyCountry) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyCountry) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyCountry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyCountry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyCountry) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyCurrenciesFilters struct {
	// Currency Id filter.
	Id []Currency `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyCurrenciesFilters) GetId() []Currency {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyCurrenciesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyCurrenciesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyCurrenciesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyCurrenciesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyCurrenciesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyCurrency struct {
	Id    Currency `json:"id" url:"id"`
	Label string   `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyCurrency) GetId() Currency {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyCurrency) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyCurrency) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyCurrency) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyCurrency
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyCurrency(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyCurrency) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyEntityType struct {
	Id           Entities                   `json:"id" url:"id"`
	Label        string                     `json:"label" url:"label"`
	Comment      string                     `json:"comment" url:"comment"`
	Attribute    []Attributes               `json:"attribute,omitempty" url:"attribute,omitempty"`
	Relationship []Relationships            `json:"relationship,omitempty" url:"relationship,omitempty"`
	Field        []*OntologyEntityTypeField `json:"field,omitempty" url:"field,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyEntityType) GetId() Entities {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyEntityType) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyEntityType) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyEntityType) GetAttribute() []Attributes {
	if o == nil {
		return nil
	}
	return o.Attribute
}

func (o *OntologyEntityType) GetRelationship() []Relationships {
	if o == nil {
		return nil
	}
	return o.Relationship
}

func (o *OntologyEntityType) GetField() []*OntologyEntityTypeField {
	if o == nil {
		return nil
	}
	return o.Field
}

func (o *OntologyEntityType) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyEntityType) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyEntityType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyEntityType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyEntityType) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyEntityTypeField struct {
	Attributes    Attributes
	Relationships Relationships

	typ string
}

func NewOntologyEntityTypeFieldFromAttributes(value Attributes) *OntologyEntityTypeField {
	return &OntologyEntityTypeField{typ: "Attributes", Attributes: value}
}

func NewOntologyEntityTypeFieldFromRelationships(value Relationships) *OntologyEntityTypeField {
	return &OntologyEntityTypeField{typ: "Relationships", Relationships: value}
}

func (o *OntologyEntityTypeField) GetAttributes() Attributes {
	if o == nil {
		return ""
	}
	return o.Attributes
}

func (o *OntologyEntityTypeField) GetRelationships() Relationships {
	if o == nil {
		return ""
	}
	return o.Relationships
}

func (o *OntologyEntityTypeField) UnmarshalJSON(data []byte) error {
	var valueAttributes Attributes
	if err := json.Unmarshal(data, &valueAttributes); err == nil {
		o.typ = "Attributes"
		o.Attributes = valueAttributes
		return nil
	}
	var valueRelationships Relationships
	if err := json.Unmarshal(data, &valueRelationships); err == nil {
		o.typ = "Relationships"
		o.Relationships = valueRelationships
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, o)
}

func (o OntologyEntityTypeField) MarshalJSON() ([]byte, error) {
	if o.typ == "Attributes" || o.Attributes != "" {
		return json.Marshal(o.Attributes)
	}
	if o.typ == "Relationships" || o.Relationships != "" {
		return json.Marshal(o.Relationships)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OntologyEntityTypeFieldVisitor interface {
	VisitAttributes(Attributes) error
	VisitRelationships(Relationships) error
}

func (o *OntologyEntityTypeField) Accept(visitor OntologyEntityTypeFieldVisitor) error {
	if o.typ == "Attributes" || o.Attributes != "" {
		return visitor.VisitAttributes(o.Attributes)
	}
	if o.typ == "Relationships" || o.Relationships != "" {
		return visitor.VisitRelationships(o.Relationships)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", o)
}

type OntologyEntityTypesFilters struct {
	// Entity type Id filter.
	Id []Entities `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyEntityTypesFilters) GetId() []Entities {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyEntityTypesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyEntityTypesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyEntityTypesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyEntityTypesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyEntityTypesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyEnum struct {
	Id      string                `json:"id" url:"id"`
	Label   string                `json:"label" url:"label"`
	Comment string                `json:"comment" url:"comment"`
	Symbols []*OntologyEnumSymbol `json:"symbols,omitempty" url:"symbols,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyEnum) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyEnum) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyEnum) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyEnum) GetSymbols() []*OntologyEnumSymbol {
	if o == nil {
		return nil
	}
	return o.Symbols
}

func (o *OntologyEnum) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyEnum) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyEnum
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyEnum(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyEnum) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyEnumSymbol struct {
	Id      string `json:"id" url:"id"`
	Label   string `json:"label" url:"label"`
	Comment string `json:"comment" url:"comment"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyEnumSymbol) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyEnumSymbol) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyEnumSymbol) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyEnumSymbol) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyEnumSymbol) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyEnumSymbol
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyEnumSymbol(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyEnumSymbol) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyHsCode struct {
	Code             string `json:"code" url:"code"`
	ShortDescription string `json:"short_description" url:"short_description"`
	LongDescription  string `json:"long_description" url:"long_description"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyHsCode) GetCode() string {
	if o == nil {
		return ""
	}
	return o.Code
}

func (o *OntologyHsCode) GetShortDescription() string {
	if o == nil {
		return ""
	}
	return o.ShortDescription
}

func (o *OntologyHsCode) GetLongDescription() string {
	if o == nil {
		return ""
	}
	return o.LongDescription
}

func (o *OntologyHsCode) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyHsCode) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyHsCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyHsCode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyHsCode) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyHsCodesFilters struct {
	// HS code filter.
	Code []string `json:"code,omitempty" url:"code,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyHsCodesFilters) GetCode() []string {
	if o == nil {
		return nil
	}
	return o.Code
}

func (o *OntologyHsCodesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyHsCodesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyHsCodesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyHsCodesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyHsCodesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyIdentifier struct {
	Id      IdentifierType `json:"id" url:"id"`
	Label   string         `json:"label" url:"label"`
	Comment string         `json:"comment" url:"comment"`
	Regex   string         `json:"regex" url:"regex"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyIdentifier) GetId() IdentifierType {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyIdentifier) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyIdentifier) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyIdentifier) GetRegex() string {
	if o == nil {
		return ""
	}
	return o.Regex
}

func (o *OntologyIdentifier) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyIdentifier) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyIdentifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyIdentifier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyIdentifier) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyIdentifiersFilters struct {
	// Identifier Id filter.
	Id []IdentifierType `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyIdentifiersFilters) GetId() []IdentifierType {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyIdentifiersFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyIdentifiersFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyIdentifiersFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyIdentifiersFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyIdentifiersFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyLanguage struct {
	Id    Language `json:"id" url:"id"`
	Label string   `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyLanguage) GetId() Language {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyLanguage) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyLanguage) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyLanguage) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyLanguage
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyLanguage(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyLanguage) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyLanguagesFilters struct {
	// Language Id filter.
	Id []Language `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyLanguagesFilters) GetId() []Language {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyLanguagesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyLanguagesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyLanguagesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyLanguagesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyLanguagesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyRegion struct {
	Id    string `json:"id" url:"id"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyRegion) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyRegion) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyRegion) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyRegion) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyRegion
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyRegion(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyRegion) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyRelationship struct {
	Id          Relationships                  `json:"id" url:"id"`
	Label       string                         `json:"label" url:"label"`
	Description string                         `json:"description" url:"description"`
	Comment     string                         `json:"comment" url:"comment"`
	Type        string                         `json:"type" url:"type"`
	Inverse     Relationships                  `json:"inverse" url:"inverse"`
	Between     []*OntologyRelationshipBetween `json:"between,omitempty" url:"between,omitempty"`
	Attributes  []Attributes                   `json:"attributes,omitempty" url:"attributes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyRelationship) GetId() Relationships {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyRelationship) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyRelationship) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *OntologyRelationship) GetComment() string {
	if o == nil {
		return ""
	}
	return o.Comment
}

func (o *OntologyRelationship) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *OntologyRelationship) GetInverse() Relationships {
	if o == nil {
		return ""
	}
	return o.Inverse
}

func (o *OntologyRelationship) GetBetween() []*OntologyRelationshipBetween {
	if o == nil {
		return nil
	}
	return o.Between
}

func (o *OntologyRelationship) GetAttributes() []Attributes {
	if o == nil {
		return nil
	}
	return o.Attributes
}

func (o *OntologyRelationship) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyRelationship) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyRelationship
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyRelationship(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyRelationship) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyRelationshipBetween struct {
	From Entities `json:"from" url:"from"`
	To   Entities `json:"to" url:"to"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyRelationshipBetween) GetFrom() Entities {
	if o == nil {
		return ""
	}
	return o.From
}

func (o *OntologyRelationshipBetween) GetTo() Entities {
	if o == nil {
		return ""
	}
	return o.To
}

func (o *OntologyRelationshipBetween) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyRelationshipBetween) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyRelationshipBetween
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyRelationshipBetween(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyRelationshipBetween) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyRelationshipsFilters struct {
	// Relationship Id filter.
	Id []Relationships `json:"id,omitempty" url:"id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyRelationshipsFilters) GetId() []Relationships {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyRelationshipsFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyRelationshipsFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyRelationshipsFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyRelationshipsFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyRelationshipsFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyRiskFactor struct {
	Id                  string   `json:"id" url:"id"`
	Categories          []string `json:"categories,omitempty" url:"categories,omitempty"`
	Label               string   `json:"label" url:"label"`
	Description         string   `json:"description" url:"description"`
	Doc                 string   `json:"doc" url:"doc"`
	Code                int      `json:"code" url:"code"`
	Level               string   `json:"level" url:"level"`
	RiskType            string   `json:"risk_type" url:"risk_type"`
	RiskViz             string   `json:"risk_viz" url:"risk_viz"`
	Visible             bool     `json:"visible" url:"visible"`
	Enabled             bool     `json:"enabled" url:"enabled"`
	Type                string   `json:"type" url:"type"`
	Tg                  bool     `json:"tg" url:"tg"`
	DoNotRenderMetadata []string `json:"do_not_render_metadata,omitempty" url:"do_not_render_metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyRiskFactor) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologyRiskFactor) GetCategories() []string {
	if o == nil {
		return nil
	}
	return o.Categories
}

func (o *OntologyRiskFactor) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologyRiskFactor) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *OntologyRiskFactor) GetDoc() string {
	if o == nil {
		return ""
	}
	return o.Doc
}

func (o *OntologyRiskFactor) GetCode() int {
	if o == nil {
		return 0
	}
	return o.Code
}

func (o *OntologyRiskFactor) GetLevel() string {
	if o == nil {
		return ""
	}
	return o.Level
}

func (o *OntologyRiskFactor) GetRiskType() string {
	if o == nil {
		return ""
	}
	return o.RiskType
}

func (o *OntologyRiskFactor) GetRiskViz() string {
	if o == nil {
		return ""
	}
	return o.RiskViz
}

func (o *OntologyRiskFactor) GetVisible() bool {
	if o == nil {
		return false
	}
	return o.Visible
}

func (o *OntologyRiskFactor) GetEnabled() bool {
	if o == nil {
		return false
	}
	return o.Enabled
}

func (o *OntologyRiskFactor) GetType() string {
	if o == nil {
		return ""
	}
	return o.Type
}

func (o *OntologyRiskFactor) GetTg() bool {
	if o == nil {
		return false
	}
	return o.Tg
}

func (o *OntologyRiskFactor) GetDoNotRenderMetadata() []string {
	if o == nil {
		return nil
	}
	return o.DoNotRenderMetadata
}

func (o *OntologyRiskFactor) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyRiskFactor) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyRiskFactor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyRiskFactor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyRiskFactor) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologyRiskFactorsFilters struct {
	// Risk factor Id filter.
	Id []Risk `json:"id,omitempty" url:"id,omitempty"`
	// Risk category filter.
	RiskCategory []RiskCategory `json:"risk_category,omitempty" url:"risk_category,omitempty"`
	// Risk level filter.
	Level []RiskLevel `json:"level,omitempty" url:"level,omitempty"`
	// Risk type filter.
	RiskType []string `json:"risk_type,omitempty" url:"risk_type,omitempty"`
	// Risk enabled filter.
	Enabled *bool `json:"enabled,omitempty" url:"enabled,omitempty"`
	// Risk visible filter.
	Visible *bool `json:"visible,omitempty" url:"visible,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologyRiskFactorsFilters) GetId() []Risk {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologyRiskFactorsFilters) GetRiskCategory() []RiskCategory {
	if o == nil {
		return nil
	}
	return o.RiskCategory
}

func (o *OntologyRiskFactorsFilters) GetLevel() []RiskLevel {
	if o == nil {
		return nil
	}
	return o.Level
}

func (o *OntologyRiskFactorsFilters) GetRiskType() []string {
	if o == nil {
		return nil
	}
	return o.RiskType
}

func (o *OntologyRiskFactorsFilters) GetEnabled() *bool {
	if o == nil {
		return nil
	}
	return o.Enabled
}

func (o *OntologyRiskFactorsFilters) GetVisible() *bool {
	if o == nil {
		return nil
	}
	return o.Visible
}

func (o *OntologyRiskFactorsFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologyRiskFactorsFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologyRiskFactorsFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologyRiskFactorsFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologyRiskFactorsFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologySource struct {
	Id          string  `json:"id" url:"id"`
	Label       string  `json:"label" url:"label"`
	Description string  `json:"description" url:"description"`
	Country     Country `json:"country" url:"country"`
	Region      string  `json:"region" url:"region"`
	// An ISO 8601 encoded date string indicating the added date. In the format YYYY-MM-DD
	DateAdded  time.Time `json:"date_added" url:"date_added" format:"date"`
	SourceType string    `json:"source_type" url:"source_type"`
	RecordType string    `json:"record_type" url:"record_type"`
	Structure  string    `json:"structure" url:"structure"`
	SourceUrl  string    `json:"source_url" url:"source_url"`
	Pep        bool      `json:"pep" url:"pep"`
	Watchlist  bool      `json:"watchlist" url:"watchlist"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologySource) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologySource) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologySource) GetDescription() string {
	if o == nil {
		return ""
	}
	return o.Description
}

func (o *OntologySource) GetCountry() Country {
	if o == nil {
		return ""
	}
	return o.Country
}

func (o *OntologySource) GetRegion() string {
	if o == nil {
		return ""
	}
	return o.Region
}

func (o *OntologySource) GetDateAdded() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.DateAdded
}

func (o *OntologySource) GetSourceType() string {
	if o == nil {
		return ""
	}
	return o.SourceType
}

func (o *OntologySource) GetRecordType() string {
	if o == nil {
		return ""
	}
	return o.RecordType
}

func (o *OntologySource) GetStructure() string {
	if o == nil {
		return ""
	}
	return o.Structure
}

func (o *OntologySource) GetSourceUrl() string {
	if o == nil {
		return ""
	}
	return o.SourceUrl
}

func (o *OntologySource) GetPep() bool {
	if o == nil {
		return false
	}
	return o.Pep
}

func (o *OntologySource) GetWatchlist() bool {
	if o == nil {
		return false
	}
	return o.Watchlist
}

func (o *OntologySource) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologySource) UnmarshalJSON(data []byte) error {
	type embed OntologySource
	var unmarshaler = struct {
		embed
		DateAdded *internal.Date `json:"date_added"`
	}{
		embed: embed(*o),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*o = OntologySource(unmarshaler.embed)
	o.DateAdded = unmarshaler.DateAdded.Time()
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologySource) MarshalJSON() ([]byte, error) {
	type embed OntologySource
	var marshaler = struct {
		embed
		DateAdded *internal.Date `json:"date_added"`
	}{
		embed:     embed(*o),
		DateAdded: internal.NewDate(o.DateAdded),
	}
	return json.Marshal(marshaler)
}

func (o *OntologySource) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologySourceType struct {
	Id    string `json:"id" url:"id"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologySourceType) GetId() string {
	if o == nil {
		return ""
	}
	return o.Id
}

func (o *OntologySourceType) GetLabel() string {
	if o == nil {
		return ""
	}
	return o.Label
}

func (o *OntologySourceType) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologySourceType) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologySourceType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologySourceType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologySourceType) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type OntologySourcesFilters struct {
	// Source Id filter.
	Id []string `json:"id,omitempty" url:"id,omitempty"`
	// Source country filter.
	Country []Country `json:"country,omitempty" url:"country,omitempty"`
	// Source type filter.
	SourceType []string `json:"source_type,omitempty" url:"source_type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (o *OntologySourcesFilters) GetId() []string {
	if o == nil {
		return nil
	}
	return o.Id
}

func (o *OntologySourcesFilters) GetCountry() []Country {
	if o == nil {
		return nil
	}
	return o.Country
}

func (o *OntologySourcesFilters) GetSourceType() []string {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *OntologySourcesFilters) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *OntologySourcesFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler OntologySourcesFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = OntologySourcesFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties
	o.rawJSON = json.RawMessage(data)
	return nil
}

func (o *OntologySourcesFilters) String() string {
	if len(o.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(o.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}
