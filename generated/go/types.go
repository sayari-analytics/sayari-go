// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
)

// The bearer token you will pass in to subsequent API calls to authenticate.
type AccessToken = string

// Tells you how long (in seconds) until your bearer token expires.
type ExpiresIn = int

// Will always be "Bearer"
type TokenType = string

// Response fields that represent unbounded collections, such as a search result or an entity's attributes or relationships, or a record's references, can all be paginated in cases where the collection is larger than can be efficiently returned in a single request.
type PaginatedResponse struct {
	Limit int       `json:"limit"`
	Size  *SizeInfo `json:"size,omitempty"`
}

type SizeInfo struct {
	Count     int    `json:"count"`
	Qualifier string `json:"qualifier"`
}

type AdditionalInformationData struct {
	Record      []string                         `json:"record,omitempty"`
	RecordCount int                              `json:"record_count"`
	Properties  *AdditionalInformationProperties `json:"properties,omitempty"`
}

// A generic attribute used to hold miscellaneous information not covered by any other attribute. Includes 'value' (for the attribute itself), 'type' (a name, e.g. 'Real property description,') and 'extra' (a miscellaneous field to hold any other details) fields.
type AdditionalInformationInfo struct {
	Limit int                          `json:"limit"`
	Size  *SizeInfo                    `json:"size,omitempty"`
	Data  []*AdditionalInformationData `json:"data,omitempty"`
}

type AdditionalInformationProperties struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type AddressData struct {
	Record      []string           `json:"record,omitempty"`
	RecordCount int                `json:"record_count"`
	Properties  *AddressProperties `json:"properties,omitempty"`
}

// A physical location description. Addresses may exist as a simple string ('123 South Main St., South Bend, IN 46556'), or may be in smaller chunks with separate fields ('Number: 123,' 'Street name: South Main...'). Where possible, these fields will be parsed using the Libpostal ontology (https://github.com/openvenues/libpostal#parser-labels), which facilitates more robust address analysis and comparison.
type AddressInfo struct {
	Limit int            `json:"limit"`
	Size  *SizeInfo      `json:"size,omitempty"`
	Data  []*AddressData `json:"data,omitempty"`
}

type AddressProperties struct {
	Building       *string      `json:"building,omitempty"`
	Category       *string      `json:"category,omitempty"`
	City           *string      `json:"city,omitempty"`
	CityDistrict   *string      `json:"city_district,omitempty"`
	Country        *string      `json:"country,omitempty"`
	CountryRegion  *string      `json:"country_region,omitempty"`
	Entrance       *string      `json:"entrance,omitempty"`
	House          *string      `json:"house,omitempty"`
	HouseNumber    *string      `json:"house_number,omitempty"`
	Island         *string      `json:"island,omitempty"`
	Language       *Language    `json:"language,omitempty"`
	Level          *string      `json:"level,omitempty"`
	MetroStation   *string      `json:"metro_station,omitempty"`
	Near           *string      `json:"near,omitempty"`
	PoBox          *string      `json:"po_box,omitempty"`
	Postcode       *string      `json:"postcode,omitempty"`
	PrecisionCode  *string      `json:"precision_code,omitempty"`
	Road           *string      `json:"road,omitempty"`
	Staircase      *string      `json:"staircase,omitempty"`
	State          *string      `json:"state,omitempty"`
	StateDistrict  *string      `json:"state_district,omitempty"`
	Suburb         *string      `json:"suburb,omitempty"`
	Translated     *string      `json:"translated,omitempty"`
	Transliterated *string      `json:"transliterated,omitempty"`
	Type           *AddressType `json:"type,omitempty"`
	Unit           *string      `json:"unit,omitempty"`
	Value          *string      `json:"value,omitempty"`
	WorldRegion    *string      `json:"world_region,omitempty"`
	X              *float64     `json:"x,omitempty"`
	Y              *float64     `json:"y,omitempty"`
}

// indicates what location an address is referring to
type AddressType string

const (
	// the port to which a shipment is sent
	AddressTypeArrival AddressType = "arrival"
	// the port from which a shipment leaves
	AddressTypeDeparture AddressType = "departure"
	// an address at which an entity receives mail
	AddressTypeMailing AddressType = "mailing"
	// an address at which an entity has a physical presence
	AddressTypePhysical AddressType = "physical"
	// an address an entity has listed for its registration
	AddressTypeRegistered AddressType = "registered"
	// an address at which an entity conducts its operations
	AddressTypeBusiness AddressType = "business"
)

func NewAddressTypeFromString(s string) (AddressType, error) {
	switch s {
	case "arrival":
		return AddressTypeArrival, nil
	case "departure":
		return AddressTypeDeparture, nil
	case "mailing":
		return AddressTypeMailing, nil
	case "physical":
		return AddressTypePhysical, nil
	case "registered":
		return AddressTypeRegistered, nil
	case "business":
		return AddressTypeBusiness, nil
	}
	var t AddressType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AddressType) Ptr() *AddressType {
	return &a
}

type AttributeData struct {
	Record      []string `json:"record,omitempty"`
	RecordCount int      `json:"record_count"`
}

type AttributeDetails struct {
	AdditionalInformation *AdditionalInformationInfo `json:"additional_information,omitempty"`
	Address               *AddressInfo               `json:"address,omitempty"`
	BusinessPurpose       *BusinessPurposeInfo       `json:"business_purpose,omitempty"`
	CompanyType           *CompanyTypeInfo           `json:"company_type,omitempty"`
	Contact               *ContactInfo               `json:"contact,omitempty"`
	Country               *CountryInfo               `json:"country,omitempty"`
	DateOfBirth           *DateOfBirthInfo           `json:"date_of_birth,omitempty"`
	Finances              *FinancesInfo              `json:"finances,omitempty"`
	Financials            *FinancialsInfo            `json:"financials,omitempty"`
	Gender                *GenderInfo                `json:"gender,omitempty"`
	Generic               *GenericInfo               `json:"generic,omitempty"`
	Identifier            *IdentifierInfo            `json:"identifier,omitempty"`
	Measurement           *MeasurementInfo           `json:"measurement,omitempty"`
	MonetaryValue         *MonetaryValueInfo         `json:"monetary_value,omitempty"`
	Name                  *NameInfo                  `json:"name,omitempty"`
	PersonStatus          *PersonStatusInfo          `json:"person_status,omitempty"`
	Position              *PositionInfo              `json:"position,omitempty"`
	RiskIntelligence      *RiskIntelligenceInfo      `json:"risk_intelligence,omitempty"`
	Shares                *SharesInfo                `json:"shares,omitempty"`
	Status                *StatusInfo                `json:"status,omitempty"`
	TranslatedName        *TranslatedNameInfo        `json:"translated_name,omitempty"`
	WeakIdentifier        *WeakIdentifierInfo        `json:"weak_identifier,omitempty"`
}

type Attributes string

const (
	AttributesRiskIntelligence      Attributes = "risk_intelligence"
	AttributesCountry               Attributes = "country"
	AttributesWeakIdentifier        Attributes = "weak_identifier"
	AttributesGeneric               Attributes = "generic"
	AttributesStatus                Attributes = "status"
	AttributesShares                Attributes = "shares"
	AttributesName                  Attributes = "name"
	AttributesContact               Attributes = "contact"
	AttributesPersonStatus          Attributes = "person_status"
	AttributesFinancials            Attributes = "financials"
	AttributesAdditionalInformation Attributes = "additional_information"
	AttributesFinances              Attributes = "finances"
	AttributesAddress               Attributes = "address"
	AttributesMonetaryValue         Attributes = "monetary_value"
	AttributesCompanyType           Attributes = "company_type"
	AttributesGender                Attributes = "gender"
	AttributesTranslatedName        Attributes = "translated_name"
	AttributesDateOfBirth           Attributes = "date_of_birth"
	AttributesMeasurement           Attributes = "measurement"
	AttributesIdentifier            Attributes = "identifier"
	AttributesPosition              Attributes = "position"
	AttributesBusinessPurpose       Attributes = "business_purpose"
)

func NewAttributesFromString(s string) (Attributes, error) {
	switch s {
	case "risk_intelligence":
		return AttributesRiskIntelligence, nil
	case "country":
		return AttributesCountry, nil
	case "weak_identifier":
		return AttributesWeakIdentifier, nil
	case "generic":
		return AttributesGeneric, nil
	case "status":
		return AttributesStatus, nil
	case "shares":
		return AttributesShares, nil
	case "name":
		return AttributesName, nil
	case "contact":
		return AttributesContact, nil
	case "person_status":
		return AttributesPersonStatus, nil
	case "financials":
		return AttributesFinancials, nil
	case "additional_information":
		return AttributesAdditionalInformation, nil
	case "finances":
		return AttributesFinances, nil
	case "address":
		return AttributesAddress, nil
	case "monetary_value":
		return AttributesMonetaryValue, nil
	case "company_type":
		return AttributesCompanyType, nil
	case "gender":
		return AttributesGender, nil
	case "translated_name":
		return AttributesTranslatedName, nil
	case "date_of_birth":
		return AttributesDateOfBirth, nil
	case "measurement":
		return AttributesMeasurement, nil
	case "identifier":
		return AttributesIdentifier, nil
	case "position":
		return AttributesPosition, nil
	case "business_purpose":
		return AttributesBusinessPurpose, nil
	}
	var t Attributes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a Attributes) Ptr() *Attributes {
	return &a
}

type BothIdentifierTypes struct {
	typeName           string
	IdentifierType     IdentifierType
	WeakIdentifierType WeakIdentifierType
}

func NewBothIdentifierTypesFromIdentifierType(value IdentifierType) *BothIdentifierTypes {
	return &BothIdentifierTypes{typeName: "identifierType", IdentifierType: value}
}

func NewBothIdentifierTypesFromWeakIdentifierType(value WeakIdentifierType) *BothIdentifierTypes {
	return &BothIdentifierTypes{typeName: "weakIdentifierType", WeakIdentifierType: value}
}

func (b *BothIdentifierTypes) UnmarshalJSON(data []byte) error {
	var valueIdentifierType IdentifierType
	if err := json.Unmarshal(data, &valueIdentifierType); err == nil {
		b.typeName = "identifierType"
		b.IdentifierType = valueIdentifierType
		return nil
	}
	var valueWeakIdentifierType WeakIdentifierType
	if err := json.Unmarshal(data, &valueWeakIdentifierType); err == nil {
		b.typeName = "weakIdentifierType"
		b.WeakIdentifierType = valueWeakIdentifierType
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, b)
}

func (b BothIdentifierTypes) MarshalJSON() ([]byte, error) {
	switch b.typeName {
	default:
		return nil, fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "identifierType":
		return json.Marshal(b.IdentifierType)
	case "weakIdentifierType":
		return json.Marshal(b.WeakIdentifierType)
	}
}

type BothIdentifierTypesVisitor interface {
	VisitIdentifierType(IdentifierType) error
	VisitWeakIdentifierType(WeakIdentifierType) error
}

func (b *BothIdentifierTypes) Accept(visitor BothIdentifierTypesVisitor) error {
	switch b.typeName {
	default:
		return fmt.Errorf("invalid type %s in %T", b.typeName, b)
	case "identifierType":
		return visitor.VisitIdentifierType(b.IdentifierType)
	case "weakIdentifierType":
		return visitor.VisitWeakIdentifierType(b.WeakIdentifierType)
	}
}

type BusinessPurposeData struct {
	Record      []string                   `json:"record,omitempty"`
	RecordCount int                        `json:"record_count"`
	Properties  *BusinessPurposeProperties `json:"properties,omitempty"`
}

// Text and/or a code (NAICS, NACE, ISIC, etc.) that describes what a company is legally allowed to do or produce
type BusinessPurposeInfo struct {
	Limit int                    `json:"limit"`
	Size  *SizeInfo              `json:"size,omitempty"`
	Data  []*BusinessPurposeData `json:"data,omitempty"`
}

type BusinessPurposeProperties struct {
	Code     *string                  `json:"code,omitempty"`
	Standard *BusinessPurposeStandard `json:"standard,omitempty"`
	Value    *string                  `json:"value,omitempty"`
}

// Business purpose standard enums describe the type of code listed in a business purpose attribute, which may or may not allow for Pyisic conversions/lookups.
type BusinessPurposeStandard string

const (
	// Classificação Nacional de Atividades Econômicas - Brazil National Economic Activity Classification, Rev. 2.0
	BusinessPurposeStandardCnae2 BusinessPurposeStandard = "CNAE2"
	// International Standard Industrial Classification, Rev. 3
	BusinessPurposeStandardIsic3 BusinessPurposeStandard = "ISIC3"
	// International Standard Industrial Classification, Rev. 3.1
	BusinessPurposeStandardIsic31 BusinessPurposeStandard = "ISIC31"
	// International Standard Industrial Classification, Rev. 4
	BusinessPurposeStandardIsic4 BusinessPurposeStandard = "ISIC4"
	// Japan Standard Industrial Classification, Rev. 13
	BusinessPurposeStandardJsic13 BusinessPurposeStandard = "JSIC13"
	// Korean Standard Industry Classification, Rev. 10
	BusinessPurposeStandardKsic10 BusinessPurposeStandard = "KSIC10"
	// Nomenclature of Economic Activities, Rev. 1
	BusinessPurposeStandardNace1 BusinessPurposeStandard = "NACE1"
	// Nomenclature of Economic Activities, Rev. 2
	BusinessPurposeStandardNace2 BusinessPurposeStandard = "NACE2"
	// North American Industry Classification System, Rev. 2017
	BusinessPurposeStandardNaics2017 BusinessPurposeStandard = "NAICS2017"
	// Standardna klasifikacija dejavnosti - Slovenia Standard Classification of Activities, Rev. 2002
	BusinessPurposeStandardSkd2002 BusinessPurposeStandard = "SKD2002"
	// Standardna klasifikacija dejavnosti - Slovenia Standard Classification of Activities, Rev. 2008
	BusinessPurposeStandardSkd2008 BusinessPurposeStandard = "SKD2008"
	// การจัดประเภทมาตรฐานอุตสาหกรรมประเทศไทย ปี 2552 - Thailand Standard Industrial Classification, Rev. 2009
	BusinessPurposeStandardTsic2552 BusinessPurposeStandard = "TSIC2552"
	// Nomenclature des activités économiques - Belgium Nomenclature of Economic Activities, Rev. 2003
	BusinessPurposeStandardNacebel2003 BusinessPurposeStandard = "NACEBEL2003"
	// Nomenclature des activités économiques - Belgium Nomenclature of Economic Activities, Rev. 2008
	BusinessPurposeStandardNacebel2008 BusinessPurposeStandard = "NACEBEL2008"
	// Nomenclature d'activités française - French Nomenclature of Economic Activities, Rev. 1
	BusinessPurposeStandardNaf1 BusinessPurposeStandard = "NAF1"
	// Nomenclature d'activités française - French Nomenclature of Economic Activities, Rev. 2
	BusinessPurposeStandardNaf2 BusinessPurposeStandard = "NAF2"
	// Экономикалык Ишмердиктердин Тyрлөрүнүн Мамлекеттик Классификатору - Kyrgyz State Economic Activity Classification, Rev. 2011
	BusinessPurposeStandardGced2011 BusinessPurposeStandard = "GCED2011"
	// Sistema de Clasificación Industrial de América del Norte - Mexico North American Industry Classification System, Rev. 2018
	BusinessPurposeStandardScian2018 BusinessPurposeStandard = "SCIAN2018"
	// Clasificador Nacional de Actividades Económicas(CNAE) - Cuba National Economic Activity Classifications, Rev. 2021
	BusinessPurposeStandardCcnae2021 BusinessPurposeStandard = "CCNAE2021"
	// Clasificatorul Activităţilor Din Economia Moldovei - Moldova Classification of Economic Activities, Rev. 2005
	BusinessPurposeStandardCaem2005 BusinessPurposeStandard = "CAEM2005"
	// De Standaard Bedrijfsindeling (SBI) - Netherlands Standard Company Classification, Rev. 2008
	BusinessPurposeStandardSbi2008 BusinessPurposeStandard = "SBI2008"
	// Harmonized System Codes (standardized numerical method of classifying traded products)
	BusinessPurposeStandardHs BusinessPurposeStandard = "HS"
	// Standard Industrial Classification (SIC) Code List (USA)
	BusinessPurposeStandardSic BusinessPurposeStandard = "SIC"
	// Singapore Standard Industrial Classification (national standard for classifying economic activities undertaken by economic units)
	BusinessPurposeStandardSsic2020 BusinessPurposeStandard = "SSIC2020"
)

func NewBusinessPurposeStandardFromString(s string) (BusinessPurposeStandard, error) {
	switch s {
	case "CNAE2":
		return BusinessPurposeStandardCnae2, nil
	case "ISIC3":
		return BusinessPurposeStandardIsic3, nil
	case "ISIC31":
		return BusinessPurposeStandardIsic31, nil
	case "ISIC4":
		return BusinessPurposeStandardIsic4, nil
	case "JSIC13":
		return BusinessPurposeStandardJsic13, nil
	case "KSIC10":
		return BusinessPurposeStandardKsic10, nil
	case "NACE1":
		return BusinessPurposeStandardNace1, nil
	case "NACE2":
		return BusinessPurposeStandardNace2, nil
	case "NAICS2017":
		return BusinessPurposeStandardNaics2017, nil
	case "SKD2002":
		return BusinessPurposeStandardSkd2002, nil
	case "SKD2008":
		return BusinessPurposeStandardSkd2008, nil
	case "TSIC2552":
		return BusinessPurposeStandardTsic2552, nil
	case "NACEBEL2003":
		return BusinessPurposeStandardNacebel2003, nil
	case "NACEBEL2008":
		return BusinessPurposeStandardNacebel2008, nil
	case "NAF1":
		return BusinessPurposeStandardNaf1, nil
	case "NAF2":
		return BusinessPurposeStandardNaf2, nil
	case "GCED2011":
		return BusinessPurposeStandardGced2011, nil
	case "SCIAN2018":
		return BusinessPurposeStandardScian2018, nil
	case "CCNAE2021":
		return BusinessPurposeStandardCcnae2021, nil
	case "CAEM2005":
		return BusinessPurposeStandardCaem2005, nil
	case "SBI2008":
		return BusinessPurposeStandardSbi2008, nil
	case "HS":
		return BusinessPurposeStandardHs, nil
	case "SIC":
		return BusinessPurposeStandardSic, nil
	case "SSIC2020":
		return BusinessPurposeStandardSsic2020, nil
	}
	var t BusinessPurposeStandard
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BusinessPurposeStandard) Ptr() *BusinessPurposeStandard {
	return &b
}

// Company status enums describe a normalized set of statuses to which we map specific terms describing a company's status in a source document.
type CompanyStatus string

const (
	CompanyStatusSeized              CompanyStatus = "seized"
	CompanyStatusInReceivership      CompanyStatus = "in_receivership"
	CompanyStatusRegistrationRevoked CompanyStatus = "registration_revoked"
	CompanyStatusOpening             CompanyStatus = "opening"
	CompanyStatusDissolved           CompanyStatus = "dissolved"
	// e.g. 'Active', 'Operating,' 'In good standing'
	CompanyStatusActive CompanyStatus = "active"
	// e.g. 'Inactive,' 'Administratively dissolved.' Used when the company still exists but is not operating normally.
	CompanyStatusInactive CompanyStatus = "inactive"
	// e.g. 'Closed,' 'Struck from the register,' 'Registration canceled.' Used when the company no longer legally exists.
	CompanyStatusClosed CompanyStatus = "closed"
	// e.g. 'In liquidation', 'Dissolved.' Used when the company is on track to close.
	CompanyStatusClosing CompanyStatus = "closing"
	// e.g. 'Registration date'
	CompanyStatusRegistered CompanyStatus = "registered"
	// e.g. 'Date of incorporation'
	CompanyStatusIncorporated CompanyStatus = "incorporated"
	// e.g. 'In receivership,' 'Bankruptcy trustee appointed,' 'Seized.' Used when an exernal party is granted legal/operational control over the company, typically to steer it through a bankruptcy or winding-up process.
	CompanyStatusUnderExternalControl CompanyStatus = "under_external_control"
	// e.g. 'Expired,' 'Inactive.' Used when the business license is no longer active and up-to-date.
	CompanyStatusExpired CompanyStatus = "expired"
	// e.g. 'Expanded,' 'Barred.' Used when a broker has been involved in one or more disclosure events involving certain final criminal matters, regulatory actions, civil judgment proceedings, or arbitrations or civil litigations.
	CompanyStatusExpanded CompanyStatus = "expanded"
	// e.g. 'Terminated', 'Closed.' Used when the licensing organization terminates a business license, barring the individual and/or company from performing business activities with the association of the organization.
	CompanyStatusTerminated CompanyStatus = "terminated"
)

func NewCompanyStatusFromString(s string) (CompanyStatus, error) {
	switch s {
	case "seized":
		return CompanyStatusSeized, nil
	case "in_receivership":
		return CompanyStatusInReceivership, nil
	case "registration_revoked":
		return CompanyStatusRegistrationRevoked, nil
	case "opening":
		return CompanyStatusOpening, nil
	case "dissolved":
		return CompanyStatusDissolved, nil
	case "active":
		return CompanyStatusActive, nil
	case "inactive":
		return CompanyStatusInactive, nil
	case "closed":
		return CompanyStatusClosed, nil
	case "closing":
		return CompanyStatusClosing, nil
	case "registered":
		return CompanyStatusRegistered, nil
	case "incorporated":
		return CompanyStatusIncorporated, nil
	case "under_external_control":
		return CompanyStatusUnderExternalControl, nil
	case "expired":
		return CompanyStatusExpired, nil
	case "expanded":
		return CompanyStatusExpanded, nil
	case "terminated":
		return CompanyStatusTerminated, nil
	}
	var t CompanyStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CompanyStatus) Ptr() *CompanyStatus {
	return &c
}

type CompanyTypeData struct {
	Record      []string               `json:"record,omitempty"`
	RecordCount int                    `json:"record_count"`
	Properties  *CompanyTypeProperties `json:"properties,omitempty"`
}

// A type of legal entity in a given jurisdiction (e.g. 'LLC,' 'Sociedad Anonima,' 'Private Company Limited by Shares')
type CompanyTypeInfo struct {
	Limit int                `json:"limit"`
	Size  *SizeInfo          `json:"size,omitempty"`
	Data  []*CompanyTypeData `json:"data,omitempty"`
}

type CompanyTypeProperties struct {
	Value *string `json:"value,omitempty"`
}

type ContactData struct {
	Record      []string           `json:"record,omitempty"`
	RecordCount int                `json:"record_count"`
	Properties  *ContactProperties `json:"properties,omitempty"`
}

// Contact information for an entity
type ContactInfo struct {
	Limit int            `json:"limit"`
	Size  *SizeInfo      `json:"size,omitempty"`
	Data  []*ContactData `json:"data,omitempty"`
}

type ContactProperties struct {
	Type  *ContactType `json:"type,omitempty"`
	Value string       `json:"value"`
}

// Contact type enums describe different methods of contact reported in a record about a given entity.
type ContactType string

const (
	// Any kind of phone number
	ContactTypePhoneNumber ContactType = "phone_number"
	ContactTypeFax         ContactType = "fax"
	ContactTypeEmail       ContactType = "email"
	ContactTypeUrl         ContactType = "url"
)

func NewContactTypeFromString(s string) (ContactType, error) {
	switch s {
	case "phone_number":
		return ContactTypePhoneNumber, nil
	case "fax":
		return ContactTypeFax, nil
	case "email":
		return ContactTypeEmail, nil
	case "url":
		return ContactTypeUrl, nil
	}
	var t ContactType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContactType) Ptr() *ContactType {
	return &c
}

// Country enums are normalized representations of country names. Taken from https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#ECU
type Country string

const (
	// Aruba
	CountryAbw Country = "ABW"
	// Afghanistan
	CountryAfg Country = "AFG"
	// Angola
	CountryAgo Country = "AGO"
	// Anguilla
	CountryAia Country = "AIA"
	// Åland Islands
	CountryAla Country = "ALA"
	// Albania
	CountryAlb Country = "ALB"
	// Andorra
	CountryAnd Country = "AND"
	// United Arab Emirates
	CountryAre Country = "ARE"
	// Argentina
	CountryArg Country = "ARG"
	// Armenia
	CountryArm Country = "ARM"
	// American Samoa
	CountryAsm Country = "ASM"
	// Antarctica
	CountryAta Country = "ATA"
	// French Southern and Antarctic Lands
	CountryAtf Country = "ATF"
	// Antigua and Barbuda
	CountryAtg Country = "ATG"
	// Australia
	CountryAus Country = "AUS"
	// Austria
	CountryAut Country = "AUT"
	// Azerbaijan
	CountryAze Country = "AZE"
	// Burundi
	CountryBdi Country = "BDI"
	// Belgium
	CountryBel Country = "BEL"
	// Benin
	CountryBen Country = "BEN"
	// Burkina Faso
	CountryBfa Country = "BFA"
	// Bangladesh
	CountryBgd Country = "BGD"
	// Bulgaria
	CountryBgr Country = "BGR"
	// Bahrain
	CountryBhr Country = "BHR"
	// Bahamas
	CountryBhs Country = "BHS"
	// Bosnia and Herzegovina
	CountryBih Country = "BIH"
	// Saint Barthélemy
	CountryBlm Country = "BLM"
	// Saint Helena, Ascension and Tristan da Cunha
	CountryShn Country = "SHN"
	// Belarus
	CountryBlr Country = "BLR"
	// Belize
	CountryBlz Country = "BLZ"
	// Bermuda
	CountryBmu Country = "BMU"
	// Bolivia
	CountryBol Country = "BOL"
	// Caribbean Netherlands
	CountryBes Country = "BES"
	// Brazil
	CountryBra Country = "BRA"
	// Barbados
	CountryBrb Country = "BRB"
	// Brunei
	CountryBrn Country = "BRN"
	// Bhutan
	CountryBtn Country = "BTN"
	// Bouvet Island
	CountryBvt Country = "BVT"
	// Botswana
	CountryBwa Country = "BWA"
	// Central African Republic
	CountryCaf Country = "CAF"
	// Canada
	CountryCan Country = "CAN"
	// Cocos (Keeling) Islands
	CountryCck Country = "CCK"
	// Switzerland
	CountryChe Country = "CHE"
	// Chile
	CountryChl Country = "CHL"
	// China
	CountryChn Country = "CHN"
	// Ivory Coast
	CountryCiv Country = "CIV"
	// Cameroon
	CountryCmr Country = "CMR"
	// DR Congo
	CountryCod Country = "COD"
	// Republic of the Congo
	CountryCog Country = "COG"
	// Cook Islands
	CountryCok Country = "COK"
	// Colombia
	CountryCol Country = "COL"
	// Comoros
	CountryCom Country = "COM"
	// Cape Verde
	CountryCpv Country = "CPV"
	// Costa Rica
	CountryCri Country = "CRI"
	// Cuba
	CountryCub Country = "CUB"
	// Curaçao
	CountryCuw Country = "CUW"
	// Christmas Island
	CountryCxr Country = "CXR"
	// Cayman Islands
	CountryCym Country = "CYM"
	// Cyprus
	CountryCyp Country = "CYP"
	// Czechia
	CountryCze Country = "CZE"
	// Germany
	CountryDeu Country = "DEU"
	// Djibouti
	CountryDji Country = "DJI"
	// Dominica
	CountryDma Country = "DMA"
	// Denmark
	CountryDnk Country = "DNK"
	// Dominican Republic
	CountryDom Country = "DOM"
	// Algeria
	CountryDza Country = "DZA"
	// Ecuador
	CountryEcu Country = "ECU"
	// Egypt
	CountryEgy Country = "EGY"
	// Eritrea
	CountryEri Country = "ERI"
	// Western Sahara
	CountryEsh Country = "ESH"
	// Spain
	CountryEsp Country = "ESP"
	// Estonia
	CountryEst Country = "EST"
	// Ethiopia
	CountryEth Country = "ETH"
	// Finland
	CountryFin Country = "FIN"
	// Fiji
	CountryFji Country = "FJI"
	// Falkland Islands
	CountryFlk Country = "FLK"
	// France
	CountryFra Country = "FRA"
	// Faroe Islands
	CountryFro Country = "FRO"
	// Micronesia
	CountryFsm Country = "FSM"
	// Gabon
	CountryGab Country = "GAB"
	// United Kingdom
	CountryGbr Country = "GBR"
	// Georgia
	CountryGeo Country = "GEO"
	// Guernsey
	CountryGgy Country = "GGY"
	// Ghana
	CountryGha Country = "GHA"
	// Gibraltar
	CountryGib Country = "GIB"
	// Guinea
	CountryGin Country = "GIN"
	// Guadeloupe
	CountryGlp Country = "GLP"
	// Gambia
	CountryGmb Country = "GMB"
	// Guinea-Bissau
	CountryGnb Country = "GNB"
	// Equatorial Guinea
	CountryGnq Country = "GNQ"
	// Greece
	CountryGrc Country = "GRC"
	// Grenada
	CountryGrd Country = "GRD"
	// Greenland
	CountryGrl Country = "GRL"
	// Guatemala
	CountryGtm Country = "GTM"
	// French Guiana
	CountryGuf Country = "GUF"
	// Guam
	CountryGum Country = "GUM"
	// Guyana
	CountryGuy Country = "GUY"
	// Hong Kong
	CountryHkg Country = "HKG"
	// Heard Island and McDonald Islands
	CountryHmd Country = "HMD"
	// Honduras
	CountryHnd Country = "HND"
	// Croatia
	CountryHrv Country = "HRV"
	// Haiti
	CountryHti Country = "HTI"
	// Hungary
	CountryHun Country = "HUN"
	// Indonesia
	CountryIdn Country = "IDN"
	// Isle of Man
	CountryImn Country = "IMN"
	// India
	CountryInd Country = "IND"
	// British Indian Ocean Territory
	CountryIot Country = "IOT"
	// Ireland
	CountryIrl Country = "IRL"
	// Iran
	CountryIrn Country = "IRN"
	// Iraq
	CountryIrq Country = "IRQ"
	// Iceland
	CountryIsl Country = "ISL"
	// Israel
	CountryIsr Country = "ISR"
	// Italy
	CountryIta Country = "ITA"
	// Jamaica
	CountryJam Country = "JAM"
	// Jersey
	CountryJey Country = "JEY"
	// Jordan
	CountryJor Country = "JOR"
	// Japan
	CountryJpn Country = "JPN"
	// Kazakhstan
	CountryKaz Country = "KAZ"
	// Kenya
	CountryKen Country = "KEN"
	// Kyrgyzstan
	CountryKgz Country = "KGZ"
	// Cambodia
	CountryKhm Country = "KHM"
	// Kiribati
	CountryKir Country = "KIR"
	// Saint Kitts and Nevis
	CountryKna Country = "KNA"
	// South Korea
	CountryKor Country = "KOR"
	// Kosovo
	CountryUnk Country = "UNK"
	// Kuwait
	CountryKwt Country = "KWT"
	// Laos
	CountryLao Country = "LAO"
	// Lebanon
	CountryLbn Country = "LBN"
	// Liberia
	CountryLbr Country = "LBR"
	// Libya
	CountryLby Country = "LBY"
	// Saint Lucia
	CountryLca Country = "LCA"
	// Liechtenstein
	CountryLie Country = "LIE"
	// Sri Lanka
	CountryLka Country = "LKA"
	// Lesotho
	CountryLso Country = "LSO"
	// Lithuania
	CountryLtu Country = "LTU"
	// Luxembourg
	CountryLux Country = "LUX"
	// Latvia
	CountryLva Country = "LVA"
	// Macau
	CountryMac Country = "MAC"
	// Saint Martin
	CountryMaf Country = "MAF"
	// Morocco
	CountryMar Country = "MAR"
	// Monaco
	CountryMco Country = "MCO"
	// Moldova
	CountryMda Country = "MDA"
	// Madagascar
	CountryMdg Country = "MDG"
	// Maldives
	CountryMdv Country = "MDV"
	// Mexico
	CountryMex Country = "MEX"
	// Marshall Islands
	CountryMhl Country = "MHL"
	// Macedonia
	CountryMkd Country = "MKD"
	// Mali
	CountryMli Country = "MLI"
	// Malta
	CountryMlt Country = "MLT"
	// Myanmar
	CountryMmr Country = "MMR"
	// Montenegro
	CountryMne Country = "MNE"
	// Mongolia
	CountryMng Country = "MNG"
	// Northern Mariana Islands
	CountryMnp Country = "MNP"
	// Mozambique
	CountryMoz Country = "MOZ"
	// Mauritania
	CountryMrt Country = "MRT"
	// Montserrat
	CountryMsr Country = "MSR"
	// Martinique
	CountryMtq Country = "MTQ"
	// Mauritius
	CountryMus Country = "MUS"
	// Malawi
	CountryMwi Country = "MWI"
	// Malaysia
	CountryMys Country = "MYS"
	// Mayotte
	CountryMyt Country = "MYT"
	// Namibia
	CountryNam Country = "NAM"
	// New Caledonia
	CountryNcl Country = "NCL"
	// Niger
	CountryNer Country = "NER"
	// Norfolk Island
	CountryNfk Country = "NFK"
	// Nigeria
	CountryNga Country = "NGA"
	// Nicaragua
	CountryNic Country = "NIC"
	// Niue
	CountryNiu Country = "NIU"
	// Netherlands
	CountryNld Country = "NLD"
	// Norway
	CountryNor Country = "NOR"
	// Nepal
	CountryNpl Country = "NPL"
	// Nauru
	CountryNru Country = "NRU"
	// New Zealand
	CountryNzl Country = "NZL"
	// Oman
	CountryOmn Country = "OMN"
	// Pakistan
	CountryPak Country = "PAK"
	// Panama
	CountryPan Country = "PAN"
	// Pitcairn Islands
	CountryPcn Country = "PCN"
	// Peru
	CountryPer Country = "PER"
	// Philippines
	CountryPhl Country = "PHL"
	// Palau
	CountryPlw Country = "PLW"
	// Papua New Guinea
	CountryPng Country = "PNG"
	// Poland
	CountryPol Country = "POL"
	// Puerto Rico
	CountryPri Country = "PRI"
	// North Korea
	CountryPrk Country = "PRK"
	// Portugal
	CountryPrt Country = "PRT"
	// Paraguay
	CountryPry Country = "PRY"
	// Palestine
	CountryPse Country = "PSE"
	// French Polynesia
	CountryPyf Country = "PYF"
	// Qatar
	CountryQat Country = "QAT"
	// Réunion
	CountryReu Country = "REU"
	// Romania
	CountryRou Country = "ROU"
	// Russia
	CountryRus Country = "RUS"
	// Rwanda
	CountryRwa Country = "RWA"
	// Saudi Arabia
	CountrySau Country = "SAU"
	// Sudan
	CountrySdn Country = "SDN"
	// Senegal
	CountrySen Country = "SEN"
	// Singapore
	CountrySgp Country = "SGP"
	// South Georgia
	CountrySgs Country = "SGS"
	// Svalbard and Jan Mayen
	CountrySjm Country = "SJM"
	// Solomon Islands
	CountrySlb Country = "SLB"
	// Sierra Leone
	CountrySle Country = "SLE"
	// El Salvador
	CountrySlv Country = "SLV"
	// San Marino
	CountrySmr Country = "SMR"
	// Somalia
	CountrySom Country = "SOM"
	// Saint Pierre and Miquelon
	CountrySpm Country = "SPM"
	// Serbia
	CountrySrb Country = "SRB"
	// South Sudan
	CountrySsd Country = "SSD"
	// São Tomé and Príncipe
	CountryStp Country = "STP"
	// Suriname
	CountrySur Country = "SUR"
	// Slovakia
	CountrySvk Country = "SVK"
	// Slovenia
	CountrySvn Country = "SVN"
	// Sweden
	CountrySwe Country = "SWE"
	// Eswatini
	CountrySwz Country = "SWZ"
	// Sint Maarten
	CountrySxm Country = "SXM"
	// Seychelles
	CountrySyc Country = "SYC"
	// Syria
	CountrySyr Country = "SYR"
	// Turks and Caicos Islands
	CountryTca Country = "TCA"
	// Chad
	CountryTcd Country = "TCD"
	// Togo
	CountryTgo Country = "TGO"
	// Thailand
	CountryTha Country = "THA"
	// Tajikistan
	CountryTjk Country = "TJK"
	// Tokelau
	CountryTkl Country = "TKL"
	// Turkmenistan
	CountryTkm Country = "TKM"
	// Timor-Leste
	CountryTls Country = "TLS"
	// Tonga
	CountryTon Country = "TON"
	// Trinidad and Tobago
	CountryTto Country = "TTO"
	// Tunisia
	CountryTun Country = "TUN"
	// Turkey
	CountryTur Country = "TUR"
	// Tuvalu
	CountryTuv Country = "TUV"
	// Taiwan
	CountryTwn Country = "TWN"
	// Tanzania
	CountryTza Country = "TZA"
	// Uganda
	CountryUga Country = "UGA"
	// Ukraine
	CountryUkr Country = "UKR"
	// United States Minor Outlying Islands
	CountryUmi Country = "UMI"
	// Uruguay
	CountryUry Country = "URY"
	// United States
	CountryUsa Country = "USA"
	// Uzbekistan
	CountryUzb Country = "UZB"
	// Vatican City
	CountryVat Country = "VAT"
	// Saint Vincent and the Grenadines
	CountryVct Country = "VCT"
	// Venezuela
	CountryVen Country = "VEN"
	// British Virgin Islands
	CountryVgb Country = "VGB"
	// United States Virgin Islands
	CountryVir Country = "VIR"
	// Vietnam
	CountryVnm Country = "VNM"
	// Vanuatu
	CountryVut Country = "VUT"
	// Wallis and Futuna
	CountryWlf Country = "WLF"
	// Samoa
	CountryWsm Country = "WSM"
	// Yemen
	CountryYem Country = "YEM"
	// South Africa
	CountryZaf Country = "ZAF"
	// Zambia
	CountryZmb Country = "ZMB"
	// Zimbabwe
	CountryZwe Country = "ZWE"
	// International
	CountryXxx Country = "XXX"
	// Kosovo
	CountryRks Country = "RKS"
)

func NewCountryFromString(s string) (Country, error) {
	switch s {
	case "ABW":
		return CountryAbw, nil
	case "AFG":
		return CountryAfg, nil
	case "AGO":
		return CountryAgo, nil
	case "AIA":
		return CountryAia, nil
	case "ALA":
		return CountryAla, nil
	case "ALB":
		return CountryAlb, nil
	case "AND":
		return CountryAnd, nil
	case "ARE":
		return CountryAre, nil
	case "ARG":
		return CountryArg, nil
	case "ARM":
		return CountryArm, nil
	case "ASM":
		return CountryAsm, nil
	case "ATA":
		return CountryAta, nil
	case "ATF":
		return CountryAtf, nil
	case "ATG":
		return CountryAtg, nil
	case "AUS":
		return CountryAus, nil
	case "AUT":
		return CountryAut, nil
	case "AZE":
		return CountryAze, nil
	case "BDI":
		return CountryBdi, nil
	case "BEL":
		return CountryBel, nil
	case "BEN":
		return CountryBen, nil
	case "BFA":
		return CountryBfa, nil
	case "BGD":
		return CountryBgd, nil
	case "BGR":
		return CountryBgr, nil
	case "BHR":
		return CountryBhr, nil
	case "BHS":
		return CountryBhs, nil
	case "BIH":
		return CountryBih, nil
	case "BLM":
		return CountryBlm, nil
	case "SHN":
		return CountryShn, nil
	case "BLR":
		return CountryBlr, nil
	case "BLZ":
		return CountryBlz, nil
	case "BMU":
		return CountryBmu, nil
	case "BOL":
		return CountryBol, nil
	case "BES":
		return CountryBes, nil
	case "BRA":
		return CountryBra, nil
	case "BRB":
		return CountryBrb, nil
	case "BRN":
		return CountryBrn, nil
	case "BTN":
		return CountryBtn, nil
	case "BVT":
		return CountryBvt, nil
	case "BWA":
		return CountryBwa, nil
	case "CAF":
		return CountryCaf, nil
	case "CAN":
		return CountryCan, nil
	case "CCK":
		return CountryCck, nil
	case "CHE":
		return CountryChe, nil
	case "CHL":
		return CountryChl, nil
	case "CHN":
		return CountryChn, nil
	case "CIV":
		return CountryCiv, nil
	case "CMR":
		return CountryCmr, nil
	case "COD":
		return CountryCod, nil
	case "COG":
		return CountryCog, nil
	case "COK":
		return CountryCok, nil
	case "COL":
		return CountryCol, nil
	case "COM":
		return CountryCom, nil
	case "CPV":
		return CountryCpv, nil
	case "CRI":
		return CountryCri, nil
	case "CUB":
		return CountryCub, nil
	case "CUW":
		return CountryCuw, nil
	case "CXR":
		return CountryCxr, nil
	case "CYM":
		return CountryCym, nil
	case "CYP":
		return CountryCyp, nil
	case "CZE":
		return CountryCze, nil
	case "DEU":
		return CountryDeu, nil
	case "DJI":
		return CountryDji, nil
	case "DMA":
		return CountryDma, nil
	case "DNK":
		return CountryDnk, nil
	case "DOM":
		return CountryDom, nil
	case "DZA":
		return CountryDza, nil
	case "ECU":
		return CountryEcu, nil
	case "EGY":
		return CountryEgy, nil
	case "ERI":
		return CountryEri, nil
	case "ESH":
		return CountryEsh, nil
	case "ESP":
		return CountryEsp, nil
	case "EST":
		return CountryEst, nil
	case "ETH":
		return CountryEth, nil
	case "FIN":
		return CountryFin, nil
	case "FJI":
		return CountryFji, nil
	case "FLK":
		return CountryFlk, nil
	case "FRA":
		return CountryFra, nil
	case "FRO":
		return CountryFro, nil
	case "FSM":
		return CountryFsm, nil
	case "GAB":
		return CountryGab, nil
	case "GBR":
		return CountryGbr, nil
	case "GEO":
		return CountryGeo, nil
	case "GGY":
		return CountryGgy, nil
	case "GHA":
		return CountryGha, nil
	case "GIB":
		return CountryGib, nil
	case "GIN":
		return CountryGin, nil
	case "GLP":
		return CountryGlp, nil
	case "GMB":
		return CountryGmb, nil
	case "GNB":
		return CountryGnb, nil
	case "GNQ":
		return CountryGnq, nil
	case "GRC":
		return CountryGrc, nil
	case "GRD":
		return CountryGrd, nil
	case "GRL":
		return CountryGrl, nil
	case "GTM":
		return CountryGtm, nil
	case "GUF":
		return CountryGuf, nil
	case "GUM":
		return CountryGum, nil
	case "GUY":
		return CountryGuy, nil
	case "HKG":
		return CountryHkg, nil
	case "HMD":
		return CountryHmd, nil
	case "HND":
		return CountryHnd, nil
	case "HRV":
		return CountryHrv, nil
	case "HTI":
		return CountryHti, nil
	case "HUN":
		return CountryHun, nil
	case "IDN":
		return CountryIdn, nil
	case "IMN":
		return CountryImn, nil
	case "IND":
		return CountryInd, nil
	case "IOT":
		return CountryIot, nil
	case "IRL":
		return CountryIrl, nil
	case "IRN":
		return CountryIrn, nil
	case "IRQ":
		return CountryIrq, nil
	case "ISL":
		return CountryIsl, nil
	case "ISR":
		return CountryIsr, nil
	case "ITA":
		return CountryIta, nil
	case "JAM":
		return CountryJam, nil
	case "JEY":
		return CountryJey, nil
	case "JOR":
		return CountryJor, nil
	case "JPN":
		return CountryJpn, nil
	case "KAZ":
		return CountryKaz, nil
	case "KEN":
		return CountryKen, nil
	case "KGZ":
		return CountryKgz, nil
	case "KHM":
		return CountryKhm, nil
	case "KIR":
		return CountryKir, nil
	case "KNA":
		return CountryKna, nil
	case "KOR":
		return CountryKor, nil
	case "UNK":
		return CountryUnk, nil
	case "KWT":
		return CountryKwt, nil
	case "LAO":
		return CountryLao, nil
	case "LBN":
		return CountryLbn, nil
	case "LBR":
		return CountryLbr, nil
	case "LBY":
		return CountryLby, nil
	case "LCA":
		return CountryLca, nil
	case "LIE":
		return CountryLie, nil
	case "LKA":
		return CountryLka, nil
	case "LSO":
		return CountryLso, nil
	case "LTU":
		return CountryLtu, nil
	case "LUX":
		return CountryLux, nil
	case "LVA":
		return CountryLva, nil
	case "MAC":
		return CountryMac, nil
	case "MAF":
		return CountryMaf, nil
	case "MAR":
		return CountryMar, nil
	case "MCO":
		return CountryMco, nil
	case "MDA":
		return CountryMda, nil
	case "MDG":
		return CountryMdg, nil
	case "MDV":
		return CountryMdv, nil
	case "MEX":
		return CountryMex, nil
	case "MHL":
		return CountryMhl, nil
	case "MKD":
		return CountryMkd, nil
	case "MLI":
		return CountryMli, nil
	case "MLT":
		return CountryMlt, nil
	case "MMR":
		return CountryMmr, nil
	case "MNE":
		return CountryMne, nil
	case "MNG":
		return CountryMng, nil
	case "MNP":
		return CountryMnp, nil
	case "MOZ":
		return CountryMoz, nil
	case "MRT":
		return CountryMrt, nil
	case "MSR":
		return CountryMsr, nil
	case "MTQ":
		return CountryMtq, nil
	case "MUS":
		return CountryMus, nil
	case "MWI":
		return CountryMwi, nil
	case "MYS":
		return CountryMys, nil
	case "MYT":
		return CountryMyt, nil
	case "NAM":
		return CountryNam, nil
	case "NCL":
		return CountryNcl, nil
	case "NER":
		return CountryNer, nil
	case "NFK":
		return CountryNfk, nil
	case "NGA":
		return CountryNga, nil
	case "NIC":
		return CountryNic, nil
	case "NIU":
		return CountryNiu, nil
	case "NLD":
		return CountryNld, nil
	case "NOR":
		return CountryNor, nil
	case "NPL":
		return CountryNpl, nil
	case "NRU":
		return CountryNru, nil
	case "NZL":
		return CountryNzl, nil
	case "OMN":
		return CountryOmn, nil
	case "PAK":
		return CountryPak, nil
	case "PAN":
		return CountryPan, nil
	case "PCN":
		return CountryPcn, nil
	case "PER":
		return CountryPer, nil
	case "PHL":
		return CountryPhl, nil
	case "PLW":
		return CountryPlw, nil
	case "PNG":
		return CountryPng, nil
	case "POL":
		return CountryPol, nil
	case "PRI":
		return CountryPri, nil
	case "PRK":
		return CountryPrk, nil
	case "PRT":
		return CountryPrt, nil
	case "PRY":
		return CountryPry, nil
	case "PSE":
		return CountryPse, nil
	case "PYF":
		return CountryPyf, nil
	case "QAT":
		return CountryQat, nil
	case "REU":
		return CountryReu, nil
	case "ROU":
		return CountryRou, nil
	case "RUS":
		return CountryRus, nil
	case "RWA":
		return CountryRwa, nil
	case "SAU":
		return CountrySau, nil
	case "SDN":
		return CountrySdn, nil
	case "SEN":
		return CountrySen, nil
	case "SGP":
		return CountrySgp, nil
	case "SGS":
		return CountrySgs, nil
	case "SJM":
		return CountrySjm, nil
	case "SLB":
		return CountrySlb, nil
	case "SLE":
		return CountrySle, nil
	case "SLV":
		return CountrySlv, nil
	case "SMR":
		return CountrySmr, nil
	case "SOM":
		return CountrySom, nil
	case "SPM":
		return CountrySpm, nil
	case "SRB":
		return CountrySrb, nil
	case "SSD":
		return CountrySsd, nil
	case "STP":
		return CountryStp, nil
	case "SUR":
		return CountrySur, nil
	case "SVK":
		return CountrySvk, nil
	case "SVN":
		return CountrySvn, nil
	case "SWE":
		return CountrySwe, nil
	case "SWZ":
		return CountrySwz, nil
	case "SXM":
		return CountrySxm, nil
	case "SYC":
		return CountrySyc, nil
	case "SYR":
		return CountrySyr, nil
	case "TCA":
		return CountryTca, nil
	case "TCD":
		return CountryTcd, nil
	case "TGO":
		return CountryTgo, nil
	case "THA":
		return CountryTha, nil
	case "TJK":
		return CountryTjk, nil
	case "TKL":
		return CountryTkl, nil
	case "TKM":
		return CountryTkm, nil
	case "TLS":
		return CountryTls, nil
	case "TON":
		return CountryTon, nil
	case "TTO":
		return CountryTto, nil
	case "TUN":
		return CountryTun, nil
	case "TUR":
		return CountryTur, nil
	case "TUV":
		return CountryTuv, nil
	case "TWN":
		return CountryTwn, nil
	case "TZA":
		return CountryTza, nil
	case "UGA":
		return CountryUga, nil
	case "UKR":
		return CountryUkr, nil
	case "UMI":
		return CountryUmi, nil
	case "URY":
		return CountryUry, nil
	case "USA":
		return CountryUsa, nil
	case "UZB":
		return CountryUzb, nil
	case "VAT":
		return CountryVat, nil
	case "VCT":
		return CountryVct, nil
	case "VEN":
		return CountryVen, nil
	case "VGB":
		return CountryVgb, nil
	case "VIR":
		return CountryVir, nil
	case "VNM":
		return CountryVnm, nil
	case "VUT":
		return CountryVut, nil
	case "WLF":
		return CountryWlf, nil
	case "WSM":
		return CountryWsm, nil
	case "YEM":
		return CountryYem, nil
	case "ZAF":
		return CountryZaf, nil
	case "ZMB":
		return CountryZmb, nil
	case "ZWE":
		return CountryZwe, nil
	case "XXX":
		return CountryXxx, nil
	case "RKS":
		return CountryRks, nil
	}
	var t Country
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c Country) Ptr() *Country {
	return &c
}

// Country context enums describe different ways an entity can be connected to a country.
type CountryContext string

const (
	// The reported citizenship of a person
	CountryContextCitizenship CountryContext = "citizenship"
	// Rarely used. Converted to 'domicile.'
	CountryContextIncorporation CountryContext = "incorporation"
	// The reported country of residence of a person
	CountryContextResidence CountryContext = "residence"
	// The reported nationality of a person
	CountryContextNationality CountryContext = "nationality"
	// The country of an entity address
	CountryContextAddress CountryContext = "address"
	// The flag state of a vessel. Often changes over time.
	CountryContextVesselFlag CountryContext = "vessel_flag"
	// e.g. 'Country of incorporation,' 'Jurisdiction of formation,' 'Organized under the laws of.' A company can operate in multiple countries, but can only have one domicile at a time.
	CountryContextDomicile CountryContext = "domicile"
	// The country a shipment starts in
	CountryContextShipmentDeparture CountryContext = "shipment_departure"
	// The country of the consignee/recipient of a shipment
	CountryContextShipmentArrival CountryContext = "shipment_arrival"
	// Any country a shipment moves through between its departure and arrival
	CountryContextShipmentTransit CountryContext = "shipment_transit"
	// Indicates entity is principal entity in record in source from this country
	CountryContextActivityIn CountryContext = "activity_in"
	// Indicates entity is mentioned in record in source from this country
	CountryContextMentionedIn CountryContext = "mentioned_in"
)

func NewCountryContextFromString(s string) (CountryContext, error) {
	switch s {
	case "citizenship":
		return CountryContextCitizenship, nil
	case "incorporation":
		return CountryContextIncorporation, nil
	case "residence":
		return CountryContextResidence, nil
	case "nationality":
		return CountryContextNationality, nil
	case "address":
		return CountryContextAddress, nil
	case "vessel_flag":
		return CountryContextVesselFlag, nil
	case "domicile":
		return CountryContextDomicile, nil
	case "shipment_departure":
		return CountryContextShipmentDeparture, nil
	case "shipment_arrival":
		return CountryContextShipmentArrival, nil
	case "shipment_transit":
		return CountryContextShipmentTransit, nil
	case "activity_in":
		return CountryContextActivityIn, nil
	case "mentioned_in":
		return CountryContextMentionedIn, nil
	}
	var t CountryContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountryContext) Ptr() *CountryContext {
	return &c
}

type CountryData struct {
	Record      []string           `json:"record,omitempty"`
	RecordCount int                `json:"record_count"`
	Properties  *CountryProperties `json:"properties,omitempty"`
}

// An affiliation of an entity with a given country through residence, nationality, etc.
type CountryInfo struct {
	Limit int            `json:"limit"`
	Size  *SizeInfo      `json:"size,omitempty"`
	Data  []*CountryData `json:"data,omitempty"`
}

type CountryProperties struct {
	Context *CountryContext `json:"context,omitempty"`
	State   *string         `json:"state,omitempty"`
	Value   Country         `json:"value,omitempty"`
}

// Currency enums are normalized representations of currencies
type Currency string

const (
	// Afghani/971/2
	CurrencyAfn Currency = "AFN"
	// Euro/978/2
	CurrencyEur Currency = "EUR"
	// Lek/008/2
	CurrencyAll Currency = "ALL"
	// Algerian Dinar/012/2
	CurrencyDzd Currency = "DZD"
	// US Dollar/840/2
	CurrencyUsd Currency = "USD"
	// Kwanza/973/2
	CurrencyAoa Currency = "AOA"
	// East Caribbean Dollar/951/2
	CurrencyXcd Currency = "XCD"
	// Argentine Peso/032/2
	CurrencyArs Currency = "ARS"
	// Armenian Dram/051/2
	CurrencyAmd Currency = "AMD"
	// Aruban Florin/533/2
	CurrencyAwg Currency = "AWG"
	// Australian Dollar/036/2
	CurrencyAud Currency = "AUD"
	// Azerbaijan Manat/944/2
	CurrencyAzn Currency = "AZN"
	// Bahamian Dollar/044/2
	CurrencyBsd Currency = "BSD"
	// Bahraini Dinar/048/3
	CurrencyBhd Currency = "BHD"
	// Taka/050/2
	CurrencyBdt Currency = "BDT"
	// Barbados Dollar/052/2
	CurrencyBbd Currency = "BBD"
	// Belarusian Ruble/933/2
	CurrencyByn Currency = "BYN"
	// Belize Dollar/084/2
	CurrencyBzd Currency = "BZD"
	// CFA Franc BCEAO/952/0
	CurrencyXof Currency = "XOF"
	// Bermudian Dollar/060/2
	CurrencyBmd Currency = "BMD"
	// Indian Rupee/356/2
	CurrencyInr Currency = "INR"
	// Ngultrum/064/2
	CurrencyBtn Currency = "BTN"
	// Boliviano/068/2
	CurrencyBob Currency = "BOB"
	// Mvdol/984/2
	CurrencyBov Currency = "BOV"
	// Convertible Mark/977/2
	CurrencyBam Currency = "BAM"
	// Pula/072/2
	CurrencyBwp Currency = "BWP"
	// Norwegian Krone/578/2
	CurrencyNok Currency = "NOK"
	// Brazilian Real/986/2
	CurrencyBrl Currency = "BRL"
	// Brunei Dollar/096/2
	CurrencyBnd Currency = "BND"
	// Bulgarian Lev/975/2
	CurrencyBgn Currency = "BGN"
	// Burundi Franc/108/0
	CurrencyBif Currency = "BIF"
	// Cabo Verde Escudo/132/2
	CurrencyCve Currency = "CVE"
	// Riel/116/2
	CurrencyKhr Currency = "KHR"
	// CFA Franc BEAC/950/0
	CurrencyXaf Currency = "XAF"
	// Canadian Dollar/124/2
	CurrencyCad Currency = "CAD"
	// Cayman Islands Dollar/136/2
	CurrencyKyd Currency = "KYD"
	// Chilean Peso/152/0
	CurrencyClp Currency = "CLP"
	// Unidad de Fomento/990/4
	CurrencyClf Currency = "CLF"
	// Yuan Renminbi/156/2
	CurrencyCny Currency = "CNY"
	// Colombian Peso/170/2
	CurrencyCop Currency = "COP"
	// Unidad de Valor Real/970/2
	CurrencyCou Currency = "COU"
	// Comorian Franc /174/0
	CurrencyKmf Currency = "KMF"
	// Congolese Franc/976/2
	CurrencyCdf Currency = "CDF"
	// New Zealand Dollar/554/2
	CurrencyNzd Currency = "NZD"
	// Costa Rican Colon/188/2
	CurrencyCrc Currency = "CRC"
	// Kuna/191/2
	CurrencyHrk Currency = "HRK"
	// Cuban Peso/192/2
	CurrencyCup Currency = "CUP"
	// Peso Convertible/931/2
	CurrencyCuc Currency = "CUC"
	// Netherlands Antillean Guilder/532/2
	CurrencyAng Currency = "ANG"
	// Czech Koruna/203/2
	CurrencyCzk Currency = "CZK"
	// Danish Krone/208/2
	CurrencyDkk Currency = "DKK"
	// Djibouti Franc/262/0
	CurrencyDjf Currency = "DJF"
	// Dominican Peso/214/2
	CurrencyDop Currency = "DOP"
	// Egyptian Pound/818/2
	CurrencyEgp Currency = "EGP"
	// El Salvador Colon/222/2
	CurrencySvc Currency = "SVC"
	// Nakfa/232/2
	CurrencyErn Currency = "ERN"
	// Ethiopian Birr/230/2
	CurrencyEtb Currency = "ETB"
	// Falkland Islands Pound/238/2
	CurrencyFkp Currency = "FKP"
	// Fiji Dollar/242/2
	CurrencyFjd Currency = "FJD"
	// CFP Franc/953/0
	CurrencyXpf Currency = "XPF"
	// Dalasi/270/2
	CurrencyGmd Currency = "GMD"
	// Lari/981/2
	CurrencyGel Currency = "GEL"
	// Ghana Cedi/936/2
	CurrencyGhs Currency = "GHS"
	// Gibraltar Pound/292/2
	CurrencyGip Currency = "GIP"
	// Quetzal/320/2
	CurrencyGtq Currency = "GTQ"
	// Pound Sterling/826/2
	CurrencyGbp Currency = "GBP"
	// Guinean Franc/324/0
	CurrencyGnf Currency = "GNF"
	// Guyana Dollar/328/2
	CurrencyGyd Currency = "GYD"
	// Gourde/332/2
	CurrencyHtg Currency = "HTG"
	// Lempira/340/2
	CurrencyHnl Currency = "HNL"
	// Hong Kong Dollar/344/2
	CurrencyHkd Currency = "HKD"
	// Forint/348/2
	CurrencyHuf Currency = "HUF"
	// Iceland Krona/352/0
	CurrencyIsk Currency = "ISK"
	// Rupiah/360/2
	CurrencyIdr Currency = "IDR"
	// SDR (Special Drawing Right)/960/N.A.
	CurrencyXdr Currency = "XDR"
	// Iranian Rial/364/2
	CurrencyIrr Currency = "IRR"
	// Iraqi Dinar/368/3
	CurrencyIqd Currency = "IQD"
	// New Israeli Sheqel/376/2
	CurrencyIls Currency = "ILS"
	// Jamaican Dollar/388/2
	CurrencyJmd Currency = "JMD"
	// Yen/392/0
	CurrencyJpy Currency = "JPY"
	// Jordanian Dinar/400/3
	CurrencyJod Currency = "JOD"
	// Tenge/398/2
	CurrencyKzt Currency = "KZT"
	// Kenyan Shilling/404/2
	CurrencyKes Currency = "KES"
	// North Korean Won/408/2
	CurrencyKpw Currency = "KPW"
	// Won/410/0
	CurrencyKrw Currency = "KRW"
	// Kuwaiti Dinar/414/3
	CurrencyKwd Currency = "KWD"
	// Som/417/2
	CurrencyKgs Currency = "KGS"
	// Lao Kip/418/2
	CurrencyLak Currency = "LAK"
	// Lebanese Pound/422/2
	CurrencyLbp Currency = "LBP"
	// Loti/426/2
	CurrencyLsl Currency = "LSL"
	// Rand/710/2
	CurrencyZar Currency = "ZAR"
	// Liberian Dollar/430/2
	CurrencyLrd Currency = "LRD"
	// Libyan Dinar/434/3
	CurrencyLyd Currency = "LYD"
	// Swiss Franc/756/2
	CurrencyChf Currency = "CHF"
	// Pataca/446/2
	CurrencyMop Currency = "MOP"
	// Denar/807/2
	CurrencyMkd Currency = "MKD"
	// Malagasy Ariary/969/2
	CurrencyMga Currency = "MGA"
	// Malawi Kwacha/454/2
	CurrencyMwk Currency = "MWK"
	// Malaysian Ringgit/458/2
	CurrencyMyr Currency = "MYR"
	// Rufiyaa/462/2
	CurrencyMvr Currency = "MVR"
	// Ouguiya/929/2
	CurrencyMru Currency = "MRU"
	// Mauritius Rupee/480/2
	CurrencyMur Currency = "MUR"
	// ADB Unit of Account/965/N.A.
	CurrencyXua Currency = "XUA"
	// Mexican Peso/484/2
	CurrencyMxn Currency = "MXN"
	// Mexican Unidad de Inversion (UDI)/979/2
	CurrencyMxv Currency = "MXV"
	// Moldovan Leu/498/2
	CurrencyMdl Currency = "MDL"
	// Tugrik/496/2
	CurrencyMnt Currency = "MNT"
	// Moroccan Dirham/504/2
	CurrencyMad Currency = "MAD"
	// Mozambique Metical/943/2
	CurrencyMzn Currency = "MZN"
	// Kyat/104/2
	CurrencyMmk Currency = "MMK"
	// Namibia Dollar/516/2
	CurrencyNad Currency = "NAD"
	// Nepalese Rupee/524/2
	CurrencyNpr Currency = "NPR"
	// Cordoba Oro/558/2
	CurrencyNio Currency = "NIO"
	// Naira/566/2
	CurrencyNgn Currency = "NGN"
	// Rial Omani/512/3
	CurrencyOmr Currency = "OMR"
	// Pakistan Rupee/586/2
	CurrencyPkr Currency = "PKR"
	// Balboa/590/2
	CurrencyPab Currency = "PAB"
	// Kina/598/2
	CurrencyPgk Currency = "PGK"
	// Guarani/600/0
	CurrencyPyg Currency = "PYG"
	// Sol/604/2
	CurrencyPen Currency = "PEN"
	// Philippine Peso/608/2
	CurrencyPhp Currency = "PHP"
	// Zloty/985/2
	CurrencyPln Currency = "PLN"
	// Qatari Rial/634/2
	CurrencyQar Currency = "QAR"
	// Romanian Leu/946/2
	CurrencyRon Currency = "RON"
	// Russian Ruble/643/2
	CurrencyRub Currency = "RUB"
	// Rwanda Franc/646/0
	CurrencyRwf Currency = "RWF"
	// Saint Helena Pound/654/2
	CurrencyShp Currency = "SHP"
	// Tala/882/2
	CurrencyWst Currency = "WST"
	// Dobra/930/2
	CurrencyStn Currency = "STN"
	// Saudi Riyal/682/2
	CurrencySar Currency = "SAR"
	// Serbian Dinar/941/2
	CurrencyRsd Currency = "RSD"
	// Seychelles Rupee/690/2
	CurrencyScr Currency = "SCR"
	// Leone/694/2
	CurrencySll Currency = "SLL"
	// Singapore Dollar/702/2
	CurrencySgd Currency = "SGD"
	// Sucre/994/N.A.
	CurrencyXsu Currency = "XSU"
	// Solomon Islands Dollar/090/2
	CurrencySbd Currency = "SBD"
	// Somali Shilling/706/2
	CurrencySos Currency = "SOS"
	// South Sudanese Pound/728/2
	CurrencySsp Currency = "SSP"
	// Sri Lanka Rupee/144/2
	CurrencyLkr Currency = "LKR"
	// Sudanese Pound/938/2
	CurrencySdg Currency = "SDG"
	// Surinam Dollar/968/2
	CurrencySrd Currency = "SRD"
	// Lilangeni/748/2
	CurrencySzl Currency = "SZL"
	// Swedish Krona/752/2
	CurrencySek Currency = "SEK"
	// WIR Euro/947/2
	CurrencyChe Currency = "CHE"
	// WIR Franc/948/2
	CurrencyChw Currency = "CHW"
	// Syrian Pound/760/2
	CurrencySyp Currency = "SYP"
	// New Taiwan Dollar/901/2
	CurrencyTwd Currency = "TWD"
	// Somoni/972/2
	CurrencyTjs Currency = "TJS"
	// Tanzanian Shilling/834/2
	CurrencyTzs Currency = "TZS"
	// Baht/764/2
	CurrencyThb Currency = "THB"
	// Pa’anga/776/2
	CurrencyTop Currency = "TOP"
	// Trinidad and Tobago Dollar/780/2
	CurrencyTtd Currency = "TTD"
	// Tunisian Dinar/788/3
	CurrencyTnd Currency = "TND"
	// Turkish Lira/949/2
	CurrencyTry Currency = "TRY"
	// Turkmenistan New Manat/934/2
	CurrencyTmt Currency = "TMT"
	// Uganda Shilling/800/0
	CurrencyUgx Currency = "UGX"
	// Hryvnia/980/2
	CurrencyUah Currency = "UAH"
	// UAE Dirham/784/2
	CurrencyAed Currency = "AED"
	// US Dollar (Next day)/997/2
	CurrencyUsn Currency = "USN"
	// Peso Uruguayo/858/2
	CurrencyUyu Currency = "UYU"
	// Uruguay Peso en Unidades Indexadas (UI)/940/0
	CurrencyUyi Currency = "UYI"
	// Unidad Previsional/927/4
	CurrencyUyw Currency = "UYW"
	// Uzbekistan Sum/860/2
	CurrencyUzs Currency = "UZS"
	// Vatu/548/0
	CurrencyVuv Currency = "VUV"
	// Bolívar Soberano/928/2
	CurrencyVes Currency = "VES"
	// Dong/704/0
	CurrencyVnd Currency = "VND"
	// Yemeni Rial/886/2
	CurrencyYer Currency = "YER"
	// Zambian Kwacha/967/2
	CurrencyZmw Currency = "ZMW"
	// Zimbabwe Dollar/932/2
	CurrencyZwl Currency = "ZWL"
	// Bond Markets Unit European Composite Unit (EURCO)/955/N.A.
	CurrencyXba Currency = "XBA"
	// Bond Markets Unit European Monetary Unit (E.M.U.-6)/956/N.A.
	CurrencyXbb Currency = "XBB"
	// Bond Markets Unit European Unit of Account 9 (E.U.A.-9)/957/N.A.
	CurrencyXbc Currency = "XBC"
	// Bond Markets Unit European Unit of Account 17 (E.U.A.-17)/958/N.A.
	CurrencyXbd Currency = "XBD"
	// Codes specifically reserved for testing purposes/963/N.A.
	CurrencyXts Currency = "XTS"
	// The codes assigned for transactions where no currency is involved/999/N.A.
	CurrencyXxx Currency = "XXX"
	// Gold/959/N.A.
	CurrencyXau Currency = "XAU"
	// Palladium/964/N.A.
	CurrencyXpd Currency = "XPD"
	// Platinum/962/N.A.
	CurrencyXpt Currency = "XPT"
	// Silver/961/N.A.
	CurrencyXag Currency = "XAG"
	// Latvian Lat; See https://en.wikipedia.org/wiki/Latvian_lats
	CurrencyLvl Currency = "LVL"
	// Slovak Koruna
	CurrencySkk Currency = "SKK"
	// Italian Lira
	CurrencyItl Currency = "ITL"
	// Dutch guilder
	CurrencyNlg Currency = "NLG"
	// Belgian franc
	CurrencyBef Currency = "BEF"
	// Mauritanian Ouguiya
	CurrencyMro Currency = "MRO"
	// Ukrainian Hryvnia
	CurrencyUkh Currency = "UKH"
)

func NewCurrencyFromString(s string) (Currency, error) {
	switch s {
	case "AFN":
		return CurrencyAfn, nil
	case "EUR":
		return CurrencyEur, nil
	case "ALL":
		return CurrencyAll, nil
	case "DZD":
		return CurrencyDzd, nil
	case "USD":
		return CurrencyUsd, nil
	case "AOA":
		return CurrencyAoa, nil
	case "XCD":
		return CurrencyXcd, nil
	case "ARS":
		return CurrencyArs, nil
	case "AMD":
		return CurrencyAmd, nil
	case "AWG":
		return CurrencyAwg, nil
	case "AUD":
		return CurrencyAud, nil
	case "AZN":
		return CurrencyAzn, nil
	case "BSD":
		return CurrencyBsd, nil
	case "BHD":
		return CurrencyBhd, nil
	case "BDT":
		return CurrencyBdt, nil
	case "BBD":
		return CurrencyBbd, nil
	case "BYN":
		return CurrencyByn, nil
	case "BZD":
		return CurrencyBzd, nil
	case "XOF":
		return CurrencyXof, nil
	case "BMD":
		return CurrencyBmd, nil
	case "INR":
		return CurrencyInr, nil
	case "BTN":
		return CurrencyBtn, nil
	case "BOB":
		return CurrencyBob, nil
	case "BOV":
		return CurrencyBov, nil
	case "BAM":
		return CurrencyBam, nil
	case "BWP":
		return CurrencyBwp, nil
	case "NOK":
		return CurrencyNok, nil
	case "BRL":
		return CurrencyBrl, nil
	case "BND":
		return CurrencyBnd, nil
	case "BGN":
		return CurrencyBgn, nil
	case "BIF":
		return CurrencyBif, nil
	case "CVE":
		return CurrencyCve, nil
	case "KHR":
		return CurrencyKhr, nil
	case "XAF":
		return CurrencyXaf, nil
	case "CAD":
		return CurrencyCad, nil
	case "KYD":
		return CurrencyKyd, nil
	case "CLP":
		return CurrencyClp, nil
	case "CLF":
		return CurrencyClf, nil
	case "CNY":
		return CurrencyCny, nil
	case "COP":
		return CurrencyCop, nil
	case "COU":
		return CurrencyCou, nil
	case "KMF":
		return CurrencyKmf, nil
	case "CDF":
		return CurrencyCdf, nil
	case "NZD":
		return CurrencyNzd, nil
	case "CRC":
		return CurrencyCrc, nil
	case "HRK":
		return CurrencyHrk, nil
	case "CUP":
		return CurrencyCup, nil
	case "CUC":
		return CurrencyCuc, nil
	case "ANG":
		return CurrencyAng, nil
	case "CZK":
		return CurrencyCzk, nil
	case "DKK":
		return CurrencyDkk, nil
	case "DJF":
		return CurrencyDjf, nil
	case "DOP":
		return CurrencyDop, nil
	case "EGP":
		return CurrencyEgp, nil
	case "SVC":
		return CurrencySvc, nil
	case "ERN":
		return CurrencyErn, nil
	case "ETB":
		return CurrencyEtb, nil
	case "FKP":
		return CurrencyFkp, nil
	case "FJD":
		return CurrencyFjd, nil
	case "XPF":
		return CurrencyXpf, nil
	case "GMD":
		return CurrencyGmd, nil
	case "GEL":
		return CurrencyGel, nil
	case "GHS":
		return CurrencyGhs, nil
	case "GIP":
		return CurrencyGip, nil
	case "GTQ":
		return CurrencyGtq, nil
	case "GBP":
		return CurrencyGbp, nil
	case "GNF":
		return CurrencyGnf, nil
	case "GYD":
		return CurrencyGyd, nil
	case "HTG":
		return CurrencyHtg, nil
	case "HNL":
		return CurrencyHnl, nil
	case "HKD":
		return CurrencyHkd, nil
	case "HUF":
		return CurrencyHuf, nil
	case "ISK":
		return CurrencyIsk, nil
	case "IDR":
		return CurrencyIdr, nil
	case "XDR":
		return CurrencyXdr, nil
	case "IRR":
		return CurrencyIrr, nil
	case "IQD":
		return CurrencyIqd, nil
	case "ILS":
		return CurrencyIls, nil
	case "JMD":
		return CurrencyJmd, nil
	case "JPY":
		return CurrencyJpy, nil
	case "JOD":
		return CurrencyJod, nil
	case "KZT":
		return CurrencyKzt, nil
	case "KES":
		return CurrencyKes, nil
	case "KPW":
		return CurrencyKpw, nil
	case "KRW":
		return CurrencyKrw, nil
	case "KWD":
		return CurrencyKwd, nil
	case "KGS":
		return CurrencyKgs, nil
	case "LAK":
		return CurrencyLak, nil
	case "LBP":
		return CurrencyLbp, nil
	case "LSL":
		return CurrencyLsl, nil
	case "ZAR":
		return CurrencyZar, nil
	case "LRD":
		return CurrencyLrd, nil
	case "LYD":
		return CurrencyLyd, nil
	case "CHF":
		return CurrencyChf, nil
	case "MOP":
		return CurrencyMop, nil
	case "MKD":
		return CurrencyMkd, nil
	case "MGA":
		return CurrencyMga, nil
	case "MWK":
		return CurrencyMwk, nil
	case "MYR":
		return CurrencyMyr, nil
	case "MVR":
		return CurrencyMvr, nil
	case "MRU":
		return CurrencyMru, nil
	case "MUR":
		return CurrencyMur, nil
	case "XUA":
		return CurrencyXua, nil
	case "MXN":
		return CurrencyMxn, nil
	case "MXV":
		return CurrencyMxv, nil
	case "MDL":
		return CurrencyMdl, nil
	case "MNT":
		return CurrencyMnt, nil
	case "MAD":
		return CurrencyMad, nil
	case "MZN":
		return CurrencyMzn, nil
	case "MMK":
		return CurrencyMmk, nil
	case "NAD":
		return CurrencyNad, nil
	case "NPR":
		return CurrencyNpr, nil
	case "NIO":
		return CurrencyNio, nil
	case "NGN":
		return CurrencyNgn, nil
	case "OMR":
		return CurrencyOmr, nil
	case "PKR":
		return CurrencyPkr, nil
	case "PAB":
		return CurrencyPab, nil
	case "PGK":
		return CurrencyPgk, nil
	case "PYG":
		return CurrencyPyg, nil
	case "PEN":
		return CurrencyPen, nil
	case "PHP":
		return CurrencyPhp, nil
	case "PLN":
		return CurrencyPln, nil
	case "QAR":
		return CurrencyQar, nil
	case "RON":
		return CurrencyRon, nil
	case "RUB":
		return CurrencyRub, nil
	case "RWF":
		return CurrencyRwf, nil
	case "SHP":
		return CurrencyShp, nil
	case "WST":
		return CurrencyWst, nil
	case "STN":
		return CurrencyStn, nil
	case "SAR":
		return CurrencySar, nil
	case "RSD":
		return CurrencyRsd, nil
	case "SCR":
		return CurrencyScr, nil
	case "SLL":
		return CurrencySll, nil
	case "SGD":
		return CurrencySgd, nil
	case "XSU":
		return CurrencyXsu, nil
	case "SBD":
		return CurrencySbd, nil
	case "SOS":
		return CurrencySos, nil
	case "SSP":
		return CurrencySsp, nil
	case "LKR":
		return CurrencyLkr, nil
	case "SDG":
		return CurrencySdg, nil
	case "SRD":
		return CurrencySrd, nil
	case "SZL":
		return CurrencySzl, nil
	case "SEK":
		return CurrencySek, nil
	case "CHE":
		return CurrencyChe, nil
	case "CHW":
		return CurrencyChw, nil
	case "SYP":
		return CurrencySyp, nil
	case "TWD":
		return CurrencyTwd, nil
	case "TJS":
		return CurrencyTjs, nil
	case "TZS":
		return CurrencyTzs, nil
	case "THB":
		return CurrencyThb, nil
	case "TOP":
		return CurrencyTop, nil
	case "TTD":
		return CurrencyTtd, nil
	case "TND":
		return CurrencyTnd, nil
	case "TRY":
		return CurrencyTry, nil
	case "TMT":
		return CurrencyTmt, nil
	case "UGX":
		return CurrencyUgx, nil
	case "UAH":
		return CurrencyUah, nil
	case "AED":
		return CurrencyAed, nil
	case "USN":
		return CurrencyUsn, nil
	case "UYU":
		return CurrencyUyu, nil
	case "UYI":
		return CurrencyUyi, nil
	case "UYW":
		return CurrencyUyw, nil
	case "UZS":
		return CurrencyUzs, nil
	case "VUV":
		return CurrencyVuv, nil
	case "VES":
		return CurrencyVes, nil
	case "VND":
		return CurrencyVnd, nil
	case "YER":
		return CurrencyYer, nil
	case "ZMW":
		return CurrencyZmw, nil
	case "ZWL":
		return CurrencyZwl, nil
	case "XBA":
		return CurrencyXba, nil
	case "XBB":
		return CurrencyXbb, nil
	case "XBC":
		return CurrencyXbc, nil
	case "XBD":
		return CurrencyXbd, nil
	case "XTS":
		return CurrencyXts, nil
	case "XXX":
		return CurrencyXxx, nil
	case "XAU":
		return CurrencyXau, nil
	case "XPD":
		return CurrencyXpd, nil
	case "XPT":
		return CurrencyXpt, nil
	case "XAG":
		return CurrencyXag, nil
	case "LVL":
		return CurrencyLvl, nil
	case "SKK":
		return CurrencySkk, nil
	case "ITL":
		return CurrencyItl, nil
	case "NLG":
		return CurrencyNlg, nil
	case "BEF":
		return CurrencyBef, nil
	case "MRO":
		return CurrencyMro, nil
	case "UKH":
		return CurrencyUkh, nil
	}
	var t Currency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c Currency) Ptr() *Currency {
	return &c
}

type DateOfBirthData struct {
	Record      []string               `json:"record,omitempty"`
	RecordCount int                    `json:"record_count"`
	Properties  *DateOfBirthProperties `json:"properties,omitempty"`
}

// Birth date of a person
type DateOfBirthInfo struct {
	Limit int                `json:"limit"`
	Size  *SizeInfo          `json:"size,omitempty"`
	Data  []*DateOfBirthData `json:"data,omitempty"`
}

type DateOfBirthProperties struct {
	Value string `json:"value"`
}

// This represents which type of entity is being returned.
type Entities string

const (
	// A civil or criminal legal case or similar type of proceeding
	EntitiesLegalMatter Entities = "legal_matter"
	// A legal entity or organization
	EntitiesCompany Entities = "company"
	// A shipment between two entities
	EntitiesShipment Entities = "shipment"
	// A generic placeholder entity. Rarely used.
	EntitiesGeneric Entities = "generic"
	// A cargo ship, oil tanker, fishing trawler, or other type of watercraft
	EntitiesVessel Entities = "vessel"
	// Land, real estate, real property, or personal property not categorized under another entity type
	EntitiesProperty Entities = "property"
	// A trademark, patent, copyright, or similar type of intangible property
	EntitiesIntellectualProperty Entities = "intellectual_property"
	// A natural person (human being)
	EntitiesPerson Entities = "person"
	// A tradable financial asset
	EntitiesSecurity Entities = "security"
	// A discretely registered name used by a person or company not operating under its legal name. This includes doing-business-as names, fictitious names, etc. in jurisdictions that treat them as registered objects distinct from the person/company using them.
	EntitiesTradename Entities = "tradename"
	// An unknown placeholder entity. Rarely used.
	EntitiesUnknown Entities = "unknown"
	// An airplane, helicopter, etc.
	EntitiesAircraft Entities = "aircraft"
)

func NewEntitiesFromString(s string) (Entities, error) {
	switch s {
	case "legal_matter":
		return EntitiesLegalMatter, nil
	case "company":
		return EntitiesCompany, nil
	case "shipment":
		return EntitiesShipment, nil
	case "generic":
		return EntitiesGeneric, nil
	case "vessel":
		return EntitiesVessel, nil
	case "property":
		return EntitiesProperty, nil
	case "intellectual_property":
		return EntitiesIntellectualProperty, nil
	case "person":
		return EntitiesPerson, nil
	case "security":
		return EntitiesSecurity, nil
	case "tradename":
		return EntitiesTradename, nil
	case "unknown":
		return EntitiesUnknown, nil
	case "aircraft":
		return EntitiesAircraft, nil
	}
	var t Entities
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e Entities) Ptr() *Entities {
	return &e
}

// Finance type enums describe financial information about an entity; typically used to describe the cumulative monetary value of share capital issued by a company or held by an individual shareholder
type FinanceType string

const (
	// Percentage ownership of a given company's share capital, represented as a value from 0-100
	FinanceTypeSharePercentage FinanceType = "share_percentage"
	// Cumulative monetary value of one or more company shares, typically either held by a shareholder or issued by the company
	FinanceTypeShareAmount FinanceType = "share_amount"
	// Cumulative monetary value of the share capital of a given company
	FinanceTypeRegisteredCapital FinanceType = "registered_capital"
	// Cumulative monetary value of the share capital for which one or more shareholders have paid a given company
	FinanceTypePaidUpCapital FinanceType = "paid_up_capital"
	// The maximum amount of share capital a company is allowed to issue under its legal statutes
	FinanceTypeAuthorizedCapital FinanceType = "authorized_capital"
	// Cumulative monetary value of the share capital held by shareholders of a given company
	FinanceTypeSubscribedCapital FinanceType = "subscribed_capital"
)

func NewFinanceTypeFromString(s string) (FinanceType, error) {
	switch s {
	case "share_percentage":
		return FinanceTypeSharePercentage, nil
	case "share_amount":
		return FinanceTypeShareAmount, nil
	case "registered_capital":
		return FinanceTypeRegisteredCapital, nil
	case "paid_up_capital":
		return FinanceTypePaidUpCapital, nil
	case "authorized_capital":
		return FinanceTypeAuthorizedCapital, nil
	case "subscribed_capital":
		return FinanceTypeSubscribedCapital, nil
	}
	var t FinanceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinanceType) Ptr() *FinanceType {
	return &f
}

type FinancesData struct {
	Record      []string            `json:"record,omitempty"`
	RecordCount int                 `json:"record_count"`
	Properties  *FinancesProperties `json:"properties,omitempty"`
}

// A financial figure, typically share capital
type FinancesInfo struct {
	Limit int             `json:"limit"`
	Size  *SizeInfo       `json:"size,omitempty"`
	Data  []*FinancesData `json:"data,omitempty"`
}

type FinancesProperties struct {
	Context  *FinanceType `json:"context,omitempty"`
	Currency *Currency    `json:"currency,omitempty"`
	Type     *string      `json:"type,omitempty"`
	Value    float64      `json:"value"`
}

type FinancialsData struct {
	Record      []string              `json:"record,omitempty"`
	RecordCount int                   `json:"record_count"`
	Properties  *FinancialsProperties `json:"properties,omitempty"`
}

// A summary of financial information at one point in time
type FinancialsInfo struct {
	Limit int               `json:"limit"`
	Size  *SizeInfo         `json:"size,omitempty"`
	Data  []*FinancialsData `json:"data,omitempty"`
}

type FinancialsProperties struct {
	Assets            *float64  `json:"assets,omitempty"`
	Currency          *Currency `json:"currency,omitempty"`
	Employees         *int      `json:"employees,omitempty"`
	Liabilities       *float64  `json:"liabilities,omitempty"`
	NetIncome         *float64  `json:"net_income,omitempty"`
	PaidUpCapital     *float64  `json:"paid_up_capital,omitempty"`
	RegisteredCapital *float64  `json:"registered_capital,omitempty"`
	Revenue           *float64  `json:"revenue,omitempty"`
}

// Gender enums are normalized ways to refer to different genders
type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
	GenderOther  Gender = "other"
)

func NewGenderFromString(s string) (Gender, error) {
	switch s {
	case "male":
		return GenderMale, nil
	case "female":
		return GenderFemale, nil
	case "other":
		return GenderOther, nil
	}
	var t Gender
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g Gender) Ptr() *Gender {
	return &g
}

type GenderData struct {
	Record      []string          `json:"record,omitempty"`
	RecordCount int               `json:"record_count"`
	Properties  *GenderProperties `json:"properties,omitempty"`
}

// A person's gender
type GenderInfo struct {
	Limit int           `json:"limit"`
	Size  *SizeInfo     `json:"size,omitempty"`
	Data  []*GenderData `json:"data,omitempty"`
}

type GenderProperties struct {
	Value Gender `json:"value,omitempty"`
}

type GenericData struct {
	Record      []string           `json:"record,omitempty"`
	RecordCount int                `json:"record_count"`
	Properties  *GenericProperties `json:"properties,omitempty"`
}

// A placeholder attribute. Rarely used.
type GenericInfo struct {
	Limit int            `json:"limit"`
	Size  *SizeInfo      `json:"size,omitempty"`
	Data  []*GenericData `json:"data,omitempty"`
}

type GenericProperties struct {
	Type  *string `json:"type,omitempty"`
	Value *string `json:"value,omitempty"`
}

type IdentifierData struct {
	Record      []string              `json:"record,omitempty"`
	RecordCount int                   `json:"record_count"`
	Properties  *IdentifierProperties `json:"properties,omitempty"`
}

// An ID number that uniquely identifies one entity when value and type are taken into account.
type IdentifierInfo struct {
	Limit int               `json:"limit"`
	Size  *SizeInfo         `json:"size,omitempty"`
	Data  []*IdentifierData `json:"data,omitempty"`
}

type IdentifierProperties struct {
	Type  *BothIdentifierTypes `json:"type,omitempty"`
	Value string               `json:"value"`
}

// All strong (unique) identifiers in Sayari's database
type IdentifierType string

const (
	// Internal ID that can be used to link related companies within source
	IdentifierTypeCnTianyanchaCompanyId IdentifierType = "cn_tianyancha_company_id"
	// Internal ID that can be used to link related people within source
	IdentifierTypeCnTianyanchaHumanId IdentifierType = "cn_tianyancha_human_id"
	// A Chinese Unified Social Credit Code
	IdentifierTypeCnUnifiedSocialCreditCode IdentifierType = "cn_unified_social_credit_code"
	// A Chinese company registration number
	IdentifierTypeCnRegistrationNumber IdentifierType = "cn_registration_number"
	// A Chinese company organization code
	IdentifierTypeCnOrganizationCode IdentifierType = "cn_organization_code"
	// Part of a qichacha URL, used to uniquely identify people within the site
	IdentifierTypeCnQichachaInternalId IdentifierType = "cn_qichacha_internal_id"
	// A Hong Kong CR Number
	IdentifierTypeCnHkCrNumber IdentifierType = "cn_hk_cr_number"
	// A Hong Kong document filing number used by ICRIS
	IdentifierTypeCnHkFilingNumber IdentifierType = "cn_hk_filing_number"
	// A Bahraini CRNumber
	IdentifierTypeBhCrNumber IdentifierType = "bh_cr_number"
	// A Bahraini CRNumber combined with a Bahraini branch number
	IdentifierTypeBhCrNumberAndBranch IdentifierType = "bh_cr_number_and_branch"
	// Deprecated use jo_national_institution_number
	IdentifierTypeJoInternalId IdentifierType = "jo_internal_id"
	// A Jordanian National Institution Number
	IdentifierTypeJoNationalInstitutionNumber IdentifierType = "jo_national_institution_number"
	// Deprecated use weak id jor_sol_prop_institution_number
	IdentifierTypeJoInstitutionNumber IdentifierType = "jo_institution_number"
	// A Malta company number
	IdentifierTypeMaltaCompanyNumber IdentifierType = "malta_company_number"
	// A number linked to a Maltese national ID card
	IdentifierTypeMaltaNationalId IdentifierType = "malta_national_id"
	// Seems to be tied to accounting/auditing firms
	IdentifierTypeMaltaAccountancyRegistrationId IdentifierType = "malta_accountancy_registration_id"
	// The pattern was sourced from the snapshot file documentation provided to us. When the first two characters are not digits, they have a special meaning
	IdentifierTypeUkCompanyNumber IdentifierType = "uk_company_number"
	// A six or a seven-digit Firm Reference Number used to uniquely identify firms by the Prudential Regulation Authority (PRA) and Financial Conduct Authority (FCA).
	IdentifierTypeUkFirmReferenceNumber IdentifierType = "uk_firm_reference_number"
	// Seems to be internal use, and is not perfectly applied
	IdentifierTypeUkPersonNumber IdentifierType = "uk_person_number"
	// A tax ID
	IdentifierTypeMxRfcPerson  IdentifierType = "mx_rfc_person"
	IdentifierTypeMxCurp       IdentifierType = "mx_curp"
	IdentifierTypeMxRfcCompany IdentifierType = "mx_rfc_company"
	IdentifierTypeMxOfficeFme  IdentifierType = "mx_office_fme"
	// A Russian tax ID. Individuals get a 12 digit number, companies get 10 digits
	IdentifierTypeRuInn IdentifierType = "ru_inn"
	// A Russian company ID. 12 digits
	IdentifierTypeRuOgrn IdentifierType = "ru_ogrn"
	// internal company ID
	IdentifierTypeVenSarenInternalEmployerNumber IdentifierType = "ven_saren_internal_employer_number"
	// Brazilian corporate ID number
	IdentifierTypeBraCnpj IdentifierType = "bra_cnpj"
	// Venezuelan tax register information number -- for companies, and sometimes people
	IdentifierTypeVenRif          IdentifierType = "ven_rif"
	IdentifierTypeVenCedulaNumber IdentifierType = "ven_cedula_number"
	// Maldivian corporate registration number.
	IdentifierTypeMdvRegistrationNumber IdentifierType = "mdv_registration_number"
	// DIN Number or Director Identification Number is a unique 8 digit number that is required for any existing or proposed Director of a Company
	IdentifierTypeIndDirectorIdNumber IdentifierType = "ind_director_id_number"
	// A permanent account number (PAN) is a ten-digit alphanumeric number, issued in the form of a laminated card, by the Indian Income Tax Department, to any "person" who applies for it or to whom the department allots the number without an application.
	IdentifierTypeIndPermanentAccountNumber IdentifierType = "ind_permanent_account_number"
	// A unique identification number assigned by Registrar of Companies (ROC) functioning in various states under Ministry of Corporate Affairs (MCA), Govt. of India
	IdentifierTypeIndCorporateIdNumber IdentifierType = "ind_corporate_id_number"
	// A tax ID number
	IdentifierTypeKazTin IdentifierType = "kaz_tin"
	// A business identification number
	IdentifierTypeKazBin         IdentifierType = "kaz_bin"
	IdentifierTypeKazStateRegNum IdentifierType = "kaz_state_reg_num"
	IdentifierTypeKazOkpoNum     IdentifierType = "kaz_okpo_num"
	// This is a poorly understood identifer that appears to be unique.
	IdentifierTypeKazIdentifier IdentifierType = "kaz_identifier"
	// Kosovo registration number
	IdentifierTypeRksRegistrationNumber IdentifierType = "rks_registration_number"
	// General Electronic Commercial Registry (G.E.MI.) number for all legal forms of businesses in Greece'
	IdentifierTypeGrcGemiNumber IdentifierType = "grc_gemi_number"
	// A certificate number for the National Registry of Contractors in Venezuela
	IdentifierTypeVenRncNumber IdentifierType = "ven_rnc_number"
	IdentifierTypeUsaVaRegId   IdentifierType = "usa_va_reg_id"
	IdentifierTypeUsaNyRegId   IdentifierType = "usa_ny_reg_id"
	// Number assigned by the IRS to businesses in the US for identification, also known as EIN
	IdentifierTypeUsaFeiNumber IdentifierType = "usa_fei_number"
	IdentifierTypeUkrMojId     IdentifierType = "ukr_moj_id"
	// Mauritius Business Registration No.
	IdentifierTypeMusRegId IdentifierType = "mus_reg_id"
	// Title number for a property in the UK
	IdentifierTypeUkTitleNumber IdentifierType = "uk_title_number"
	// Registration number from the Mongolian corporate registry
	IdentifierTypeMngRegNumber IdentifierType = "mng_reg_number"
	// Registration number from the Montenegro corporate registry
	IdentifierTypeMneRegNumber IdentifierType = "mne_reg_number"
	// Kyrgyzstan registration number
	IdentifierTypeKgzRegNumber IdentifierType = "kgz_reg_number"
	// A code required by Chinese customs for imports and exports. It can be many different things, inclduing the USCC or OC for Chinese companies or the SSN or EIN for US companies.
	IdentifierTypeCnImportexportCode IdentifierType = "cn_importexport_code"
	// A code used in the North Korea - China trade data.
	IdentifierTypePrkEntityId       IdentifierType = "prk_entity_id"
	IdentifierTypePrkRegistrationId IdentifierType = "prk_registration_id"
	// A unique id number assigned to every citizen of former Yugoslav republics.
	IdentifierTypeYugoslavMasterCitizenNum IdentifierType = "yugoslav_master_citizen_num"
	// Some kind of ID for burkin fasa
	IdentifierTypeBfaEntityId IdentifierType = "bfa_entity_id"
	// A unique id number assigned to all individuals, companies and organizations that operate in Afghanistan.
	IdentifierTypeAfghanTinNumber IdentifierType = "afghan_tin_number"
	// A unique id number assigned to all individuals, companies and organizations that operate in Afghanistan.
	IdentifierTypeAfgBusinessLicense IdentifierType = "afg_business_license"
	// A tax identifier number in Madagascar.
	IdentifierTypeMdgNifNumber  IdentifierType = "mdg_nif_number"
	IdentifierTypeMdgStatNumber IdentifierType = "mdg_stat_number"
	// A tax identifier number in Madagascar.
	IdentifierTypeMdgRcsNumber IdentifierType = "mdg_rcs_number"
	// See https://en.wikipedia.org/wiki/National_identification_number#Latvia
	IdentifierTypeLvaPersonalCode IdentifierType = "lva_personal_code"
	// See https://en.wikipedia.org/wiki/International_Bank_Account_Number
	IdentifierTypeIban IdentifierType = "iban"
	// Latvian corporate registration number
	IdentifierTypeLvaRegNumber IdentifierType = "lva_reg_number"
	// A business identifier number in Taiwan
	IdentifierTypeTwnUnifiedNumber IdentifierType = "twn_unified_number"
	// An identifier from the Trade and Companies Register (RCS) in Luxembourg
	IdentifierTypeLuxRcsNumber IdentifierType = "lux_rcs_number"
	// A unique identifier for Macedonian companies called Edinstven maticen broj na subjektot (EMBS)
	IdentifierTypeMkdEmbsNumber IdentifierType = "mkd_embs_number"
	// A unique identifier for branches of Macedonian companies. It begins with the MKD EMBS number, then a '/', then a number for the branch
	IdentifierTypeMkdEmbsBranchNumber IdentifierType = "mkd_embs_branch_number"
	// A unique state identifier in Moldova assigned to legal entities that also serves as a fiscal code
	IdentifierTypeMdaIdnoNumber IdentifierType = "mda_idno_number"
	// The Single Register of Taxpayers id for customers of the Tax Administration
	IdentifierTypeUryRucNumber IdentifierType = "ury_ruc_number"
	// Standardized unique business id number for all companies in Switzerland
	IdentifierTypeCheUidNumber IdentifierType = "che_uid_number"
	// Registration number for people and companies from the El Salvador commercial register
	IdentifierTypeSlvCommercialRegNumber IdentifierType = "slv_commercial_reg_number"
	// Documento Unico de Identidad number from El Salvador
	IdentifierTypeSlvUidNumber      IdentifierType = "slv_uid_number"
	IdentifierTypeMatoGrossoLegalId IdentifierType = "mato_grosso_legal_id"
	// See https://www.leiroc.org/lei.htm
	IdentifierTypeLei IdentifierType = "lei"
	// See https://en.wikipedia.org/wiki/VAT_identification_number
	IdentifierTypeVat IdentifierType = "vat"
	// See https://en.wikipedia.org/wiki/Italian_fiscal_code_card
	IdentifierTypeItaFiscalCode       IdentifierType = "ita_fiscal_code"
	IdentifierTypeRioDeJaneiroLegalId IdentifierType = "rio_de_janeiro_legal_id"
	// Iceland tax id no. See https://www.oecd.org/tax/automatic-exchange/crs-implementation-and-assistance/tax-identification-numbers/Iceland-TIN.pdf
	IdentifierTypeIslTinNumber IdentifierType = "isl_tin_number"
	// Laos corporate regisry enterprise number
	IdentifierTypeLaoEnterpriseNumber IdentifierType = "lao_enterprise_number"
	// Company id number for businesses registered in the Slovak Republic
	IdentifierTypeSvkIcoNumber IdentifierType = "svk_ico_number"
	// Cambodia tax identification number
	IdentifierTypeKhmTinNumber IdentifierType = "khm_tin_number"
	// Czech Republic id number (business register code) of an economic subject
	IdentifierTypeCzeIcoNumber IdentifierType = "cze_ico_number"
	// Iranian national identifier number
	IdentifierTypeIrnNationalId IdentifierType = "irn_national_id"
	// Ecuadorian unique taxpayers registry number
	IdentifierTypeEcuRucNumber IdentifierType = "ecu_ruc_number"
	// Greek VAT number
	IdentifierTypeGrcVatNumber IdentifierType = "grc_vat_number"
	// Canada corporation number; See "Business Number" https://www.ic.gc.ca/app/scr/cc/CorporationsCanada/popMsg.html
	IdentifierTypeCanCorporationNumber IdentifierType = "can_corporation_number"
	// Canadian Revenue Agency program account number; See https://www.thebalancesmb.com/what-is-the-canada-revenue-agency-cra-business-number-2947322
	IdentifierTypeCanCraProgramAccountNumber IdentifierType = "can_cra_program_account_number"
	// Tax identification number in Montenegro
	IdentifierTypeMnePib IdentifierType = "mne_pib"
	// National Identification Number - RUN (Rol Único Nacional) or RUT (Rol Único Tributario) in Chile
	IdentifierTypeChlCedulaNumber IdentifierType = "chl_cedula_number"
	// Case number for Brazilian legal matters, this is a first pass and is pretty generic. May need modification later.
	IdentifierTypeBraCaseNumber IdentifierType = "bra_case_number"
	// Limited Liability Partnership Identification Number. See https://www.corporate-cases.com/2012/01/Corporate-Identity-Number.html
	IdentifierTypeIndLlpin IdentifierType = "ind_llpin"
	// Foreign Company Registration Number. See https://www.corporate-cases.com/2012/01/Corporate-Identity-Number.html
	IdentifierTypeIndFcrn IdentifierType = "ind_fcrn"
	// Bermuda registration number
	IdentifierTypeBmuRegistrationNumber IdentifierType = "bmu_registration_number"
	// Individual tax number in Brazil
	IdentifierTypeBraCpfNumber IdentifierType = "bra_cpf_number"
	// Deprecated use irn_national_id
	IdentifierTypeIrnNationalNumber IdentifierType = "irn_national_number"
	// Chinese custums registration code. Downgraded to weak identifier.
	IdentifierTypeChnCustomsRegistrationCode IdentifierType = "chn_customs_registration_code"
	// Liechtenstein Public Register number
	IdentifierTypeLiePublicRegNo IdentifierType = "lie_public_reg_no"
	// Chinese tax identification number
	IdentifierTypeCnTaxIdentificationNumber IdentifierType = "cn_tax_identification_number"
	// Macau business registration number
	IdentifierTypeMacRegistrationNo IdentifierType = "mac_registration_no"
	// Internal Siger id comprised of office id_fme_data-rk
	IdentifierTypeSigerInternalId IdentifierType = "siger_internal_id"
	// Lebanese national ID number. Last digit
	IdentifierTypeLbnNationalId IdentifierType = "lbn_national_id"
	// The International Maritime Organization (IMO) number is a unique reference for ships, registered ship owners and management companies
	IdentifierTypeIntMaritimeOrgId IdentifierType = "int_maritime_org_id"
	// ID number for the Russian Maritime Register of Shipping (RS)
	IdentifierTypeRuShipRegisterId IdentifierType = "ru_ship_register_id"
	// A UUID used to merge entities internally
	IdentifierTypeSayariInternalIdentifier IdentifierType = "sayari_internal_identifier"
	// Also known as KvK number.
	IdentifierTypeArubaChamberOfCommerceId IdentifierType = "aruba_chamber_of_commerce_id"
	// International Maritime Organization number
	IdentifierTypeImoNo IdentifierType = "imo_no"
	// British Virgin Islands company number.
	IdentifierTypeVgbCompanyNumber IdentifierType = "vgb_company_number"
	// Yemeni chamber of commerce registration number
	IdentifierTypeYemCocRegistrationNumber IdentifierType = "yem_coc_registration_number"
	// National Registration Identification Card Number NRIC for Malaysia
	IdentifierTypeMysIdCardNo IdentifierType = "mys_id_card_no"
	// Malaysia Business Registration Number
	IdentifierTypeMysCompanyRegNo IdentifierType = "mys_company_reg_no"
	// Paraguay RUC number for companies and people
	IdentifierTypePryRucNumber IdentifierType = "pry_ruc_number"
	// Paraguay cedula number for people
	IdentifierTypePryCedulaNumber IdentifierType = "pry_cedula_number"
	// Paraguay previous RUC number format
	IdentifierTypePryOldRucNumber IdentifierType = "pry_old_ruc_number"
	// Register of Commerce and Personal Propery Transactions Number (West Africa)
	IdentifierTypeRccmNo IdentifierType = "rccm_no"
	// National id number for people in Brazil
	IdentifierTypeBraRgNumber IdentifierType = "bra_rg_number"
	// National identification number for enterprises and associations (Senegal)
	IdentifierTypeNineaNo               IdentifierType = "ninea_no"
	IdentifierTypeAlbTaxId              IdentifierType = "alb_tax_id"
	IdentifierTypeAlbRegistrationNumber IdentifierType = "alb_registration_number"
	// Unique company id from Inspección General de Justicia in Argentina
	IdentifierTypeArgIgjNumber IdentifierType = "arg_igj_number"
	// A nationally issued identification number for people in Argentina
	IdentifierTypeArgDniNumber IdentifierType = "arg_dni_number"
	// Single tax identification code in Argentina for any individual that initiates an economic activity
	IdentifierTypeArgCuitNumber IdentifierType = "arg_cuit_number"
	// Unified Labor Identification Code in Argentina that is required for Social Security benefits
	IdentifierTypeArgCuilNumber IdentifierType = "arg_cuil_number"
	// Unique id issued to individuals in Argentina by the AFIP who don't require a CUIT or CUIL
	IdentifierTypeArgCdiNumber IdentifierType = "arg_cdi_number"
	// Bosnia and Herzegovenia business register registration number
	IdentifierTypeBihMbsNumber                IdentifierType = "bih_mbs_number"
	IdentifierTypeBihJibNumber                IdentifierType = "bih_jib_number"
	IdentifierTypeBihCustomsNumber            IdentifierType = "bih_customs_number"
	IdentifierTypeUsaPuertoRicoRegisterNumber IdentifierType = "usa_puerto_rico_register_number"
	IdentifierTypeDjiRcsNumber                IdentifierType = "dji_rcs_number"
	IdentifierTypeCriCedulaNumber             IdentifierType = "cri_cedula_number"
	// Number of National ID card for Mozambique
	IdentifierTypeMozIdNumber IdentifierType = "moz_id_number"
	// Mozambique Taxpayer Single Identification Number for a person
	IdentifierTypeMozNuitPerson IdentifierType = "moz_nuit_person"
	// Mozambique Taxpayer Single Identification Number for a company
	IdentifierTypeMozNuitCo IdentifierType = "moz_nuit_co"
	// Mozambique Passport Number
	IdentifierTypeMozPassport IdentifierType = "moz_passport"
	// Mozambique foreign residence permit number
	IdentifierTypeMozDireNo IdentifierType = "moz_dire_no"
	// Mozambique voter number
	IdentifierTypeMozVoterNo IdentifierType = "moz_voter_no"
	// Mozambique company registration number
	IdentifierTypeMozNuelNo  IdentifierType = "moz_nuel_no"
	IdentifierTypeIrqVoterId IdentifierType = "irq_voter_id"
	// Jordan voter card number
	IdentifierTypeJorVoterCardNo IdentifierType = "jor_voter_card_no"
	// Deprecated use jo_national_institution_number
	IdentifierTypeJorIdNo IdentifierType = "jor_id_no"
	// Peru unique taxpayer registration number
	IdentifierTypePerRucNo      IdentifierType = "per_ruc_no"
	IdentifierTypeEcuCompanyId  IdentifierType = "ecu_company_id"
	IdentifierTypeUsaNyDosId    IdentifierType = "usa_ny_dos_id"
	IdentifierTypeBfaRccmNumber IdentifierType = "bfa_rccm_number"
	// Florida broward county property folio number
	IdentifierTypeFlPropFolio  IdentifierType = "fl_prop_folio"
	IdentifierTypeQatQfcNumber IdentifierType = "qat_qfc_number"
	// Greek AFM number
	IdentifierTypeGrcAfmNumber IdentifierType = "grc_afm_number"
	// Vietnam enterprise code
	IdentifierTypeVnmEnterpriseCode IdentifierType = "vnm_enterprise_code"
	// Thai registration number
	IdentifierTypeThaRegistrationNo IdentifierType = "tha_registration_no"
	// https://vi.wikipedia.org/wiki/C%C4%83n_c%C6%B0%E1%BB%9Bc_c%C3%B4ng_d%C3%A2n_(Vi%E1%BB%87t_Nam)
	IdentifierTypeVnmCitizenshipNo IdentifierType = "vnm_citizenship_no"
	// https://vi.wikipedia.org/wiki/Ch%E1%BB%A9ng_minh_nh%C3%A2n_d%C3%A2n
	IdentifierTypeVnmPersonIdNo IdentifierType = "vnm_person_id_no"
	// ID number for Argentinian women before the DNI number
	IdentifierTypeArgLibCivicaNumber IdentifierType = "arg_lib_civica_number"
	// ID number for Argentinian men before the DNI number
	IdentifierTypeArgLibEnrolamientoNumber IdentifierType = "arg_lib_enrolamiento_number"
	// New Zealand Business Number
	IdentifierTypeNzlNzbn IdentifierType = "nzl_nzbn"
	// New Zealand company number
	IdentifierTypeNzlCoNo IdentifierType = "nzl_co_no"
	// OFAC Unique Identification Number
	IdentifierTypeUsaOfacSdnNumber IdentifierType = "usa_ofac_sdn_number"
	// International bank code
	IdentifierTypeSwiftBicCode IdentifierType = "swift_bic_code"
	// DNB unique ID
	IdentifierTypeDunsNumber IdentifierType = "duns_number"
	// Bitcoin bitcoin address
	IdentifierTypeBitcoinAddress IdentifierType = "bitcoin_address"
	// Litecoin address
	IdentifierTypeLitecoinAddress IdentifierType = "litecoin_address"
	// Russia Moscow Stock exchange code
	IdentifierTypeRusMicexCode IdentifierType = "rus_micex_code"
	// Texas Property ID
	IdentifierTypeTxPropId IdentifierType = "tx_prop_id"
	// Texas PACS Internal ID
	IdentifierTypeTxPacsId IdentifierType = "tx_pacs_id"
	// Texas Land Segment ID
	IdentifierTypeTxLandId IdentifierType = "tx_land_id"
	// Registration number from Papua New Guinea Investment Promotion Authority
	IdentifierTypePngIpaRegId IdentifierType = "png_ipa_reg_id"
	// Guatemala tax identification number
	IdentifierTypeGtmNitNumber IdentifierType = "gtm_nit_number"
	// Guatemala unique identification code for people
	IdentifierTypeGtmCuiNumber IdentifierType = "gtm_cui_number"
	// A Dominican business tax ID. https://www.jpmorgan.com/tss/General/Dominican_Republic/1424621856282
	IdentifierTypeDomRnc IdentifierType = "dom_rnc"
	// Company register number in Qatar
	IdentifierTypeQatCrNumber IdentifierType = "qat_cr_number"
	// An International Securities Identification Number (ISIN) uniquely identifies a security. First two digits are ISO country code
	IdentifierTypeIsin IdentifierType = "isin"
	// Unique company identifier for the Florida corporate registry
	IdentifierTypeUsaFlDocumentNo IdentifierType = "usa_fl_document_no"
	// Unique identifier for fictitious name registrations in Florida
	IdentifierTypeUsaFlFicNameRegNo IdentifierType = "usa_fl_fic_name_reg_no"
	// Brazilian Federal Executive PEP identification number
	IdentifierTypeBraServidorPortal IdentifierType = "bra_servidor_portal"
	// Brazilian Federal Executive PEP organizational unit code
	IdentifierTypeBraCodigoDaUnidadeOrganizacional IdentifierType = "bra_codigo_da_unidade_organizacional"
	// The Central Index Key (CIK) is used on the SEC's computer systems to identify corporations and individual people who have filed disclosure with the SEC. It's 10 digits with 0 fill in front.
	IdentifierTypeUsaSecCikNumber IdentifierType = "usa_sec_cik_number"
	// Croatian Court Business Register
	IdentifierTypeHrMbs IdentifierType = "hr_mbs"
	// Croatian Personal & Company Identification Number
	IdentifierTypeHrOib IdentifierType = "hr_oib"
	// The Salvadorian Número de Identificación Tributaria, used on SLV commercial register
	IdentifierTypeSlvNumeroIdentificacionTributaria IdentifierType = "slv_numero_identificacion_tributaria"
	// The Salvadorian Matrícula Consular (MCAS/CID), used on SLV commercial register
	IdentifierTypeSlvMcas IdentifierType = "slv_mcas"
	// Every company in Australia is issued with a unique, nine-digit number when registered. This is an Australian Company Number (ACN) and must be displayed on all company documents.
	IdentifierTypeAusCompanyNumber IdentifierType = "aus_company_number"
	// The Australian business number (ABN) is a unique 11-digit identifier that makes it easier for businesses and all levels of government to interact.
	IdentifierTypeAusBusinessNumber IdentifierType = "aus_business_number"
	// A unique ID created from a combination of the Handelsregisternummer, the company number given to each company listed in the Handelsregister, and the district court XJustiz ID. This is done because the Handelsregisternummer is not unique on its own.
	IdentifierTypeDeuRegisternummer IdentifierType = "deu_registernummer"
	// The Internal Revenue Service Employer Identification Number
	IdentifierTypeUsaIrsEin IdentifierType = "usa_irs_ein"
	// Number used to identify a Hong Kong judicial case
	IdentifierTypeHongKongCaseNumber IdentifierType = "hong_kong_case_number"
	// Internal ID that can be used to link related companies within source
	IdentifierTypeIrnCocInternalId IdentifierType = "irn_coc_internal_id"
	// Unique identifier for entities in the Panamanian public registry.
	IdentifierTypePanFolioFichaId IdentifierType = "pan_folio_ficha_id"
	// Panamanian cedula number
	IdentifierTypePanCedulaNumber IdentifierType = "pan_cedula_number"
	// Cedar Rose UID
	IdentifierTypeXxxCedarRoseUid IdentifierType = "xxx_cedar_rose_uid"
	// West African Register of Commerce and Personal Property Transactions, originally found in BEN
	IdentifierTypeXxxRccm IdentifierType = "xxx_rccm"
	// Internal identifier to dichvuthongtin corporate register
	IdentifierTypeVnmDichvuthongtinInternalId IdentifierType = "vnm_dichvuthongtin_internal_id"
	// Internal identifier for Sayari Intel entities
	IdentifierTypeXxxIntelInternalId IdentifierType = "xxx_intel_internal_id"
	// The State of Washington Business License Service defines a UBI number as “a 9-digit number that registers you with several state agencies and allows you to do business in Washington State.
	IdentifierTypeUsaWashingtonStateUbi IdentifierType = "usa_washington_state_ubi"
	// Nigerian corporate registration number
	IdentifierTypeNgaRegistrationNumber IdentifierType = "nga_registration_number"
	// ng-check.com internal id
	IdentifierTypeNgCheckInternalId IdentifierType = "ng_check_internal_id"
	// New York City City Borough Block and Lot or Property ID
	IdentifierTypeNycBbl IdentifierType = "nyc_bbl"
	// New York City City Register File Number
	IdentifierTypeNycCrfn IdentifierType = "nyc_crfn"
	// Texas Corporate Registry Filing Number
	IdentifierTypeTxCorpFileNum IdentifierType = "tx_corp_file_num"
	// Texas Comptroller's Taxpayer Number
	IdentifierTypeTxTaxId IdentifierType = "tx_tax_id"
	// Georgia state business identification number
	IdentifierTypeUsaGaBusinessId IdentifierType = "usa_ga_business_id"
	// Philippines stock exchange company ID
	IdentifierTypePhlPseId IdentifierType = "phl_pse_id"
	// Philippines Securities and Exchange Commission ID
	IdentifierTypePhlSecId IdentifierType = "phl_sec_id"
	// Philippines Tax ID http://www.ntrc.gov.ph/images/journal/j20141112a.pdf Optional last three digits is branch code
	IdentifierTypePhlTin IdentifierType = "phl_tin"
	// Afghan passport number
	IdentifierTypeAfgPassport IdentifierType = "afg_passport"
	// Iranian passport number
	IdentifierTypeIrnPassport IdentifierType = "irn_passport"
	// Kuwaiti passport number
	IdentifierTypeKwtPassport IdentifierType = "kwt_passport"
	// Libyan passport number
	IdentifierTypeLbyPassport IdentifierType = "lby_passport"
	// Pakistani passport number
	IdentifierTypePakPassport IdentifierType = "pak_passport"
	// Russian passport number
	IdentifierTypeRusPassport IdentifierType = "rus_passport"
	// Tunisian passport number
	IdentifierTypeTunPassport IdentifierType = "tun_passport"
	// Yemeni passport number
	IdentifierTypeYemPassport IdentifierType = "yem_passport"
	// UN Security Council sanction list permanent reference number https://www.un.org/securitycouncil/content/un-sc-consolidated-list#identifiers%20and%20acronyms
	IdentifierTypeUnSanctionPrn IdentifierType = "un_sanction_prn"
	// EU sanction reference number
	IdentifierTypeEuSanctionRn IdentifierType = "eu_sanction_rn"
	// California LP/LLC file number
	IdentifierTypeCaLpFileNum IdentifierType = "ca_lp_file_num"
	// Texas Corporate Registry entity filing number
	IdentifierTypeTxEntityFilingNum IdentifierType = "tx_entity_filing_num"
	// United States of America social security number (SSN)
	IdentifierTypeUsaSocialSecurityNumber IdentifierType = "usa_social_security_number"
	// WY internal party ID
	IdentifierTypeUsaWyPartyId IdentifierType = "usa_wy_party_id"
	// WY internal filing ID (primary key)
	IdentifierTypeUsaWyFilingId IdentifierType = "usa_wy_filing_id"
	// WY internal filing ID (primary key)
	IdentifierTypeUsaWyInternalFilingId IdentifierType = "usa_wy_internal_filing_id"
	// Wyoming Secretary of State Filing Number
	IdentifierTypeUsaWyFilingNum IdentifierType = "usa_wy_filing_num"
	// Oregon corporate registry registration number
	IdentifierTypeUsaOrRegno IdentifierType = "usa_or_regno"
	// Nevada Corporation Number
	IdentifierTypeUsaNvCorpno IdentifierType = "usa_nv_corpno"
	// Nevada Business ID
	IdentifierTypeUsaNvBizid IdentifierType = "usa_nv_bizid"
	// Internal ID used to link companies between PRK/CN exports and trade dict sources. Downgraded to weak id.
	IdentifierTypePrkInternalTradeId IdentifierType = "prk_internal_trade_id"
	// Identifier number from the Lesotho corporate registry
	IdentifierTypeLsoCorpregId IdentifierType = "lso_corpreg_id"
	// Tin number used in Uzbekistan for companies and people
	IdentifierTypeUzbTinNumber IdentifierType = "uzb_tin_number"
	// California corporate identification number
	IdentifierTypeCaCorporateIdNum IdentifierType = "ca_corporate_id_num"
	// ID for entities in HM Treasury Sanctions list
	IdentifierTypeGbrHmTreasurySanctionGroupId IdentifierType = "gbr_hm_treasury_sanction_group_id"
	// Unique UK ID number. Assigned to every registered trademark.
	IdentifierTypeGbrIpoTrademarkRegNo IdentifierType = "gbr_ipo_trademark_reg_no"
	// USA state of Georgia control number assigned to companies
	IdentifierTypeUsaGaControlNo IdentifierType = "usa_ga_control_no"
	// Company registration number for Honduran companies
	IdentifierTypeHndCocCompanyRegistrationNumber IdentifierType = "hnd_coc_company_registration_number"
	// UID used for properties in Montenegro land registry
	IdentifierTypeMnePropertyUid IdentifierType = "mne_property_uid"
	// Philippines Certificate No. / Bnn
	IdentifierTypePhlBnn IdentifierType = "phl_bnn"
	// Romanian unique registration code for companies
	IdentifierTypeRouCompanyRegistrationCode IdentifierType = "rou_company_registration_code"
	// Romanian identity card for citizens
	IdentifierTypeRouIdentityCard IdentifierType = "rou_identity_card"
	// Romanian personal id number
	IdentifierTypeRouPersonalIdNumber IdentifierType = "rou_personal_id_number"
	// Cubiaian company id
	IdentifierTypeCubCod IdentifierType = "cub_cod"
	// Florida dade county property folio number
	IdentifierTypeFlPropFolioDade IdentifierType = "fl_prop_folio_dade"
	// Peruvian national identity document number
	IdentifierTypePerDniNo IdentifierType = "per_dni_no"
	// Peruvian foreign resident ID
	IdentifierTypePerCarneDeExtranjeria IdentifierType = "per_carne_de_extranjeria"
	// Identifier for French companies
	IdentifierTypeFraSiren IdentifierType = "fra_siren"
	// Identifier for branches of French companies. The first 9 digits are the Siren of the principal company.
	IdentifierTypeFraSiret IdentifierType = "fra_siret"
	// Czechia file number from Moj registry, this has been changed to a weak identifier
	IdentifierTypeCzeFileNumber IdentifierType = "cze_file_number"
	// Value taken from Datos registrales section used to identify companies in Borme. Not an official identifier.
	IdentifierTypeEspBormeRegId IdentifierType = "esp_borme_reg_id"
	// Mexican trademark number
	IdentifierTypeMexTmNo IdentifierType = "mex_tm_no"
	// Mauritius Company File No.
	IdentifierTypeMusFileNo IdentifierType = "mus_file_no"
	// Colombian tax identification number
	IdentifierTypeColNitNo IdentifierType = "col_nit_no"
	// Japanese corporate number (https://en.wikipedia.org/wiki/Corporate_Number).
	IdentifierTypeJpnCorporateNo IdentifierType = "jpn_corporate_no"
	// Common Government-wide Accounting Classification (CGAC) agency code assigned by the Treasury
	IdentifierTypeUsaCgacAgencyCode IdentifierType = "usa_cgac_agency_code"
	// Identifier for a US government agency
	IdentifierTypeUsaGovtAgencyId IdentifierType = "usa_govt_agency_id"
	// Identifier for a US government agency office
	IdentifierTypeUsaGovtOfficeId IdentifierType = "usa_govt_office_id"
	// Colombian cedula number
	IdentifierTypeColCedulaNo IdentifierType = "col_cedula_no"
	// Colombian SECOP internal ID
	IdentifierTypeColSecopNo IdentifierType = "col_secop_no"
	// Deprecated use weak identifier jordan_company_no
	IdentifierTypeJordanCompanyNo IdentifierType = "jordan_company_no"
	// Denmark business registration number https://erhvervsstyrelsen.dk/cvr-numre-p-numre-og-se-numre
	IdentifierTypeDnkCvr IdentifierType = "dnk_cvr"
	// Denmark business branch number https://skat.dk/skat.aspx?oid=2045880
	IdentifierTypeDnkProductionUnitNo IdentifierType = "dnk_production_unit_no"
	// Internal ID for Denmark virk
	IdentifierTypeDnkEntity IdentifierType = "dnk_entity"
	// Norway Organisasjonsnummer
	IdentifierTypeNorOrgNo IdentifierType = "nor_org_no"
	// Sweden Organisationsnummer, may have - separating last 3 digits
	IdentifierTypeSweOrgNo IdentifierType = "swe_org_no"
	// USA Colorado Secretary of State registration number
	IdentifierTypeUsaCoRegNo IdentifierType = "usa_co_reg_no"
	// USA Iowa Secretary of State corporation number
	IdentifierTypeUsaIaCorpNo IdentifierType = "usa_ia_corp_no"
	// UEN is the standard identification number of an entity. UEN shall be for registered entities as NRIC is for Singapore citizens. The UEN uniquely identifies the entity.
	IdentifierTypeSgpUnqiueEntityNumber IdentifierType = "sgp_unqiue_entity_number"
	// USA Alaskan Secretary of State entity number
	IdentifierTypeUsaAkEntityNo IdentifierType = "usa_ak_entity_no"
	// USA Ohio business charter number
	IdentifierTypeUsaOhCharterNum IdentifierType = "usa_oh_charter_num"
	// Istanbul chamber of commerce registration number
	IdentifierTypeTurIstanbulCocRegNo IdentifierType = "tur_istanbul_coc_reg_no"
	// Turkish Central Registry Number System MERSIS number
	IdentifierTypeTurMersisNumber IdentifierType = "tur_mersis_number"
	IdentifierTypeCheChIdNumber   IdentifierType = "che_ch_id_number"
	// ARE Dubai Intl Financial Center registration number
	IdentifierTypeAreDifcRegNo IdentifierType = "are_difc_reg_no"
	// IDN tax id a.k.a. NPWP Number https://wiki.scn.sap.com/wiki/display/CRM/Indonesia
	IdentifierTypeIdnTaxId IdentifierType = "idn_tax_id"
	// USA Vermont Business ID
	IdentifierTypeUsaVtBizId IdentifierType = "usa_vt_biz_id"
	// USA WV Corporate Registry ID
	IdentifierTypeUsaWvRegId IdentifierType = "usa_wv_reg_id"
	// USA MS Business ID
	IdentifierTypeUsaMsBizId IdentifierType = "usa_ms_biz_id"
	// USA id Business Control Number
	IdentifierTypeUsaIdControlNo IdentifierType = "usa_id_control_no"
	// USA id Registered Agent ID
	IdentifierTypeUsaIdPartyId           IdentifierType = "usa_id_party_id"
	IdentifierTypeIrnCocInternalIdCardno IdentifierType = "irn_coc_internal_id_cardno"
	// USA Arizona Corporate Registry Entity Number
	IdentifierTypeUsaAzCorpRegEntityNum IdentifierType = "usa_az_corp_reg_entity_num"
	// USA ok Business Filing Number
	IdentifierTypeUsaOkFilingNo IdentifierType = "usa_ok_filing_no"
	// USA tn Business Control Number
	IdentifierTypeUsaTnControlNo IdentifierType = "usa_tn_control_no"
	// USA tn Registered Agent ID
	IdentifierTypeUsaTnPartyId IdentifierType = "usa_tn_party_id"
	// USA tn Business ID
	IdentifierTypeUsaKsBizId IdentifierType = "usa_ks_biz_id"
	// Identifier made from File Number and File Suffix in HI corporate registry
	IdentifierTypeUsaHiCorporateRegistryId IdentifierType = "usa_hi_corporate_registry_id"
	// Identifier for officers in HI corporate regisry
	IdentifierTypeUsaHiCorporateRegistryPersonId IdentifierType = "usa_hi_corporate_registry_person_id"
	// The National Court Register (KRS standing for Krajowy Rejestr Sądowy) number
	IdentifierTypePolKrsNumber IdentifierType = "pol_krs_number"
	// The register REGON fulfils the function of the national official Register of National Economy Entities
	IdentifierTypePolRegonNumber IdentifierType = "pol_regon_number"
	// Tax identification number from Poland
	IdentifierTypePolNipNumber IdentifierType = "pol_nip_number"
	// Person identifier from Poland Rejestr data
	IdentifierTypePolRejestrPersonId IdentifierType = "pol_rejestr_person_id"
	// Armenian VAT id number
	IdentifierTypeArmVatNo IdentifierType = "arm_vat_no"
	// Armenian enterprise code
	IdentifierTypeArmEnterpriseCode IdentifierType = "arm_enterprise_code"
	// Armenian regsitration number
	IdentifierTypeArmRegistrationNo IdentifierType = "arm_registration_no"
	// Maine corporate ID
	IdentifierTypeUsaMeCorpId IdentifierType = "usa_me_corp_id"
	// Cypriot corporate registration number. Prefix corresponds to company type code.
	IdentifierTypeCypRegNo IdentifierType = "cyp_reg_no"
	// North Dakota Secretary of State control id.
	IdentifierTypeUsaNdControlId IdentifierType = "usa_nd_control_id"
	// Michigan corporate id.
	IdentifierTypeUsaMiCorpId IdentifierType = "usa_mi_corp_id"
	// Michigan corporate id (old format).
	IdentifierTypeUsaMiCorpIdOld IdentifierType = "usa_mi_corp_id_old"
	// Certificate Number
	IdentifierTypeUsaHiTradeNameCert IdentifierType = "usa_hi_trade_name_cert"
	// DC corponline entity number.
	IdentifierTypeUsaDcEntityNo                           IdentifierType = "usa_dc_entity_no"
	IdentifierTypeUsaVaOldRegId                           IdentifierType = "usa_va_old_reg_id"
	IdentifierTypeUsaConsolidatedScreeningListSyntheticId IdentifierType = "usa_consolidated_screening_list_synthetic_id"
	// Arkansas Secretary of State Filing No.
	IdentifierTypeUsaArFilingNo IdentifierType = "usa_ar_filing_no"
	// North Carolina SoS corporations UID
	IdentifierTypeUsaNcInternalId IdentifierType = "usa_nc_internal_id"
	// Nebraska corporate registry account number
	IdentifierTypeUsaNeAcctNo IdentifierType = "usa_ne_acct_no"
	// Nebraska registered agent id number
	IdentifierTypeUsaNeAgentId IdentifierType = "usa_ne_agent_id"
	// New Mexico Secretary of State Business No.
	IdentifierTypeUsaNmBusinessNo IdentifierType = "usa_nm_business_no"
	// New Mexico Secretary of State License Id
	IdentifierTypeUsaNmLicenseId IdentifierType = "usa_nm_license_id"
	// DC corporate registry file number
	IdentifierTypeUsaDcFileNo IdentifierType = "usa_dc_file_no"
	// Rhode Island filing entity identification number
	IdentifierTypeUsaRiFeiNo IdentifierType = "usa_ri_fei_no"
	// Hex digest of data that should be used for resolution (e.g., name=Sayari&registration_date=2000-01-01)
	IdentifierTypeInternalMd5 IdentifierType = "internal_md5"
	// Autoincrement corporation ID from the Missouri Corporate Registry
	IdentifierTypeUsaMoCorpId IdentifierType = "usa_mo_corp_id"
	// Wisconsin Department of Financial Institutions ID
	IdentifierTypeUsaWiDfiId IdentifierType = "usa_wi_dfi_id"
	// Identification code from Georgian MyGov companies
	IdentifierTypeGeoIdentificationCode IdentifierType = "geo_identification_code"
	// Personal number from Georgian MyGov companies
	IdentifierTypeGeoPersonalNumber IdentifierType = "geo_personal_number"
	// Georgian state registration number
	IdentifierTypeGeoStateRegistrationNumber IdentifierType = "geo_state_registration_number"
	// Identifier taken from document URL to resolve cases. Is slightly different for HTML vs PDF documents.
	IdentifierTypeMacRaemCaseUrlId IdentifierType = "mac_raem_case_url_id"
	// Romanian tax identification number for companies
	IdentifierTypeRouCompanyTin IdentifierType = "rou_company_tin"
	// Maryland Dpt. of Tax Business ID with prefix
	IdentifierTypeUsaMdDptTax IdentifierType = "usa_md_dpt_tax"
	// South Dakota Corporate ID
	IdentifierTypeUsaSdCorpId IdentifierType = "usa_sd_corp_id"
	// Honduras Tegucigalpa Matricula
	IdentifierTypeHndTegucigalpaMatricula IdentifierType = "hnd_tegucigalpa_matricula"
	// Identifier for Florida property parcels. It's a concetenation of county code and parcel id
	IdentifierTypeUsaFlPropertyId IdentifierType = "usa_fl_property_id"
	// Code unique to every parcel within the real property file
	IdentifierTypeUsaFlPropertyMpId IdentifierType = "usa_fl_property_mp_id"
	// Code the Department assigns to each parcel based on a statewide parcel coding system.
	IdentifierTypeUsaFlPropertyStateParId IdentifierType = "usa_fl_property_state_par_id"
	// Unique Registration Code in the Federal Register of Civil Society Organizations
	IdentifierTypeMexCluni IdentifierType = "mex_cluni"
	// Pennsylvania Department of State Business Entity ID Number
	IdentifierTypeUsaPaCorporateRegistryId IdentifierType = "usa_pa_corporate_registry_id"
	// Unique Pakistan National Taxpayer Number for Individuals (equivalent to Computerized National Identity Card number)
	IdentifierTypePakIndNtn IdentifierType = "pak_ind_ntn"
	// Unique Pakistan National Taxpayer Number for Companies and Associations of Persons
	IdentifierTypePakCoNtn IdentifierType = "pak_co_ntn"
	// Simple 1-up identifier from the Registro Nacional de Inversiones Extranjeras.
	IdentifierTypeMexRnie IdentifierType = "mex_rnie"
	// Pakistan NGO Registration Number
	IdentifierTypePakNgoRegNo IdentifierType = "pak_ngo_reg_no"
	// Iraqi Stock Exchange Symbol
	IdentifierTypeIraqiStockExchangeSymbol IdentifierType = "iraqi_stock_exchange_symbol"
	// Unique Identification Code for all legal and other entities engaged in business activities in Bulgaria
	IdentifierTypeBgrUic IdentifierType = "bgr_uic"
	// A hashed representation of a Bulgarian citizenship number
	IdentifierTypeBgrEgnHashed IdentifierType = "bgr_egn_hashed"
	// Enterprise number for South African companies
	IdentifierTypeSouthAfricaEnterpriseNumber IdentifierType = "south_africa_enterprise_number"
	// South African passport number
	IdentifierTypeSouthAfricaPassportNumber IdentifierType = "south_africa_passport_number"
	// Dutch Chamber of Commerce Number
	IdentifierTypeNldKvkNumber IdentifierType = "nld_kvk_number"
	// Dutch Chamber of Commerce Branch/Location Number
	IdentifierTypeNldKvkBranchNumber IdentifierType = "nld_kvk_branch_number"
	// Company/Person identifier from FINRA data
	IdentifierTypeUsaCentralRegistrationDepositoryNumber IdentifierType = "usa_central_registration_depository_number"
	// One format variation of the SEC file number associated with bdSECNumber in USA/finra_barred_relats
	IdentifierTypeUsaSecFileNumberBd IdentifierType = "usa_sec_file_number_bd"
	// China CNIPA Trademark
	IdentifierTypeChnCnipaTm IdentifierType = "chn_cnipa_tm"
	// Cyprus Passport
	IdentifierTypeCypPassport IdentifierType = "cyp_passport"
	// Entity ID from Cyprus infocredit
	IdentifierTypeCypInfocreditEntityId IdentifierType = "cyp_infocredit_entity_id"
	// Cyprus ID Card
	IdentifierTypeCypIdCard IdentifierType = "cyp_id_card"
	// Cyprus SSN
	IdentifierTypeCypSsn IdentifierType = "cyp_ssn"
	// Austrian Company Register Number
	IdentifierTypeAutFirmenbuchNo IdentifierType = "aut_firmenbuch_no"
	// Swedish personal identity number (Personnummer)
	IdentifierTypeSwePerIdNo IdentifierType = "swe_per_id_no"
	// Company code from Shanghai Stock Exchange
	IdentifierTypeChnShanghaiStockExchangeCompanyCode IdentifierType = "chn_shanghai_stock_exchange_company_code"
	// One format variation of the SEC file number associated with iaSECNumber in USA/finra_barred_relats
	IdentifierTypeUsaSecFileNumberIa IdentifierType = "usa_sec_file_number_ia"
	// Company SEC code from Shenzen stock exchange
	IdentifierTypeChnShenzenSecCode IdentifierType = "chn_shenzen_sec_code"
	// CT business ID
	IdentifierTypeUsaCtBusinessId IdentifierType = "usa_ct_business_id"
	// Ecuador cedula https://www.jybaro.com/blog/cedula-de-identidad-ecuatoriana/#:~:text=El%20Estado%20Ecuatoriano%2C%20a%20trav%C3%A9s,d%C3%ADgitos%20con%20la%20siguiente%20estructura%3A&text=En%20caso%20de%20extranjeros%2C%20el%20n%C3%BAmero%20es%2030
	IdentifierTypeEcuCedulaNumber IdentifierType = "ecu_cedula_number"
	// Hong Kong Stock Exchange Code
	IdentifierTypeHkgStockCode IdentifierType = "hkg_stock_code"
	// British Columbia Company Registration ID
	IdentifierTypeCanBcCompanyRegistrationId IdentifierType = "can_bc_company_registration_id"
	// British Columbia Extraprovincial Company Registration ID
	IdentifierTypeCanBcExtraprovincialRegistrationId IdentifierType = "can_bc_extraprovincial_registration_id"
	// Lithuanian Company Registration Code
	IdentifierTypeLtuCompanyRegistrationCode IdentifierType = "ltu_company_registration_code"
	// SEC private fund ID
	IdentifierTypeUsaSecPrivateFund IdentifierType = "usa_sec_private_fund"
	// Latvian Insolvency Proceedings ID Number
	IdentifierTypeLvaInsolvencyProceedingId IdentifierType = "lva_insolvency_proceeding_id"
	// Internal identifier for shareholders from CHN cninfo data
	IdentifierTypeChnCninfoInternalShareholderId IdentifierType = "chn_cninfo_internal_shareholder_id"
	IdentifierTypeEuid                           IdentifierType = "euid"
	// Finnish Business ID
	IdentifierTypeFinBusinessId IdentifierType = "fin_business_id"
	// Estonian Business Registry Code
	IdentifierTypeEstBusinessRegCode IdentifierType = "est_business_reg_code"
	// Committee on Uniform Securities Identification Procedures - identifies a North American financial security
	IdentifierTypeUsaCusipNumber IdentifierType = "usa_cusip_number"
	// Slovenian Company Registry ID Number
	IdentifierTypeSvnCoRegNo IdentifierType = "svn_co_reg_no"
	// Israeli Registrar of Companies company number
	IdentifierTypeIsrCompanyNumber  IdentifierType = "isr_company_number"
	IdentifierTypeRksBusinessNumber IdentifierType = "rks_business_number"
	// A fiscal number from the Kosovo company registry
	IdentifierTypeRksFiscalNumber IdentifierType = "rks_fiscal_number"
	// Company code from EDINET
	IdentifierTypeJpnEdinetCode IdentifierType = "jpn_edinet_code"
	// Belgium Enterprise Number
	IdentifierTypeBelEnterpriseNumber IdentifierType = "bel_enterprise_number"
	// Belgium Establishment Number
	IdentifierTypeBelEstablishmentNumber IdentifierType = "bel_establishment_number"
	// Australian financial services licence number
	IdentifierTypeAusAfsLicenceNumber IdentifierType = "aus_afs_licence_number"
	// Australian financial services authorized representative number
	IdentifierTypeAusAfsRepNumber IdentifierType = "aus_afs_rep_number"
	// Australian identifying number allocated to a Financial Adviser.
	IdentifierTypeAusAdvNumber IdentifierType = "aus_adv_number"
	// Australian credit licensee number.
	IdentifierTypeAusCreditLicenceNumber IdentifierType = "aus_credit_licence_number"
	// Australian identifying number allocated to a credit representative.
	IdentifierTypeAusCreditRepNumber IdentifierType = "aus_credit_rep_number"
	// Korean DART Central Identity Key
	IdentifierTypeDartCik IdentifierType = "dart_cik"
	// Ticker number for the Korean Stock Exchange
	IdentifierTypeKrxTickerCode IdentifierType = "krx_ticker_code"
	// Korean corporate registration number
	IdentifierTypeKorCorporateRegistrationNumber IdentifierType = "kor_corporate_registration_number"
	// Korean TIN for businesses
	IdentifierTypeKorBusinessTin IdentifierType = "kor_business_tin"
	// Estonian Personal Identification Code
	IdentifierTypeEstPersonalId IdentifierType = "est_personal_id"
	// Belize International Corporate Affairs Registry (BICAR) registration number
	IdentifierTypeBzeBicarRegNo IdentifierType = "bze_bicar_reg_no"
	// Account number for businesses on Chicago, IL business license registry
	IdentifierTypeUsaIlChicagoAccountNumber IdentifierType = "usa_il_chicago_account_number"
	// Company number from Cayman Islands Gazette
	IdentifierTypeCymCoNo IdentifierType = "cym_co_no"
	// Guernsey Corporate Registry Number
	IdentifierTypeGgyCorporateRegNumber IdentifierType = "ggy_corporate_reg_number"
	// Jersey Corporate Registry Number
	IdentifierTypeJeyCorporateRegNumber IdentifierType = "jey_corporate_reg_number"
	// Corp ID used in Cook Islands corporate registry
	IdentifierTypeCokCorpRegCorpid IdentifierType = "cok_corp_reg_corpid"
	// Corp ID used for officers in Cook Islands corporate registry
	IdentifierTypeCokCorpRegCorpofficerid IdentifierType = "cok_corp_reg_corpofficerid"
	// Registration number from Cook Islands corporate registry
	IdentifierTypeCokCorpRegNumber IdentifierType = "cok_corp_reg_number"
	// Internal ID from Mexican open contracts data
	IdentifierTypeMexOpenContractsInternalId IdentifierType = "mex_open_contracts_internal_id"
	// Gibraltar Corporate Registration Number
	IdentifierTypeGibCorpRegNumber IdentifierType = "gib_corp_reg_number"
	// Dominican Republic ONAPI registry number
	IdentifierTypeDomOnapiNum IdentifierType = "dom_onapi_num"
	// Russian Tourist Object Serial number in the Federal list
	IdentifierTypeRusTouristObj IdentifierType = "rus_tourist_obj"
	// Bill of lading number for trade data
	IdentifierTypeBillOfLading IdentifierType = "bill_of_lading"
	// Registration number for Taiwanese factories
	IdentifierTypeTwnFactoryRegistrationNumber IdentifierType = "twn_factory_registration_number"
	// Establishment permit case number for Taiwanese factories
	IdentifierTypeTwnFactoryEstablishmentPermitCaseNumber IdentifierType = "twn_factory_establishment_permit_case_number"
	// Kenya Person ID Number
	IdentifierTypeKenPersonalId IdentifierType = "ken_personal_id"
	// Unique number assigned by the DIAN for each import/export form
	IdentifierTypeColDianNumeroFormulario IdentifierType = "col_dian_numero_formulario"
	// Vanuatu Corporate Registry Number
	IdentifierTypeVutCorpRegNumber IdentifierType = "vut_corp_reg_number"
	// Legal code from Georgian MyGov companies
	IdentifierTypeGeoLegalCode IdentifierType = "geo_legal_code"
	// Myanmar corporate registry ID for companies
	IdentifierTypeMmrCorpId IdentifierType = "mmr_corp_id"
	// Myanmar Registration Number
	IdentifierTypeMmrRegNo IdentifierType = "mmr_reg_no"
	// Myanmar Prior Registration Number
	IdentifierTypeMmrPriorRegNo IdentifierType = "mmr_prior_reg_no"
	// Myanmar corporate registry ID for officers
	IdentifierTypeMmrOfficerId IdentifierType = "mmr_officer_id"
	// Armernian passport number
	IdentifierTypeArmPassportNumber IdentifierType = "arm_passport_number"
	// Ukrainian Registration Number
	IdentifierTypeUkrRegNum IdentifierType = "ukr_reg_num"
	// Validatis identification number
	IdentifierTypeValidatisNumber IdentifierType = "validatis_number"
	// Case number for Dubai land cases
	IdentifierTypeAreDubaiLandCaseNo IdentifierType = "are_dubai_land_case_no"
	// Angola company registration number
	IdentifierTypeAgoMatriculaNumber IdentifierType = "ago_matricula_number"
	// Angola taxpayer number
	IdentifierTypeAgoNifNumber IdentifierType = "ago_nif_number"
	// Myanmar Personal Identification Number
	IdentifierTypeMmrPersonalIdNo IdentifierType = "mmr_personal_id_no"
	// Belarus Registration Number
	IdentifierTypeBlrRegistrationNumber IdentifierType = "blr_registration_number"
	// Primary license number of Free Zone establishment in Dubai
	IdentifierTypeAerFreeZoneLicense IdentifierType = "aer_free_zone_license"
	// Registration number for Dubai free zone
	IdentifierTypeAerFreeZoneRegNo IdentifierType = "aer_free_zone_reg_no"
	// Company number for Canada NL Corporate Registry
	IdentifierTypeCanNlCorporateRegistry IdentifierType = "can_nl_corporate_registry"
	// Hex digest of Data Axle Infogroup ID
	IdentifierTypeCanDataAxleHash IdentifierType = "can_data_axle_hash"
	// ZAPST number used for shareholders and partners in Slovenia Corporate Registry
	IdentifierTypeSvnAjpesZapstNumber IdentifierType = "svn_ajpes_zapst_number"
	// CorpWatch Database ID
	IdentifierTypeUsaCorpwatchId IdentifierType = "usa_corpwatch_id"
	// Delaware File Number
	IdentifierTypeUsaDeFileNumber IdentifierType = "usa_de_file_number"
	// Isle of Man Company Number
	IdentifierTypeImnCompanyNumber IdentifierType = "imn_company_number"
	// Slovenian VAT number
	IdentifierTypeSvnVatNumber IdentifierType = "svn_vat_number"
	// Acuris Unique ID
	IdentifierTypeXxxAcurisId IdentifierType = "xxx_acuris_id"
	// Pakistan EGM ID
	IdentifierTypePakEgmId IdentifierType = "pak_egm_id"
	// Delaware Registered Agent ID
	IdentifierTypeUsaDeRegisteredAgentId IdentifierType = "usa_de_registered_agent_id"
	// ICIJ Offshore Database Internal ID
	IdentifierTypeIcijOffshoreInternalId IdentifierType = "icij_offshore_internal_id"
	// ICIJ Offshore Database Node ID
	IdentifierTypeIcijOffshoreNodeId IdentifierType = "icij_offshore_node_id"
	// Ecuador Branch ID
	IdentifierTypeEcuBranchId IdentifierType = "ecu_branch_id"
	// Palestine registration ID
	IdentifierTypePseRegistrationId IdentifierType = "pse_registration_id"
	// Serbia company registration number (matični broj)
	IdentifierTypeSrbMbNumber IdentifierType = "srb_mb_number"
	// Serbia tax ID number
	IdentifierTypeSrbPibNumber IdentifierType = "srb_pib_number"
	// Serbia branch ID
	IdentifierTypeSrbBranchId IdentifierType = "srb_branch_id"
	// Russia Bank Identification Code
	IdentifierTypeRusBikCode IdentifierType = "rus_bik_code"
	// Panadata Internal ID
	IdentifierTypePanadataInternalId IdentifierType = "panadata_internal_id"
	// San Marino Economic Operator Code
	IdentifierTypeSmrEconomicOperatorCode IdentifierType = "smr_economic_operator_code"
	// CT Internal ID
	IdentifierTypeUsaCtInternalId IdentifierType = "usa_ct_internal_id"
	// https://en.wikipedia.org/wiki/ISO_8000
	IdentifierTypeAlei IdentifierType = "alei"
	// Company number for Canada NS Corporate Registry
	IdentifierTypeCanNsCorporateRegistry IdentifierType = "can_ns_corporate_registry"
	// Somalian UBI Number
	IdentifierTypeSomUbi IdentifierType = "som_ubi"
	// Bahamas Tax Identification Number
	IdentifierTypeBhsTin IdentifierType = "bhs_tin"
	// Italy Economic and Administrative Repertory Number
	IdentifierTypeItaReaNumber IdentifierType = "ita_rea_number"
	// Mexico DENUE Unique ID
	IdentifierTypeMexDenueClee IdentifierType = "mex_denue_clee"
	// IHS Owner Code
	IdentifierTypeIhsOwnerCode IdentifierType = "ihs_owner_code"
	// Australia Consolidated Sanctions Reference ID
	IdentifierTypeAusConsolidatedSanctionsReference IdentifierType = "aus_consolidated_sanctions_reference"
	// Swiss SECO Sanction Number
	IdentifierTypeCheSecoSanctionNumber IdentifierType = "che_seco_sanction_number"
	// United Kingdom VAT Number
	IdentifierTypeGbrVatNo IdentifierType = "gbr_vat_no"
	// United Kingdom Confirmation Statement Company Number
	IdentifierTypeGbrCompanyNumber IdentifierType = "gbr_company_number"
	// Spain NIF Number
	IdentifierTypeEspNif IdentifierType = "esp_nif"
	// Unique Entity Identifier (SAM)
	IdentifierTypeUsaSamUeiNumber IdentifierType = "usa_sam_uei_number"
	// Identifier for corporations and trademarks in US Virgin Islands
	IdentifierTypeUsaUsviCorpNumber IdentifierType = "usa_usvi_corp_number"
	// Nicaragua Numero Unico
	IdentifierTypeNicNumeroUnico         IdentifierType = "nic_numero_unico"
	IdentifierTypeCriCedulaJuridica      IdentifierType = "cri_cedula_juridica"
	IdentifierTypeCriCedulaCitizenPerson IdentifierType = "cri_cedula_citizen_person"
	IdentifierTypeCriCedulaForeignPerson IdentifierType = "cri_cedula_foreign_person"
	IdentifierTypeBolMatricula           IdentifierType = "bol_matricula"
	IdentifierTypeBolOldMatricula        IdentifierType = "bol_old_matricula"
	// Nigerian Corporate Registry Internal ID
	IdentifierTypeNgaCrpRegInternalId IdentifierType = "nga_crp_reg_internal_id"
	// Nigerian Corporate Registry Registration Serial No
	IdentifierTypeNgaRegistrationSn IdentifierType = "nga_registration_sn"
	// Nigerian National Identification Number
	IdentifierTypeNgaNin IdentifierType = "nga_nin"
	// Nigerian Driver's License No.
	IdentifierTypeNgaDrivers IdentifierType = "nga_drivers"
	// Nigerian Tax ID number
	IdentifierTypeNgaTaxId IdentifierType = "nga_tax_id"
	// Dominica Business Registry Internal ID
	IdentifierTypeDmaBusinessRegistryInternalId IdentifierType = "dma_business_registry_internal_id"
	// The Commercial And Government Entity (CAGE) Code is a five-character ID number used extensively within the federal government, assigned by the Department of Defense's Defense Logistics Agency (DLA). The CAGE code provides a standardized method of identifying a given facility at a specific location. CAGE codes for entities located outside the United States are called NATO Commercial and Government Entity (NCAGE) codes. NCAGE codes are assigned internationally as part of the NATO Codification System (NCS). https://fawiki.fws.gov/display/SAM/Commercial+And+Government+Entity+%28CAGE%29+Code+Information
	IdentifierTypeCage IdentifierType = "cage"
	// Antigua & Barbuda Business Registry Internal ID
	IdentifierTypeAtgBusinessRegistryInternalId IdentifierType = "atg_business_registry_internal_id"
	// St. Lucia Business Registry Internal ID
	IdentifierTypeLcaBusinessRegistryInternalId IdentifierType = "lca_business_registry_internal_id"
	// Portuguese Trust Number
	IdentifierTypePrtTrustNumber IdentifierType = "prt_trust_number"
	// Portuguese VAT Number
	IdentifierTypePrtVatNumber IdentifierType = "prt_vat_number"
	// Morocco Passport Number
	IdentifierTypeMarPassport IdentifierType = "mar_passport"
	// Democratic Republic of the Congo Passport Number
	IdentifierTypeCodPassport IdentifierType = "cod_passport"
	// North Korea Passport Number
	IdentifierTypePrkPassport IdentifierType = "prk_passport"
	// Singapore Passport Number
	IdentifierTypeSgpPassport IdentifierType = "sgp_passport"
	// China Passport Number
	IdentifierTypeChnPassport IdentifierType = "chn_passport"
	// Oman Passport Number
	IdentifierTypeOmnPassport IdentifierType = "omn_passport"
	// Central African Republic Passport Number
	IdentifierTypeCafPassport IdentifierType = "caf_passport"
	// South Sudan Passport Number
	IdentifierTypeSsdPassport IdentifierType = "ssd_passport"
	// Trinbagonian Business Number
	IdentifierTypeTtoBizNumber IdentifierType = "tto_biz_number"
	// Turkey Tax Identifier
	IdentifierTypeTurTaxId IdentifierType = "tur_tax_id"
	// Bermuda Registrar of Companies Number
	IdentifierTypeBmuRegistrarOfCompaniesNumber IdentifierType = "bmu_registrar_of_companies_number"
	// Democratic Republic of the Congo RCCM Number
	IdentifierTypeCodRccmNumber IdentifierType = "cod_rccm_number"
	// Democratic Republic of the Congo RCCM OHAD Number
	IdentifierTypeCodRccmOhadaNumber IdentifierType = "cod_rccm_ohada_number"
	// Abu Dhabi Registration Authority Number
	IdentifierTypeAreRegAuthNumber IdentifierType = "are_reg_auth_number"
	// North Korea Shipment ID
	IdentifierTypePrkShipmentId IdentifierType = "prk_shipment_id"
	// Ecuador Importer ID
	IdentifierTypeEcuImporterId IdentifierType = "ecu_importer_id"
	// Ecuador Exporter ID
	IdentifierTypeEcuExporterId IdentifierType = "ecu_exporter_id"
	// Ecuador Shipment Reference Number
	IdentifierTypeEcuShipmentRefNo IdentifierType = "ecu_shipment_ref_no"
	// Unique identifier for entities in CRB Monitor data
	IdentifierTypeXxxCrbMonitorEntityId IdentifierType = "xxx_crb_monitor_entity_id"
	// Unique identifier for issuers in EDI Global data
	IdentifierTypeXxxEdiGlobalIssuerId IdentifierType = "xxx_edi_global_issuer_id"
	// Unique identifier for securities in EDI Global data
	IdentifierTypeXxxEdiGlobalSecurityId IdentifierType = "xxx_edi_global_security_id"
	// Unique identifier for imports and exports in Chile
	IdentifierTypeChlImportExportControlId IdentifierType = "chl_import_export_control_id"
	// Unique identifier Chilean imports
	IdentifierTypeChlImportManifestNumber IdentifierType = "chl_import_manifest_number"
	// Unique identifier for Chilean importers and exporters
	IdentifierTypeChlImporterExporterId IdentifierType = "chl_importer_exporter_id"
	// Unique identifier for Argentinian imports and exports
	IdentifierTypeArgImportExportId IdentifierType = "arg_import_export_id"
	// Single tax identification code in Argentina for any individual that initiates an economic activity (missing control digit)
	IdentifierTypeArgPartialCuit IdentifierType = "arg_partial_cuit"
	// Unique identifier for Panamanian importers and exporters
	IdentifierTypePanImporterExporterId IdentifierType = "pan_importer_exporter_id"
	// Declaration number for import and export shipments in Panama
	IdentifierTypePanDeclarationNumber IdentifierType = "pan_declaration_number"
	// Mexico Shipment Number
	IdentifierTypeMexShipmentNumber IdentifierType = "mex_shipment_number"
	// Internal ID for Costa Rica comexport data
	IdentifierTypeCriExp IdentifierType = "cri_exp"
	// Internal ID for Costa Rica comexport data
	IdentifierTypeCriImp IdentifierType = "cri_imp"
	// Internal ID for Costa Rica comexport data
	IdentifierTypeCriOpNo IdentifierType = "cri_op_no"
	// Colombia Número Único de Registro
	IdentifierTypeColNur IdentifierType = "col_nur"
	// Nepali Company Registration No. from National Information Technology Center
	IdentifierTypeNplCoRegNo             IdentifierType = "npl_co_reg_no"
	IdentifierTypeUsaSamExclusionsNumber IdentifierType = "usa_sam_exclusions_number"
	// National Provider Identifier (NPI) is a unique number for health care providers in the United States
	IdentifierTypeUsaNpiNumber IdentifierType = "usa_npi_number"
	// Unique Physician Identification Number (UPIN) is a unique six-character alpha-numeric identifier for health care providers in the United States discontinued in June 2007
	IdentifierTypeUsaUpinNumber           IdentifierType = "usa_upin_number"
	IdentifierTypeCanBcRegistrationNumber IdentifierType = "can_bc_registration_number"
	// See https://www.liveabout.com/what-is-the-canada-revenue-agency-cra-business-number-2947322
	IdentifierTypeCanBusinessNumber IdentifierType = "can_business_number"
	// China Securities Regulatory Commission Code / 证券代码
	IdentifierTypeChnCsrcNo IdentifierType = "chn_csrc_no"
	// Minnesota Secretary of State Unique ID
	IdentifierTypeUsaMnMasterId IdentifierType = "usa_mn_master_id"
	// Minnesota Secretary of State Filing Number
	IdentifierTypeUsaMnFilingNumber IdentifierType = "usa_mn_filing_number"
	// Business ID from Indianan Corporate Registry
	IdentifierTypeUsaInBizNo IdentifierType = "usa_in_biz_no"
	// Vessel ID from Lloyd's Maritime Data
	IdentifierTypeLloydsInternalVesselId IdentifierType = "lloyds_internal_vessel_id"
	// Entity ID from Lloyd's Maritime Data
	IdentifierTypeLloydsInternalEntityId IdentifierType = "lloyds_internal_entity_id"
	// USA New Hampshire Business ID
	IdentifierTypeUsaNhBusinessId IdentifierType = "usa_nh_business_id"
	// UK Sanctions List Unique ID
	IdentifierTypeGbrUkSanctionsId IdentifierType = "gbr_uk_sanctions_id"
	// Montana Secretary of State Business Entity Number
	IdentifierTypeMontanaSosInternalEntityId IdentifierType = "montana_sos_internal_entity_id"
	// Massachusetts Secretary of State Company ID
	IdentifierTypeUsaMassSosCompanyId IdentifierType = "usa_mass_sos_company_id"
	// China Resident Identity Number
	IdentifierTypeChnResidentIdNumber IdentifierType = "chn_resident_id_number"
	// New Jersey Department of Treasury Business ID
	IdentifierTypeUsaNjBusinessId IdentifierType = "usa_nj_business_id"
	// Utah Secretary of State Business Entity Number
	IdentifierTypeUtahCorporateRegistryInternalEntityNumber IdentifierType = "utah_corporate_registry_internal_entity_number"
	// Louisiana Secretary of State Business Entity Number
	IdentifierTypeUsaLaSosId IdentifierType = "usa_la_sos_id"
	// Alabama Secretary of State Business Entity ID
	IdentifierTypeUsaAlSosId IdentifierType = "usa_al_sos_id"
	// South Carolina Secretary of State Corporation ID
	IdentifierTypeUsaScCorpId IdentifierType = "usa_sc_corp_id"
	// USA state of Kentucky organization number assigned to businesses
	IdentifierTypeUsaKyOrgNo IdentifierType = "usa_ky_org_no"
	// Illinois Secretary of State File Number
	IdentifierTypeUsaIlFileNumber IdentifierType = "usa_il_file_number"
	// Unique identifier used for companies in Indonesia UBO data
	IdentifierTypeIdnTransactionNumber IdentifierType = "idn_transaction_number"
	// Unique identifier used for owners in Indonesia UBO data
	IdentifierTypeIdnUboOwnerId IdentifierType = "idn_ubo_owner_id"
	// Swedish Organisationnummer with 2 digit prefix
	IdentifierTypeSweTaxNumber IdentifierType = "swe_tax_number"
	// Panadata Internal SID
	IdentifierTypePanadataInternalSid IdentifierType = "panadata_internal_sid"
	// Paraguay Company Tax ID
	IdentifierTypePryTaxId IdentifierType = "pry_tax_id"
	// Paraguay Shipment Number
	IdentifierTypePryShipmentNumber IdentifierType = "pry_shipment_number"
	// Unique identifier for Tokyo Stock Exchange companies
	IdentifierTypeTokyoStockExchangeNo IdentifierType = "tokyo_stock_exchange_no"
	// Sweden FI Identification Number
	IdentifierTypeSweFiId IdentifierType = "swe_fi_id"
	// Germany BaFin-ID
	IdentifierTypeDeuBafinId IdentifierType = "deu_bafin_id"
	// Global Trade Internal Shipment ID
	IdentifierTypeGlobalTradeInternalShipmentId IdentifierType = "global_trade_internal_shipment_id"
	// China Vessel Inspection Registration Number
	IdentifierTypeChinaVesselInspectionRegistration IdentifierType = "china_vessel_inspection_registration"
	// China Vessel Registration Number
	IdentifierTypeChinaVesselRegistration IdentifierType = "china_vessel_registration"
	// CCS Vessel Registration Number
	IdentifierTypeCcsRegistration IdentifierType = "ccs_registration"
	// USA OTI Organization Number
	IdentifierTypeUsaOtiId IdentifierType = "usa_oti_id"
	// Stock Market Ticker
	IdentifierTypeStockTicker IdentifierType = "stock_ticker"
	// Canada Manitoba Registry Number
	IdentifierTypeCanMbRegistry IdentifierType = "can_mb_registry"
	// Quebec Enterprise Number
	IdentifierTypeQuebecEnterpriseNumber IdentifierType = "quebec_enterprise_number"
	// Ontario Corporation Number
	IdentifierTypeOntarioCorporationNumber IdentifierType = "ontario_corporation_number"
	// Saskatchewan Registry Number
	IdentifierTypeSaskatchewanRegistryNumber IdentifierType = "saskatchewan_registry_number"
	// Alberta Corporation Number
	IdentifierTypeAlbertaCorporationNumber IdentifierType = "alberta_corporation_number"
	// Brazil Shipment Number
	IdentifierTypeBraShipmentNumber IdentifierType = "bra_shipment_number"
	// Ukraine NAZK sanctions company Internal ID
	IdentifierTypeUkrSanctionsNazkCompanyInternalId IdentifierType = "ukr_sanctions_nazk_company_internal_id"
	// Ukraine NAZK sanctions person Internal ID
	IdentifierTypeUkrSanctionsNazkPersonInternalId IdentifierType = "ukr_sanctions_nazk_person_internal_id"
	// Ethereum address
	IdentifierTypeEthereumAddress IdentifierType = "ethereum_address"
	// Dash address
	IdentifierTypeDashAddress IdentifierType = "dash_address"
	// Zcash address
	IdentifierTypeZcashAddress IdentifierType = "zcash_address"
	// Serial Number assigned to a Trademark application by USPTO
	IdentifierTypeUsaUsptoSerialNumber IdentifierType = "usa_uspto_serial_number"
	// USPTO Registration Number
	IdentifierTypeUsaUsptoRegNo IdentifierType = "usa_uspto_reg_no"
	// USPTO Foreign Application Number
	IdentifierTypeUsaUsptoForeignApplicationNo IdentifierType = "usa_uspto_foreign_application_no"
	// USPTO Foreign Registration Number
	IdentifierTypeUsaUsptoForeignRegNo IdentifierType = "usa_uspto_foreign_reg_no"
	// International registration number assigned by the International Bureau of WIPO.
	IdentifierTypeWipoIntlRegNo IdentifierType = "wipo_intl_reg_no"
	// International reference number assigned by the International Bureau of WIPO.
	IdentifierTypeWipoIntlRefNo IdentifierType = "wipo_intl_ref_no"
)

func NewIdentifierTypeFromString(s string) (IdentifierType, error) {
	switch s {
	case "cn_tianyancha_company_id":
		return IdentifierTypeCnTianyanchaCompanyId, nil
	case "cn_tianyancha_human_id":
		return IdentifierTypeCnTianyanchaHumanId, nil
	case "cn_unified_social_credit_code":
		return IdentifierTypeCnUnifiedSocialCreditCode, nil
	case "cn_registration_number":
		return IdentifierTypeCnRegistrationNumber, nil
	case "cn_organization_code":
		return IdentifierTypeCnOrganizationCode, nil
	case "cn_qichacha_internal_id":
		return IdentifierTypeCnQichachaInternalId, nil
	case "cn_hk_cr_number":
		return IdentifierTypeCnHkCrNumber, nil
	case "cn_hk_filing_number":
		return IdentifierTypeCnHkFilingNumber, nil
	case "bh_cr_number":
		return IdentifierTypeBhCrNumber, nil
	case "bh_cr_number_and_branch":
		return IdentifierTypeBhCrNumberAndBranch, nil
	case "jo_internal_id":
		return IdentifierTypeJoInternalId, nil
	case "jo_national_institution_number":
		return IdentifierTypeJoNationalInstitutionNumber, nil
	case "jo_institution_number":
		return IdentifierTypeJoInstitutionNumber, nil
	case "malta_company_number":
		return IdentifierTypeMaltaCompanyNumber, nil
	case "malta_national_id":
		return IdentifierTypeMaltaNationalId, nil
	case "malta_accountancy_registration_id":
		return IdentifierTypeMaltaAccountancyRegistrationId, nil
	case "uk_company_number":
		return IdentifierTypeUkCompanyNumber, nil
	case "uk_firm_reference_number":
		return IdentifierTypeUkFirmReferenceNumber, nil
	case "uk_person_number":
		return IdentifierTypeUkPersonNumber, nil
	case "mx_rfc_person":
		return IdentifierTypeMxRfcPerson, nil
	case "mx_curp":
		return IdentifierTypeMxCurp, nil
	case "mx_rfc_company":
		return IdentifierTypeMxRfcCompany, nil
	case "mx_office_fme":
		return IdentifierTypeMxOfficeFme, nil
	case "ru_inn":
		return IdentifierTypeRuInn, nil
	case "ru_ogrn":
		return IdentifierTypeRuOgrn, nil
	case "ven_saren_internal_employer_number":
		return IdentifierTypeVenSarenInternalEmployerNumber, nil
	case "bra_cnpj":
		return IdentifierTypeBraCnpj, nil
	case "ven_rif":
		return IdentifierTypeVenRif, nil
	case "ven_cedula_number":
		return IdentifierTypeVenCedulaNumber, nil
	case "mdv_registration_number":
		return IdentifierTypeMdvRegistrationNumber, nil
	case "ind_director_id_number":
		return IdentifierTypeIndDirectorIdNumber, nil
	case "ind_permanent_account_number":
		return IdentifierTypeIndPermanentAccountNumber, nil
	case "ind_corporate_id_number":
		return IdentifierTypeIndCorporateIdNumber, nil
	case "kaz_tin":
		return IdentifierTypeKazTin, nil
	case "kaz_bin":
		return IdentifierTypeKazBin, nil
	case "kaz_state_reg_num":
		return IdentifierTypeKazStateRegNum, nil
	case "kaz_okpo_num":
		return IdentifierTypeKazOkpoNum, nil
	case "kaz_identifier":
		return IdentifierTypeKazIdentifier, nil
	case "rks_registration_number":
		return IdentifierTypeRksRegistrationNumber, nil
	case "grc_gemi_number":
		return IdentifierTypeGrcGemiNumber, nil
	case "ven_rnc_number":
		return IdentifierTypeVenRncNumber, nil
	case "usa_va_reg_id":
		return IdentifierTypeUsaVaRegId, nil
	case "usa_ny_reg_id":
		return IdentifierTypeUsaNyRegId, nil
	case "usa_fei_number":
		return IdentifierTypeUsaFeiNumber, nil
	case "ukr_moj_id":
		return IdentifierTypeUkrMojId, nil
	case "mus_reg_id":
		return IdentifierTypeMusRegId, nil
	case "uk_title_number":
		return IdentifierTypeUkTitleNumber, nil
	case "mng_reg_number":
		return IdentifierTypeMngRegNumber, nil
	case "mne_reg_number":
		return IdentifierTypeMneRegNumber, nil
	case "kgz_reg_number":
		return IdentifierTypeKgzRegNumber, nil
	case "cn_importexport_code":
		return IdentifierTypeCnImportexportCode, nil
	case "prk_entity_id":
		return IdentifierTypePrkEntityId, nil
	case "prk_registration_id":
		return IdentifierTypePrkRegistrationId, nil
	case "yugoslav_master_citizen_num":
		return IdentifierTypeYugoslavMasterCitizenNum, nil
	case "bfa_entity_id":
		return IdentifierTypeBfaEntityId, nil
	case "afghan_tin_number":
		return IdentifierTypeAfghanTinNumber, nil
	case "afg_business_license":
		return IdentifierTypeAfgBusinessLicense, nil
	case "mdg_nif_number":
		return IdentifierTypeMdgNifNumber, nil
	case "mdg_stat_number":
		return IdentifierTypeMdgStatNumber, nil
	case "mdg_rcs_number":
		return IdentifierTypeMdgRcsNumber, nil
	case "lva_personal_code":
		return IdentifierTypeLvaPersonalCode, nil
	case "iban":
		return IdentifierTypeIban, nil
	case "lva_reg_number":
		return IdentifierTypeLvaRegNumber, nil
	case "twn_unified_number":
		return IdentifierTypeTwnUnifiedNumber, nil
	case "lux_rcs_number":
		return IdentifierTypeLuxRcsNumber, nil
	case "mkd_embs_number":
		return IdentifierTypeMkdEmbsNumber, nil
	case "mkd_embs_branch_number":
		return IdentifierTypeMkdEmbsBranchNumber, nil
	case "mda_idno_number":
		return IdentifierTypeMdaIdnoNumber, nil
	case "ury_ruc_number":
		return IdentifierTypeUryRucNumber, nil
	case "che_uid_number":
		return IdentifierTypeCheUidNumber, nil
	case "slv_commercial_reg_number":
		return IdentifierTypeSlvCommercialRegNumber, nil
	case "slv_uid_number":
		return IdentifierTypeSlvUidNumber, nil
	case "mato_grosso_legal_id":
		return IdentifierTypeMatoGrossoLegalId, nil
	case "lei":
		return IdentifierTypeLei, nil
	case "vat":
		return IdentifierTypeVat, nil
	case "ita_fiscal_code":
		return IdentifierTypeItaFiscalCode, nil
	case "rio_de_janeiro_legal_id":
		return IdentifierTypeRioDeJaneiroLegalId, nil
	case "isl_tin_number":
		return IdentifierTypeIslTinNumber, nil
	case "lao_enterprise_number":
		return IdentifierTypeLaoEnterpriseNumber, nil
	case "svk_ico_number":
		return IdentifierTypeSvkIcoNumber, nil
	case "khm_tin_number":
		return IdentifierTypeKhmTinNumber, nil
	case "cze_ico_number":
		return IdentifierTypeCzeIcoNumber, nil
	case "irn_national_id":
		return IdentifierTypeIrnNationalId, nil
	case "ecu_ruc_number":
		return IdentifierTypeEcuRucNumber, nil
	case "grc_vat_number":
		return IdentifierTypeGrcVatNumber, nil
	case "can_corporation_number":
		return IdentifierTypeCanCorporationNumber, nil
	case "can_cra_program_account_number":
		return IdentifierTypeCanCraProgramAccountNumber, nil
	case "mne_pib":
		return IdentifierTypeMnePib, nil
	case "chl_cedula_number":
		return IdentifierTypeChlCedulaNumber, nil
	case "bra_case_number":
		return IdentifierTypeBraCaseNumber, nil
	case "ind_llpin":
		return IdentifierTypeIndLlpin, nil
	case "ind_fcrn":
		return IdentifierTypeIndFcrn, nil
	case "bmu_registration_number":
		return IdentifierTypeBmuRegistrationNumber, nil
	case "bra_cpf_number":
		return IdentifierTypeBraCpfNumber, nil
	case "irn_national_number":
		return IdentifierTypeIrnNationalNumber, nil
	case "chn_customs_registration_code":
		return IdentifierTypeChnCustomsRegistrationCode, nil
	case "lie_public_reg_no":
		return IdentifierTypeLiePublicRegNo, nil
	case "cn_tax_identification_number":
		return IdentifierTypeCnTaxIdentificationNumber, nil
	case "mac_registration_no":
		return IdentifierTypeMacRegistrationNo, nil
	case "siger_internal_id":
		return IdentifierTypeSigerInternalId, nil
	case "lbn_national_id":
		return IdentifierTypeLbnNationalId, nil
	case "int_maritime_org_id":
		return IdentifierTypeIntMaritimeOrgId, nil
	case "ru_ship_register_id":
		return IdentifierTypeRuShipRegisterId, nil
	case "sayari_internal_identifier":
		return IdentifierTypeSayariInternalIdentifier, nil
	case "aruba_chamber_of_commerce_id":
		return IdentifierTypeArubaChamberOfCommerceId, nil
	case "imo_no":
		return IdentifierTypeImoNo, nil
	case "vgb_company_number":
		return IdentifierTypeVgbCompanyNumber, nil
	case "yem_coc_registration_number":
		return IdentifierTypeYemCocRegistrationNumber, nil
	case "mys_id_card_no":
		return IdentifierTypeMysIdCardNo, nil
	case "mys_company_reg_no":
		return IdentifierTypeMysCompanyRegNo, nil
	case "pry_ruc_number":
		return IdentifierTypePryRucNumber, nil
	case "pry_cedula_number":
		return IdentifierTypePryCedulaNumber, nil
	case "pry_old_ruc_number":
		return IdentifierTypePryOldRucNumber, nil
	case "rccm_no":
		return IdentifierTypeRccmNo, nil
	case "bra_rg_number":
		return IdentifierTypeBraRgNumber, nil
	case "ninea_no":
		return IdentifierTypeNineaNo, nil
	case "alb_tax_id":
		return IdentifierTypeAlbTaxId, nil
	case "alb_registration_number":
		return IdentifierTypeAlbRegistrationNumber, nil
	case "arg_igj_number":
		return IdentifierTypeArgIgjNumber, nil
	case "arg_dni_number":
		return IdentifierTypeArgDniNumber, nil
	case "arg_cuit_number":
		return IdentifierTypeArgCuitNumber, nil
	case "arg_cuil_number":
		return IdentifierTypeArgCuilNumber, nil
	case "arg_cdi_number":
		return IdentifierTypeArgCdiNumber, nil
	case "bih_mbs_number":
		return IdentifierTypeBihMbsNumber, nil
	case "bih_jib_number":
		return IdentifierTypeBihJibNumber, nil
	case "bih_customs_number":
		return IdentifierTypeBihCustomsNumber, nil
	case "usa_puerto_rico_register_number":
		return IdentifierTypeUsaPuertoRicoRegisterNumber, nil
	case "dji_rcs_number":
		return IdentifierTypeDjiRcsNumber, nil
	case "cri_cedula_number":
		return IdentifierTypeCriCedulaNumber, nil
	case "moz_id_number":
		return IdentifierTypeMozIdNumber, nil
	case "moz_nuit_person":
		return IdentifierTypeMozNuitPerson, nil
	case "moz_nuit_co":
		return IdentifierTypeMozNuitCo, nil
	case "moz_passport":
		return IdentifierTypeMozPassport, nil
	case "moz_dire_no":
		return IdentifierTypeMozDireNo, nil
	case "moz_voter_no":
		return IdentifierTypeMozVoterNo, nil
	case "moz_nuel_no":
		return IdentifierTypeMozNuelNo, nil
	case "irq_voter_id":
		return IdentifierTypeIrqVoterId, nil
	case "jor_voter_card_no":
		return IdentifierTypeJorVoterCardNo, nil
	case "jor_id_no":
		return IdentifierTypeJorIdNo, nil
	case "per_ruc_no":
		return IdentifierTypePerRucNo, nil
	case "ecu_company_id":
		return IdentifierTypeEcuCompanyId, nil
	case "usa_ny_dos_id":
		return IdentifierTypeUsaNyDosId, nil
	case "bfa_rccm_number":
		return IdentifierTypeBfaRccmNumber, nil
	case "fl_prop_folio":
		return IdentifierTypeFlPropFolio, nil
	case "qat_qfc_number":
		return IdentifierTypeQatQfcNumber, nil
	case "grc_afm_number":
		return IdentifierTypeGrcAfmNumber, nil
	case "vnm_enterprise_code":
		return IdentifierTypeVnmEnterpriseCode, nil
	case "tha_registration_no":
		return IdentifierTypeThaRegistrationNo, nil
	case "vnm_citizenship_no":
		return IdentifierTypeVnmCitizenshipNo, nil
	case "vnm_person_id_no":
		return IdentifierTypeVnmPersonIdNo, nil
	case "arg_lib_civica_number":
		return IdentifierTypeArgLibCivicaNumber, nil
	case "arg_lib_enrolamiento_number":
		return IdentifierTypeArgLibEnrolamientoNumber, nil
	case "nzl_nzbn":
		return IdentifierTypeNzlNzbn, nil
	case "nzl_co_no":
		return IdentifierTypeNzlCoNo, nil
	case "usa_ofac_sdn_number":
		return IdentifierTypeUsaOfacSdnNumber, nil
	case "swift_bic_code":
		return IdentifierTypeSwiftBicCode, nil
	case "duns_number":
		return IdentifierTypeDunsNumber, nil
	case "bitcoin_address":
		return IdentifierTypeBitcoinAddress, nil
	case "litecoin_address":
		return IdentifierTypeLitecoinAddress, nil
	case "rus_micex_code":
		return IdentifierTypeRusMicexCode, nil
	case "tx_prop_id":
		return IdentifierTypeTxPropId, nil
	case "tx_pacs_id":
		return IdentifierTypeTxPacsId, nil
	case "tx_land_id":
		return IdentifierTypeTxLandId, nil
	case "png_ipa_reg_id":
		return IdentifierTypePngIpaRegId, nil
	case "gtm_nit_number":
		return IdentifierTypeGtmNitNumber, nil
	case "gtm_cui_number":
		return IdentifierTypeGtmCuiNumber, nil
	case "dom_rnc":
		return IdentifierTypeDomRnc, nil
	case "qat_cr_number":
		return IdentifierTypeQatCrNumber, nil
	case "isin":
		return IdentifierTypeIsin, nil
	case "usa_fl_document_no":
		return IdentifierTypeUsaFlDocumentNo, nil
	case "usa_fl_fic_name_reg_no":
		return IdentifierTypeUsaFlFicNameRegNo, nil
	case "bra_servidor_portal":
		return IdentifierTypeBraServidorPortal, nil
	case "bra_codigo_da_unidade_organizacional":
		return IdentifierTypeBraCodigoDaUnidadeOrganizacional, nil
	case "usa_sec_cik_number":
		return IdentifierTypeUsaSecCikNumber, nil
	case "hr_mbs":
		return IdentifierTypeHrMbs, nil
	case "hr_oib":
		return IdentifierTypeHrOib, nil
	case "slv_numero_identificacion_tributaria":
		return IdentifierTypeSlvNumeroIdentificacionTributaria, nil
	case "slv_mcas":
		return IdentifierTypeSlvMcas, nil
	case "aus_company_number":
		return IdentifierTypeAusCompanyNumber, nil
	case "aus_business_number":
		return IdentifierTypeAusBusinessNumber, nil
	case "deu_registernummer":
		return IdentifierTypeDeuRegisternummer, nil
	case "usa_irs_ein":
		return IdentifierTypeUsaIrsEin, nil
	case "hong_kong_case_number":
		return IdentifierTypeHongKongCaseNumber, nil
	case "irn_coc_internal_id":
		return IdentifierTypeIrnCocInternalId, nil
	case "pan_folio_ficha_id":
		return IdentifierTypePanFolioFichaId, nil
	case "pan_cedula_number":
		return IdentifierTypePanCedulaNumber, nil
	case "xxx_cedar_rose_uid":
		return IdentifierTypeXxxCedarRoseUid, nil
	case "xxx_rccm":
		return IdentifierTypeXxxRccm, nil
	case "vnm_dichvuthongtin_internal_id":
		return IdentifierTypeVnmDichvuthongtinInternalId, nil
	case "xxx_intel_internal_id":
		return IdentifierTypeXxxIntelInternalId, nil
	case "usa_washington_state_ubi":
		return IdentifierTypeUsaWashingtonStateUbi, nil
	case "nga_registration_number":
		return IdentifierTypeNgaRegistrationNumber, nil
	case "ng_check_internal_id":
		return IdentifierTypeNgCheckInternalId, nil
	case "nyc_bbl":
		return IdentifierTypeNycBbl, nil
	case "nyc_crfn":
		return IdentifierTypeNycCrfn, nil
	case "tx_corp_file_num":
		return IdentifierTypeTxCorpFileNum, nil
	case "tx_tax_id":
		return IdentifierTypeTxTaxId, nil
	case "usa_ga_business_id":
		return IdentifierTypeUsaGaBusinessId, nil
	case "phl_pse_id":
		return IdentifierTypePhlPseId, nil
	case "phl_sec_id":
		return IdentifierTypePhlSecId, nil
	case "phl_tin":
		return IdentifierTypePhlTin, nil
	case "afg_passport":
		return IdentifierTypeAfgPassport, nil
	case "irn_passport":
		return IdentifierTypeIrnPassport, nil
	case "kwt_passport":
		return IdentifierTypeKwtPassport, nil
	case "lby_passport":
		return IdentifierTypeLbyPassport, nil
	case "pak_passport":
		return IdentifierTypePakPassport, nil
	case "rus_passport":
		return IdentifierTypeRusPassport, nil
	case "tun_passport":
		return IdentifierTypeTunPassport, nil
	case "yem_passport":
		return IdentifierTypeYemPassport, nil
	case "un_sanction_prn":
		return IdentifierTypeUnSanctionPrn, nil
	case "eu_sanction_rn":
		return IdentifierTypeEuSanctionRn, nil
	case "ca_lp_file_num":
		return IdentifierTypeCaLpFileNum, nil
	case "tx_entity_filing_num":
		return IdentifierTypeTxEntityFilingNum, nil
	case "usa_social_security_number":
		return IdentifierTypeUsaSocialSecurityNumber, nil
	case "usa_wy_party_id":
		return IdentifierTypeUsaWyPartyId, nil
	case "usa_wy_filing_id":
		return IdentifierTypeUsaWyFilingId, nil
	case "usa_wy_internal_filing_id":
		return IdentifierTypeUsaWyInternalFilingId, nil
	case "usa_wy_filing_num":
		return IdentifierTypeUsaWyFilingNum, nil
	case "usa_or_regno":
		return IdentifierTypeUsaOrRegno, nil
	case "usa_nv_corpno":
		return IdentifierTypeUsaNvCorpno, nil
	case "usa_nv_bizid":
		return IdentifierTypeUsaNvBizid, nil
	case "prk_internal_trade_id":
		return IdentifierTypePrkInternalTradeId, nil
	case "lso_corpreg_id":
		return IdentifierTypeLsoCorpregId, nil
	case "uzb_tin_number":
		return IdentifierTypeUzbTinNumber, nil
	case "ca_corporate_id_num":
		return IdentifierTypeCaCorporateIdNum, nil
	case "gbr_hm_treasury_sanction_group_id":
		return IdentifierTypeGbrHmTreasurySanctionGroupId, nil
	case "gbr_ipo_trademark_reg_no":
		return IdentifierTypeGbrIpoTrademarkRegNo, nil
	case "usa_ga_control_no":
		return IdentifierTypeUsaGaControlNo, nil
	case "hnd_coc_company_registration_number":
		return IdentifierTypeHndCocCompanyRegistrationNumber, nil
	case "mne_property_uid":
		return IdentifierTypeMnePropertyUid, nil
	case "phl_bnn":
		return IdentifierTypePhlBnn, nil
	case "rou_company_registration_code":
		return IdentifierTypeRouCompanyRegistrationCode, nil
	case "rou_identity_card":
		return IdentifierTypeRouIdentityCard, nil
	case "rou_personal_id_number":
		return IdentifierTypeRouPersonalIdNumber, nil
	case "cub_cod":
		return IdentifierTypeCubCod, nil
	case "fl_prop_folio_dade":
		return IdentifierTypeFlPropFolioDade, nil
	case "per_dni_no":
		return IdentifierTypePerDniNo, nil
	case "per_carne_de_extranjeria":
		return IdentifierTypePerCarneDeExtranjeria, nil
	case "fra_siren":
		return IdentifierTypeFraSiren, nil
	case "fra_siret":
		return IdentifierTypeFraSiret, nil
	case "cze_file_number":
		return IdentifierTypeCzeFileNumber, nil
	case "esp_borme_reg_id":
		return IdentifierTypeEspBormeRegId, nil
	case "mex_tm_no":
		return IdentifierTypeMexTmNo, nil
	case "mus_file_no":
		return IdentifierTypeMusFileNo, nil
	case "col_nit_no":
		return IdentifierTypeColNitNo, nil
	case "jpn_corporate_no":
		return IdentifierTypeJpnCorporateNo, nil
	case "usa_cgac_agency_code":
		return IdentifierTypeUsaCgacAgencyCode, nil
	case "usa_govt_agency_id":
		return IdentifierTypeUsaGovtAgencyId, nil
	case "usa_govt_office_id":
		return IdentifierTypeUsaGovtOfficeId, nil
	case "col_cedula_no":
		return IdentifierTypeColCedulaNo, nil
	case "col_secop_no":
		return IdentifierTypeColSecopNo, nil
	case "jordan_company_no":
		return IdentifierTypeJordanCompanyNo, nil
	case "dnk_cvr":
		return IdentifierTypeDnkCvr, nil
	case "dnk_production_unit_no":
		return IdentifierTypeDnkProductionUnitNo, nil
	case "dnk_entity":
		return IdentifierTypeDnkEntity, nil
	case "nor_org_no":
		return IdentifierTypeNorOrgNo, nil
	case "swe_org_no":
		return IdentifierTypeSweOrgNo, nil
	case "usa_co_reg_no":
		return IdentifierTypeUsaCoRegNo, nil
	case "usa_ia_corp_no":
		return IdentifierTypeUsaIaCorpNo, nil
	case "sgp_unqiue_entity_number":
		return IdentifierTypeSgpUnqiueEntityNumber, nil
	case "usa_ak_entity_no":
		return IdentifierTypeUsaAkEntityNo, nil
	case "usa_oh_charter_num":
		return IdentifierTypeUsaOhCharterNum, nil
	case "tur_istanbul_coc_reg_no":
		return IdentifierTypeTurIstanbulCocRegNo, nil
	case "tur_mersis_number":
		return IdentifierTypeTurMersisNumber, nil
	case "che_ch_id_number":
		return IdentifierTypeCheChIdNumber, nil
	case "are_difc_reg_no":
		return IdentifierTypeAreDifcRegNo, nil
	case "idn_tax_id":
		return IdentifierTypeIdnTaxId, nil
	case "usa_vt_biz_id":
		return IdentifierTypeUsaVtBizId, nil
	case "usa_wv_reg_id":
		return IdentifierTypeUsaWvRegId, nil
	case "usa_ms_biz_id":
		return IdentifierTypeUsaMsBizId, nil
	case "usa_id_control_no":
		return IdentifierTypeUsaIdControlNo, nil
	case "usa_id_party_id":
		return IdentifierTypeUsaIdPartyId, nil
	case "irn_coc_internal_id_cardno":
		return IdentifierTypeIrnCocInternalIdCardno, nil
	case "usa_az_corp_reg_entity_num":
		return IdentifierTypeUsaAzCorpRegEntityNum, nil
	case "usa_ok_filing_no":
		return IdentifierTypeUsaOkFilingNo, nil
	case "usa_tn_control_no":
		return IdentifierTypeUsaTnControlNo, nil
	case "usa_tn_party_id":
		return IdentifierTypeUsaTnPartyId, nil
	case "usa_ks_biz_id":
		return IdentifierTypeUsaKsBizId, nil
	case "usa_hi_corporate_registry_id":
		return IdentifierTypeUsaHiCorporateRegistryId, nil
	case "usa_hi_corporate_registry_person_id":
		return IdentifierTypeUsaHiCorporateRegistryPersonId, nil
	case "pol_krs_number":
		return IdentifierTypePolKrsNumber, nil
	case "pol_regon_number":
		return IdentifierTypePolRegonNumber, nil
	case "pol_nip_number":
		return IdentifierTypePolNipNumber, nil
	case "pol_rejestr_person_id":
		return IdentifierTypePolRejestrPersonId, nil
	case "arm_vat_no":
		return IdentifierTypeArmVatNo, nil
	case "arm_enterprise_code":
		return IdentifierTypeArmEnterpriseCode, nil
	case "arm_registration_no":
		return IdentifierTypeArmRegistrationNo, nil
	case "usa_me_corp_id":
		return IdentifierTypeUsaMeCorpId, nil
	case "cyp_reg_no":
		return IdentifierTypeCypRegNo, nil
	case "usa_nd_control_id":
		return IdentifierTypeUsaNdControlId, nil
	case "usa_mi_corp_id":
		return IdentifierTypeUsaMiCorpId, nil
	case "usa_mi_corp_id_old":
		return IdentifierTypeUsaMiCorpIdOld, nil
	case "usa_hi_trade_name_cert":
		return IdentifierTypeUsaHiTradeNameCert, nil
	case "usa_dc_entity_no":
		return IdentifierTypeUsaDcEntityNo, nil
	case "usa_va_old_reg_id":
		return IdentifierTypeUsaVaOldRegId, nil
	case "usa_consolidated_screening_list_synthetic_id":
		return IdentifierTypeUsaConsolidatedScreeningListSyntheticId, nil
	case "usa_ar_filing_no":
		return IdentifierTypeUsaArFilingNo, nil
	case "usa_nc_internal_id":
		return IdentifierTypeUsaNcInternalId, nil
	case "usa_ne_acct_no":
		return IdentifierTypeUsaNeAcctNo, nil
	case "usa_ne_agent_id":
		return IdentifierTypeUsaNeAgentId, nil
	case "usa_nm_business_no":
		return IdentifierTypeUsaNmBusinessNo, nil
	case "usa_nm_license_id":
		return IdentifierTypeUsaNmLicenseId, nil
	case "usa_dc_file_no":
		return IdentifierTypeUsaDcFileNo, nil
	case "usa_ri_fei_no":
		return IdentifierTypeUsaRiFeiNo, nil
	case "internal_md5":
		return IdentifierTypeInternalMd5, nil
	case "usa_mo_corp_id":
		return IdentifierTypeUsaMoCorpId, nil
	case "usa_wi_dfi_id":
		return IdentifierTypeUsaWiDfiId, nil
	case "geo_identification_code":
		return IdentifierTypeGeoIdentificationCode, nil
	case "geo_personal_number":
		return IdentifierTypeGeoPersonalNumber, nil
	case "geo_state_registration_number":
		return IdentifierTypeGeoStateRegistrationNumber, nil
	case "mac_raem_case_url_id":
		return IdentifierTypeMacRaemCaseUrlId, nil
	case "rou_company_tin":
		return IdentifierTypeRouCompanyTin, nil
	case "usa_md_dpt_tax":
		return IdentifierTypeUsaMdDptTax, nil
	case "usa_sd_corp_id":
		return IdentifierTypeUsaSdCorpId, nil
	case "hnd_tegucigalpa_matricula":
		return IdentifierTypeHndTegucigalpaMatricula, nil
	case "usa_fl_property_id":
		return IdentifierTypeUsaFlPropertyId, nil
	case "usa_fl_property_mp_id":
		return IdentifierTypeUsaFlPropertyMpId, nil
	case "usa_fl_property_state_par_id":
		return IdentifierTypeUsaFlPropertyStateParId, nil
	case "mex_cluni":
		return IdentifierTypeMexCluni, nil
	case "usa_pa_corporate_registry_id":
		return IdentifierTypeUsaPaCorporateRegistryId, nil
	case "pak_ind_ntn":
		return IdentifierTypePakIndNtn, nil
	case "pak_co_ntn":
		return IdentifierTypePakCoNtn, nil
	case "mex_rnie":
		return IdentifierTypeMexRnie, nil
	case "pak_ngo_reg_no":
		return IdentifierTypePakNgoRegNo, nil
	case "iraqi_stock_exchange_symbol":
		return IdentifierTypeIraqiStockExchangeSymbol, nil
	case "bgr_uic":
		return IdentifierTypeBgrUic, nil
	case "bgr_egn_hashed":
		return IdentifierTypeBgrEgnHashed, nil
	case "south_africa_enterprise_number":
		return IdentifierTypeSouthAfricaEnterpriseNumber, nil
	case "south_africa_passport_number":
		return IdentifierTypeSouthAfricaPassportNumber, nil
	case "nld_kvk_number":
		return IdentifierTypeNldKvkNumber, nil
	case "nld_kvk_branch_number":
		return IdentifierTypeNldKvkBranchNumber, nil
	case "usa_central_registration_depository_number":
		return IdentifierTypeUsaCentralRegistrationDepositoryNumber, nil
	case "usa_sec_file_number_bd":
		return IdentifierTypeUsaSecFileNumberBd, nil
	case "chn_cnipa_tm":
		return IdentifierTypeChnCnipaTm, nil
	case "cyp_passport":
		return IdentifierTypeCypPassport, nil
	case "cyp_infocredit_entity_id":
		return IdentifierTypeCypInfocreditEntityId, nil
	case "cyp_id_card":
		return IdentifierTypeCypIdCard, nil
	case "cyp_ssn":
		return IdentifierTypeCypSsn, nil
	case "aut_firmenbuch_no":
		return IdentifierTypeAutFirmenbuchNo, nil
	case "swe_per_id_no":
		return IdentifierTypeSwePerIdNo, nil
	case "chn_shanghai_stock_exchange_company_code":
		return IdentifierTypeChnShanghaiStockExchangeCompanyCode, nil
	case "usa_sec_file_number_ia":
		return IdentifierTypeUsaSecFileNumberIa, nil
	case "chn_shenzen_sec_code":
		return IdentifierTypeChnShenzenSecCode, nil
	case "usa_ct_business_id":
		return IdentifierTypeUsaCtBusinessId, nil
	case "ecu_cedula_number":
		return IdentifierTypeEcuCedulaNumber, nil
	case "hkg_stock_code":
		return IdentifierTypeHkgStockCode, nil
	case "can_bc_company_registration_id":
		return IdentifierTypeCanBcCompanyRegistrationId, nil
	case "can_bc_extraprovincial_registration_id":
		return IdentifierTypeCanBcExtraprovincialRegistrationId, nil
	case "ltu_company_registration_code":
		return IdentifierTypeLtuCompanyRegistrationCode, nil
	case "usa_sec_private_fund":
		return IdentifierTypeUsaSecPrivateFund, nil
	case "lva_insolvency_proceeding_id":
		return IdentifierTypeLvaInsolvencyProceedingId, nil
	case "chn_cninfo_internal_shareholder_id":
		return IdentifierTypeChnCninfoInternalShareholderId, nil
	case "euid":
		return IdentifierTypeEuid, nil
	case "fin_business_id":
		return IdentifierTypeFinBusinessId, nil
	case "est_business_reg_code":
		return IdentifierTypeEstBusinessRegCode, nil
	case "usa_cusip_number":
		return IdentifierTypeUsaCusipNumber, nil
	case "svn_co_reg_no":
		return IdentifierTypeSvnCoRegNo, nil
	case "isr_company_number":
		return IdentifierTypeIsrCompanyNumber, nil
	case "rks_business_number":
		return IdentifierTypeRksBusinessNumber, nil
	case "rks_fiscal_number":
		return IdentifierTypeRksFiscalNumber, nil
	case "jpn_edinet_code":
		return IdentifierTypeJpnEdinetCode, nil
	case "bel_enterprise_number":
		return IdentifierTypeBelEnterpriseNumber, nil
	case "bel_establishment_number":
		return IdentifierTypeBelEstablishmentNumber, nil
	case "aus_afs_licence_number":
		return IdentifierTypeAusAfsLicenceNumber, nil
	case "aus_afs_rep_number":
		return IdentifierTypeAusAfsRepNumber, nil
	case "aus_adv_number":
		return IdentifierTypeAusAdvNumber, nil
	case "aus_credit_licence_number":
		return IdentifierTypeAusCreditLicenceNumber, nil
	case "aus_credit_rep_number":
		return IdentifierTypeAusCreditRepNumber, nil
	case "dart_cik":
		return IdentifierTypeDartCik, nil
	case "krx_ticker_code":
		return IdentifierTypeKrxTickerCode, nil
	case "kor_corporate_registration_number":
		return IdentifierTypeKorCorporateRegistrationNumber, nil
	case "kor_business_tin":
		return IdentifierTypeKorBusinessTin, nil
	case "est_personal_id":
		return IdentifierTypeEstPersonalId, nil
	case "bze_bicar_reg_no":
		return IdentifierTypeBzeBicarRegNo, nil
	case "usa_il_chicago_account_number":
		return IdentifierTypeUsaIlChicagoAccountNumber, nil
	case "cym_co_no":
		return IdentifierTypeCymCoNo, nil
	case "ggy_corporate_reg_number":
		return IdentifierTypeGgyCorporateRegNumber, nil
	case "jey_corporate_reg_number":
		return IdentifierTypeJeyCorporateRegNumber, nil
	case "cok_corp_reg_corpid":
		return IdentifierTypeCokCorpRegCorpid, nil
	case "cok_corp_reg_corpofficerid":
		return IdentifierTypeCokCorpRegCorpofficerid, nil
	case "cok_corp_reg_number":
		return IdentifierTypeCokCorpRegNumber, nil
	case "mex_open_contracts_internal_id":
		return IdentifierTypeMexOpenContractsInternalId, nil
	case "gib_corp_reg_number":
		return IdentifierTypeGibCorpRegNumber, nil
	case "dom_onapi_num":
		return IdentifierTypeDomOnapiNum, nil
	case "rus_tourist_obj":
		return IdentifierTypeRusTouristObj, nil
	case "bill_of_lading":
		return IdentifierTypeBillOfLading, nil
	case "twn_factory_registration_number":
		return IdentifierTypeTwnFactoryRegistrationNumber, nil
	case "twn_factory_establishment_permit_case_number":
		return IdentifierTypeTwnFactoryEstablishmentPermitCaseNumber, nil
	case "ken_personal_id":
		return IdentifierTypeKenPersonalId, nil
	case "col_dian_numero_formulario":
		return IdentifierTypeColDianNumeroFormulario, nil
	case "vut_corp_reg_number":
		return IdentifierTypeVutCorpRegNumber, nil
	case "geo_legal_code":
		return IdentifierTypeGeoLegalCode, nil
	case "mmr_corp_id":
		return IdentifierTypeMmrCorpId, nil
	case "mmr_reg_no":
		return IdentifierTypeMmrRegNo, nil
	case "mmr_prior_reg_no":
		return IdentifierTypeMmrPriorRegNo, nil
	case "mmr_officer_id":
		return IdentifierTypeMmrOfficerId, nil
	case "arm_passport_number":
		return IdentifierTypeArmPassportNumber, nil
	case "ukr_reg_num":
		return IdentifierTypeUkrRegNum, nil
	case "validatis_number":
		return IdentifierTypeValidatisNumber, nil
	case "are_dubai_land_case_no":
		return IdentifierTypeAreDubaiLandCaseNo, nil
	case "ago_matricula_number":
		return IdentifierTypeAgoMatriculaNumber, nil
	case "ago_nif_number":
		return IdentifierTypeAgoNifNumber, nil
	case "mmr_personal_id_no":
		return IdentifierTypeMmrPersonalIdNo, nil
	case "blr_registration_number":
		return IdentifierTypeBlrRegistrationNumber, nil
	case "aer_free_zone_license":
		return IdentifierTypeAerFreeZoneLicense, nil
	case "aer_free_zone_reg_no":
		return IdentifierTypeAerFreeZoneRegNo, nil
	case "can_nl_corporate_registry":
		return IdentifierTypeCanNlCorporateRegistry, nil
	case "can_data_axle_hash":
		return IdentifierTypeCanDataAxleHash, nil
	case "svn_ajpes_zapst_number":
		return IdentifierTypeSvnAjpesZapstNumber, nil
	case "usa_corpwatch_id":
		return IdentifierTypeUsaCorpwatchId, nil
	case "usa_de_file_number":
		return IdentifierTypeUsaDeFileNumber, nil
	case "imn_company_number":
		return IdentifierTypeImnCompanyNumber, nil
	case "svn_vat_number":
		return IdentifierTypeSvnVatNumber, nil
	case "xxx_acuris_id":
		return IdentifierTypeXxxAcurisId, nil
	case "pak_egm_id":
		return IdentifierTypePakEgmId, nil
	case "usa_de_registered_agent_id":
		return IdentifierTypeUsaDeRegisteredAgentId, nil
	case "icij_offshore_internal_id":
		return IdentifierTypeIcijOffshoreInternalId, nil
	case "icij_offshore_node_id":
		return IdentifierTypeIcijOffshoreNodeId, nil
	case "ecu_branch_id":
		return IdentifierTypeEcuBranchId, nil
	case "pse_registration_id":
		return IdentifierTypePseRegistrationId, nil
	case "srb_mb_number":
		return IdentifierTypeSrbMbNumber, nil
	case "srb_pib_number":
		return IdentifierTypeSrbPibNumber, nil
	case "srb_branch_id":
		return IdentifierTypeSrbBranchId, nil
	case "rus_bik_code":
		return IdentifierTypeRusBikCode, nil
	case "panadata_internal_id":
		return IdentifierTypePanadataInternalId, nil
	case "smr_economic_operator_code":
		return IdentifierTypeSmrEconomicOperatorCode, nil
	case "usa_ct_internal_id":
		return IdentifierTypeUsaCtInternalId, nil
	case "alei":
		return IdentifierTypeAlei, nil
	case "can_ns_corporate_registry":
		return IdentifierTypeCanNsCorporateRegistry, nil
	case "som_ubi":
		return IdentifierTypeSomUbi, nil
	case "bhs_tin":
		return IdentifierTypeBhsTin, nil
	case "ita_rea_number":
		return IdentifierTypeItaReaNumber, nil
	case "mex_denue_clee":
		return IdentifierTypeMexDenueClee, nil
	case "ihs_owner_code":
		return IdentifierTypeIhsOwnerCode, nil
	case "aus_consolidated_sanctions_reference":
		return IdentifierTypeAusConsolidatedSanctionsReference, nil
	case "che_seco_sanction_number":
		return IdentifierTypeCheSecoSanctionNumber, nil
	case "gbr_vat_no":
		return IdentifierTypeGbrVatNo, nil
	case "gbr_company_number":
		return IdentifierTypeGbrCompanyNumber, nil
	case "esp_nif":
		return IdentifierTypeEspNif, nil
	case "usa_sam_uei_number":
		return IdentifierTypeUsaSamUeiNumber, nil
	case "usa_usvi_corp_number":
		return IdentifierTypeUsaUsviCorpNumber, nil
	case "nic_numero_unico":
		return IdentifierTypeNicNumeroUnico, nil
	case "cri_cedula_juridica":
		return IdentifierTypeCriCedulaJuridica, nil
	case "cri_cedula_citizen_person":
		return IdentifierTypeCriCedulaCitizenPerson, nil
	case "cri_cedula_foreign_person":
		return IdentifierTypeCriCedulaForeignPerson, nil
	case "bol_matricula":
		return IdentifierTypeBolMatricula, nil
	case "bol_old_matricula":
		return IdentifierTypeBolOldMatricula, nil
	case "nga_crp_reg_internal_id":
		return IdentifierTypeNgaCrpRegInternalId, nil
	case "nga_registration_sn":
		return IdentifierTypeNgaRegistrationSn, nil
	case "nga_nin":
		return IdentifierTypeNgaNin, nil
	case "nga_drivers":
		return IdentifierTypeNgaDrivers, nil
	case "nga_tax_id":
		return IdentifierTypeNgaTaxId, nil
	case "dma_business_registry_internal_id":
		return IdentifierTypeDmaBusinessRegistryInternalId, nil
	case "cage":
		return IdentifierTypeCage, nil
	case "atg_business_registry_internal_id":
		return IdentifierTypeAtgBusinessRegistryInternalId, nil
	case "lca_business_registry_internal_id":
		return IdentifierTypeLcaBusinessRegistryInternalId, nil
	case "prt_trust_number":
		return IdentifierTypePrtTrustNumber, nil
	case "prt_vat_number":
		return IdentifierTypePrtVatNumber, nil
	case "mar_passport":
		return IdentifierTypeMarPassport, nil
	case "cod_passport":
		return IdentifierTypeCodPassport, nil
	case "prk_passport":
		return IdentifierTypePrkPassport, nil
	case "sgp_passport":
		return IdentifierTypeSgpPassport, nil
	case "chn_passport":
		return IdentifierTypeChnPassport, nil
	case "omn_passport":
		return IdentifierTypeOmnPassport, nil
	case "caf_passport":
		return IdentifierTypeCafPassport, nil
	case "ssd_passport":
		return IdentifierTypeSsdPassport, nil
	case "tto_biz_number":
		return IdentifierTypeTtoBizNumber, nil
	case "tur_tax_id":
		return IdentifierTypeTurTaxId, nil
	case "bmu_registrar_of_companies_number":
		return IdentifierTypeBmuRegistrarOfCompaniesNumber, nil
	case "cod_rccm_number":
		return IdentifierTypeCodRccmNumber, nil
	case "cod_rccm_ohada_number":
		return IdentifierTypeCodRccmOhadaNumber, nil
	case "are_reg_auth_number":
		return IdentifierTypeAreRegAuthNumber, nil
	case "prk_shipment_id":
		return IdentifierTypePrkShipmentId, nil
	case "ecu_importer_id":
		return IdentifierTypeEcuImporterId, nil
	case "ecu_exporter_id":
		return IdentifierTypeEcuExporterId, nil
	case "ecu_shipment_ref_no":
		return IdentifierTypeEcuShipmentRefNo, nil
	case "xxx_crb_monitor_entity_id":
		return IdentifierTypeXxxCrbMonitorEntityId, nil
	case "xxx_edi_global_issuer_id":
		return IdentifierTypeXxxEdiGlobalIssuerId, nil
	case "xxx_edi_global_security_id":
		return IdentifierTypeXxxEdiGlobalSecurityId, nil
	case "chl_import_export_control_id":
		return IdentifierTypeChlImportExportControlId, nil
	case "chl_import_manifest_number":
		return IdentifierTypeChlImportManifestNumber, nil
	case "chl_importer_exporter_id":
		return IdentifierTypeChlImporterExporterId, nil
	case "arg_import_export_id":
		return IdentifierTypeArgImportExportId, nil
	case "arg_partial_cuit":
		return IdentifierTypeArgPartialCuit, nil
	case "pan_importer_exporter_id":
		return IdentifierTypePanImporterExporterId, nil
	case "pan_declaration_number":
		return IdentifierTypePanDeclarationNumber, nil
	case "mex_shipment_number":
		return IdentifierTypeMexShipmentNumber, nil
	case "cri_exp":
		return IdentifierTypeCriExp, nil
	case "cri_imp":
		return IdentifierTypeCriImp, nil
	case "cri_op_no":
		return IdentifierTypeCriOpNo, nil
	case "col_nur":
		return IdentifierTypeColNur, nil
	case "npl_co_reg_no":
		return IdentifierTypeNplCoRegNo, nil
	case "usa_sam_exclusions_number":
		return IdentifierTypeUsaSamExclusionsNumber, nil
	case "usa_npi_number":
		return IdentifierTypeUsaNpiNumber, nil
	case "usa_upin_number":
		return IdentifierTypeUsaUpinNumber, nil
	case "can_bc_registration_number":
		return IdentifierTypeCanBcRegistrationNumber, nil
	case "can_business_number":
		return IdentifierTypeCanBusinessNumber, nil
	case "chn_csrc_no":
		return IdentifierTypeChnCsrcNo, nil
	case "usa_mn_master_id":
		return IdentifierTypeUsaMnMasterId, nil
	case "usa_mn_filing_number":
		return IdentifierTypeUsaMnFilingNumber, nil
	case "usa_in_biz_no":
		return IdentifierTypeUsaInBizNo, nil
	case "lloyds_internal_vessel_id":
		return IdentifierTypeLloydsInternalVesselId, nil
	case "lloyds_internal_entity_id":
		return IdentifierTypeLloydsInternalEntityId, nil
	case "usa_nh_business_id":
		return IdentifierTypeUsaNhBusinessId, nil
	case "gbr_uk_sanctions_id":
		return IdentifierTypeGbrUkSanctionsId, nil
	case "montana_sos_internal_entity_id":
		return IdentifierTypeMontanaSosInternalEntityId, nil
	case "usa_mass_sos_company_id":
		return IdentifierTypeUsaMassSosCompanyId, nil
	case "chn_resident_id_number":
		return IdentifierTypeChnResidentIdNumber, nil
	case "usa_nj_business_id":
		return IdentifierTypeUsaNjBusinessId, nil
	case "utah_corporate_registry_internal_entity_number":
		return IdentifierTypeUtahCorporateRegistryInternalEntityNumber, nil
	case "usa_la_sos_id":
		return IdentifierTypeUsaLaSosId, nil
	case "usa_al_sos_id":
		return IdentifierTypeUsaAlSosId, nil
	case "usa_sc_corp_id":
		return IdentifierTypeUsaScCorpId, nil
	case "usa_ky_org_no":
		return IdentifierTypeUsaKyOrgNo, nil
	case "usa_il_file_number":
		return IdentifierTypeUsaIlFileNumber, nil
	case "idn_transaction_number":
		return IdentifierTypeIdnTransactionNumber, nil
	case "idn_ubo_owner_id":
		return IdentifierTypeIdnUboOwnerId, nil
	case "swe_tax_number":
		return IdentifierTypeSweTaxNumber, nil
	case "panadata_internal_sid":
		return IdentifierTypePanadataInternalSid, nil
	case "pry_tax_id":
		return IdentifierTypePryTaxId, nil
	case "pry_shipment_number":
		return IdentifierTypePryShipmentNumber, nil
	case "tokyo_stock_exchange_no":
		return IdentifierTypeTokyoStockExchangeNo, nil
	case "swe_fi_id":
		return IdentifierTypeSweFiId, nil
	case "deu_bafin_id":
		return IdentifierTypeDeuBafinId, nil
	case "global_trade_internal_shipment_id":
		return IdentifierTypeGlobalTradeInternalShipmentId, nil
	case "china_vessel_inspection_registration":
		return IdentifierTypeChinaVesselInspectionRegistration, nil
	case "china_vessel_registration":
		return IdentifierTypeChinaVesselRegistration, nil
	case "ccs_registration":
		return IdentifierTypeCcsRegistration, nil
	case "usa_oti_id":
		return IdentifierTypeUsaOtiId, nil
	case "stock_ticker":
		return IdentifierTypeStockTicker, nil
	case "can_mb_registry":
		return IdentifierTypeCanMbRegistry, nil
	case "quebec_enterprise_number":
		return IdentifierTypeQuebecEnterpriseNumber, nil
	case "ontario_corporation_number":
		return IdentifierTypeOntarioCorporationNumber, nil
	case "saskatchewan_registry_number":
		return IdentifierTypeSaskatchewanRegistryNumber, nil
	case "alberta_corporation_number":
		return IdentifierTypeAlbertaCorporationNumber, nil
	case "bra_shipment_number":
		return IdentifierTypeBraShipmentNumber, nil
	case "ukr_sanctions_nazk_company_internal_id":
		return IdentifierTypeUkrSanctionsNazkCompanyInternalId, nil
	case "ukr_sanctions_nazk_person_internal_id":
		return IdentifierTypeUkrSanctionsNazkPersonInternalId, nil
	case "ethereum_address":
		return IdentifierTypeEthereumAddress, nil
	case "dash_address":
		return IdentifierTypeDashAddress, nil
	case "zcash_address":
		return IdentifierTypeZcashAddress, nil
	case "usa_uspto_serial_number":
		return IdentifierTypeUsaUsptoSerialNumber, nil
	case "usa_uspto_reg_no":
		return IdentifierTypeUsaUsptoRegNo, nil
	case "usa_uspto_foreign_application_no":
		return IdentifierTypeUsaUsptoForeignApplicationNo, nil
	case "usa_uspto_foreign_reg_no":
		return IdentifierTypeUsaUsptoForeignRegNo, nil
	case "wipo_intl_reg_no":
		return IdentifierTypeWipoIntlRegNo, nil
	case "wipo_intl_ref_no":
		return IdentifierTypeWipoIntlRefNo, nil
	}
	var t IdentifierType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IdentifierType) Ptr() *IdentifierType {
	return &i
}

// Language enums are normalized representations of languages. Taken from https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes
type Language string

const (
	// Afar
	LanguageAa Language = "aa"
	// Abkhazian
	LanguageAb Language = "ab"
	// Afrikaans
	LanguageAf Language = "af"
	// Akan
	LanguageAk Language = "ak"
	// Albanian
	LanguageSq Language = "sq"
	// Amharic
	LanguageAm Language = "am"
	// Arabic
	LanguageAr Language = "ar"
	// Aragonese
	LanguageAn Language = "an"
	// Armenian
	LanguageHy Language = "hy"
	// Assamese
	LanguageAs Language = "as"
	// Avaric
	LanguageAv Language = "av"
	// Avestan
	LanguageAe Language = "ae"
	// Aymara
	LanguageAy Language = "ay"
	// Azerbaijani
	LanguageAz Language = "az"
	// Bashkir
	LanguageBa Language = "ba"
	// Bambara
	LanguageBm Language = "bm"
	// Basque
	LanguageEu Language = "eu"
	// Belarusian
	LanguageBe Language = "be"
	// Bengali
	LanguageBn Language = "bn"
	// Bihari languages
	LanguageBh Language = "bh"
	// Bislama
	LanguageBi Language = "bi"
	// Bosnian
	LanguageBs Language = "bs"
	// Breton
	LanguageBr Language = "br"
	// Bulgarian
	LanguageBg Language = "bg"
	// Burmese
	LanguageMy Language = "my"
	// Catalan; Valencian
	LanguageCa Language = "ca"
	// Chamorro
	LanguageCh Language = "ch"
	// Chechen
	LanguageCe Language = "ce"
	// Chinese
	LanguageZh Language = "zh"
	// Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic
	LanguageCu Language = "cu"
	// Chuvash
	LanguageCv Language = "cv"
	// Cornish
	LanguageKw Language = "kw"
	// Corsican
	LanguageCo Language = "co"
	// Cree
	LanguageCr Language = "cr"
	// Czech
	LanguageCs Language = "cs"
	// Danish
	LanguageDa Language = "da"
	// Divehi; Dhivehi; Maldivian
	LanguageDv Language = "dv"
	// Dutch; Flemish
	LanguageNl Language = "nl"
	// Dzongkha
	LanguageDz Language = "dz"
	// English
	LanguageEn Language = "en"
	// Esperanto
	LanguageEo Language = "eo"
	// Estonian
	LanguageEt Language = "et"
	// Ewe
	LanguageEe Language = "ee"
	// Faroese
	LanguageFo Language = "fo"
	// Fijian
	LanguageFj Language = "fj"
	// Finnish
	LanguageFi Language = "fi"
	// French
	LanguageFr Language = "fr"
	// Western Frisian
	LanguageFy Language = "fy"
	// Fulah
	LanguageFf Language = "ff"
	// Georgian
	LanguageKa Language = "ka"
	// German
	LanguageDe Language = "de"
	// Gaelic; Scottish Gaelic
	LanguageGd Language = "gd"
	// Irish
	LanguageGa Language = "ga"
	// Galician
	LanguageGl Language = "gl"
	// Manx
	LanguageGv Language = "gv"
	// Greek, Modern (1453-)
	LanguageEl Language = "el"
	// Guarani
	LanguageGn Language = "gn"
	// Gujarati
	LanguageGu Language = "gu"
	// Haitian; Haitian Creole
	LanguageHt Language = "ht"
	// Hausa
	LanguageHa Language = "ha"
	// Hebrew
	LanguageHe Language = "he"
	// Herero
	LanguageHz Language = "hz"
	// Hindi
	LanguageHi Language = "hi"
	// Hiri Motu
	LanguageHo Language = "ho"
	// Croatian
	LanguageHr Language = "hr"
	// Hungarian
	LanguageHu Language = "hu"
	// Igbo
	LanguageIg Language = "ig"
	// Icelandic
	LanguageIs Language = "is"
	// Ido
	LanguageIo Language = "io"
	// Sichuan Yi; Nuosu
	LanguageIi Language = "ii"
	// Inuktitut
	LanguageIu Language = "iu"
	// Interlingue; Occidental
	LanguageIe Language = "ie"
	// Interlingua (International Auxiliary Language Association)
	LanguageIa Language = "ia"
	// Indonesian
	LanguageId Language = "id"
	// Inupiaq
	LanguageIk Language = "ik"
	// Italian
	LanguageIt Language = "it"
	// Javanese
	LanguageJv Language = "jv"
	// Japanese
	LanguageJa Language = "ja"
	// Kalaallisut; Greenlandic
	LanguageKl Language = "kl"
	// Kannada
	LanguageKn Language = "kn"
	// Kashmiri
	LanguageKs Language = "ks"
	// Kanuri
	LanguageKr Language = "kr"
	// Kazakh
	LanguageKk Language = "kk"
	// Central Khmer
	LanguageKm Language = "km"
	// Kikuyu; Gikuyu
	LanguageKi Language = "ki"
	// Kinyarwanda
	LanguageRw Language = "rw"
	// Kirghiz; Kyrgyz
	LanguageKy Language = "ky"
	// Komi
	LanguageKv Language = "kv"
	// Kongo
	LanguageKg Language = "kg"
	// Korean
	LanguageKo Language = "ko"
	// Kuanyama; Kwanyama
	LanguageKj Language = "kj"
	// Kurdish
	LanguageKu Language = "ku"
	// Lao
	LanguageLo Language = "lo"
	// Latin
	LanguageLa Language = "la"
	// Latvian
	LanguageLv Language = "lv"
	// Limburgan; Limburger; Limburgish
	LanguageLi Language = "li"
	// Lingala
	LanguageLn Language = "ln"
	// Lithuanian
	LanguageLt Language = "lt"
	// Luxembourgish; Letzeburgesch
	LanguageLb Language = "lb"
	// Luba-Katanga
	LanguageLu Language = "lu"
	// Ganda
	LanguageLg Language = "lg"
	// Macedonian
	LanguageMk Language = "mk"
	// Marshallese
	LanguageMh Language = "mh"
	// Malayalam
	LanguageMl Language = "ml"
	// Maori
	LanguageMi Language = "mi"
	// Marathi
	LanguageMr Language = "mr"
	// Malay
	LanguageMs Language = "ms"
	// Malagasy
	LanguageMg Language = "mg"
	// Maltese
	LanguageMt Language = "mt"
	// Mongolian
	LanguageMn Language = "mn"
	// Nauru
	LanguageNa Language = "na"
	// Navajo; Navaho
	LanguageNv Language = "nv"
	// Ndebele, South; South Ndebele
	LanguageNr Language = "nr"
	// Ndebele, North; North Ndebele
	LanguageNd Language = "nd"
	// Ndonga
	LanguageNg Language = "ng"
	// Nepali
	LanguageNe Language = "ne"
	// Norwegian Nynorsk; Nynorsk, Norwegian
	LanguageNn Language = "nn"
	// Bokmål, Norwegian; Norwegian Bokmål
	LanguageNb Language = "nb"
	// Norwegian
	LanguageNo Language = "no"
	// Chichewa; Chewa; Nyanja
	LanguageNy Language = "ny"
	// Occitan (post 1500); Provençal
	LanguageOc Language = "oc"
	// Ojibwa
	LanguageOj Language = "oj"
	// Oriya
	LanguageOr Language = "or"
	// Oromo
	LanguageOm Language = "om"
	// Ossetian; Ossetic
	LanguageOs Language = "os"
	// Panjabi; Punjabi
	LanguagePa Language = "pa"
	// Persian
	LanguageFa Language = "fa"
	// Pali
	LanguagePi Language = "pi"
	// Polish
	LanguagePl Language = "pl"
	// Portuguese
	LanguagePt Language = "pt"
	// Pushto; Pashto
	LanguagePs Language = "ps"
	// Quechua
	LanguageQu Language = "qu"
	// Romansh
	LanguageRm Language = "rm"
	// Romanian; Moldavian; Moldovan
	LanguageRo Language = "ro"
	// Rundi
	LanguageRn Language = "rn"
	// Russian
	LanguageRu Language = "ru"
	// Sango
	LanguageSg Language = "sg"
	// Sanskrit
	LanguageSa Language = "sa"
	// Sinhala; Sinhalese
	LanguageSi Language = "si"
	// Slovak
	LanguageSk Language = "sk"
	// Slovenian
	LanguageSl Language = "sl"
	// Northern Sami
	LanguageSe Language = "se"
	// Samoan
	LanguageSm Language = "sm"
	// Shona
	LanguageSn Language = "sn"
	// Sindhi
	LanguageSd Language = "sd"
	// Somali
	LanguageSo Language = "so"
	// Sotho, Southern
	LanguageSt Language = "st"
	// Spanish; Castilian
	LanguageEs Language = "es"
	// Sardinian
	LanguageSc Language = "sc"
	// Serbian
	LanguageSr Language = "sr"
	// Swati
	LanguageSs Language = "ss"
	// Sundanese
	LanguageSu Language = "su"
	// Swahili
	LanguageSw Language = "sw"
	// Swedish
	LanguageSv Language = "sv"
	// Tahitian
	LanguageTy Language = "ty"
	// Tamil
	LanguageTa Language = "ta"
	// Tatar
	LanguageTt Language = "tt"
	// Telugu
	LanguageTe Language = "te"
	// Tajik
	LanguageTg Language = "tg"
	// Tagalog
	LanguageTl Language = "tl"
	// Thai
	LanguageTh Language = "th"
	// Tibetan
	LanguageBo Language = "bo"
	// Tigrinya
	LanguageTi Language = "ti"
	// Tonga (Tonga Islands)
	LanguageTo Language = "to"
	// Tswana
	LanguageTn Language = "tn"
	// Tsonga
	LanguageTs Language = "ts"
	// Turkmen
	LanguageTk Language = "tk"
	// Turkish
	LanguageTr Language = "tr"
	// Twi
	LanguageTw Language = "tw"
	// Uighur; Uyghur
	LanguageUg Language = "ug"
	// Ukrainian
	LanguageUk Language = "uk"
	// Urdu
	LanguageUr Language = "ur"
	// Uzbek
	LanguageUz Language = "uz"
	// Venda
	LanguageVe Language = "ve"
	// Vietnamese
	LanguageVi Language = "vi"
	// Volapük
	LanguageVo Language = "vo"
	// Welsh
	LanguageCy Language = "cy"
	// Walloon
	LanguageWa Language = "wa"
	// Wolof
	LanguageWo Language = "wo"
	// Xhosa
	LanguageXh Language = "xh"
	// Yiddish
	LanguageYi Language = "yi"
	// Yoruba
	LanguageYo Language = "yo"
	// Zhuang; Chuang
	LanguageZa Language = "za"
	// Zulu
	LanguageZu Language = "zu"
)

func NewLanguageFromString(s string) (Language, error) {
	switch s {
	case "aa":
		return LanguageAa, nil
	case "ab":
		return LanguageAb, nil
	case "af":
		return LanguageAf, nil
	case "ak":
		return LanguageAk, nil
	case "sq":
		return LanguageSq, nil
	case "am":
		return LanguageAm, nil
	case "ar":
		return LanguageAr, nil
	case "an":
		return LanguageAn, nil
	case "hy":
		return LanguageHy, nil
	case "as":
		return LanguageAs, nil
	case "av":
		return LanguageAv, nil
	case "ae":
		return LanguageAe, nil
	case "ay":
		return LanguageAy, nil
	case "az":
		return LanguageAz, nil
	case "ba":
		return LanguageBa, nil
	case "bm":
		return LanguageBm, nil
	case "eu":
		return LanguageEu, nil
	case "be":
		return LanguageBe, nil
	case "bn":
		return LanguageBn, nil
	case "bh":
		return LanguageBh, nil
	case "bi":
		return LanguageBi, nil
	case "bs":
		return LanguageBs, nil
	case "br":
		return LanguageBr, nil
	case "bg":
		return LanguageBg, nil
	case "my":
		return LanguageMy, nil
	case "ca":
		return LanguageCa, nil
	case "ch":
		return LanguageCh, nil
	case "ce":
		return LanguageCe, nil
	case "zh":
		return LanguageZh, nil
	case "cu":
		return LanguageCu, nil
	case "cv":
		return LanguageCv, nil
	case "kw":
		return LanguageKw, nil
	case "co":
		return LanguageCo, nil
	case "cr":
		return LanguageCr, nil
	case "cs":
		return LanguageCs, nil
	case "da":
		return LanguageDa, nil
	case "dv":
		return LanguageDv, nil
	case "nl":
		return LanguageNl, nil
	case "dz":
		return LanguageDz, nil
	case "en":
		return LanguageEn, nil
	case "eo":
		return LanguageEo, nil
	case "et":
		return LanguageEt, nil
	case "ee":
		return LanguageEe, nil
	case "fo":
		return LanguageFo, nil
	case "fj":
		return LanguageFj, nil
	case "fi":
		return LanguageFi, nil
	case "fr":
		return LanguageFr, nil
	case "fy":
		return LanguageFy, nil
	case "ff":
		return LanguageFf, nil
	case "ka":
		return LanguageKa, nil
	case "de":
		return LanguageDe, nil
	case "gd":
		return LanguageGd, nil
	case "ga":
		return LanguageGa, nil
	case "gl":
		return LanguageGl, nil
	case "gv":
		return LanguageGv, nil
	case "el":
		return LanguageEl, nil
	case "gn":
		return LanguageGn, nil
	case "gu":
		return LanguageGu, nil
	case "ht":
		return LanguageHt, nil
	case "ha":
		return LanguageHa, nil
	case "he":
		return LanguageHe, nil
	case "hz":
		return LanguageHz, nil
	case "hi":
		return LanguageHi, nil
	case "ho":
		return LanguageHo, nil
	case "hr":
		return LanguageHr, nil
	case "hu":
		return LanguageHu, nil
	case "ig":
		return LanguageIg, nil
	case "is":
		return LanguageIs, nil
	case "io":
		return LanguageIo, nil
	case "ii":
		return LanguageIi, nil
	case "iu":
		return LanguageIu, nil
	case "ie":
		return LanguageIe, nil
	case "ia":
		return LanguageIa, nil
	case "id":
		return LanguageId, nil
	case "ik":
		return LanguageIk, nil
	case "it":
		return LanguageIt, nil
	case "jv":
		return LanguageJv, nil
	case "ja":
		return LanguageJa, nil
	case "kl":
		return LanguageKl, nil
	case "kn":
		return LanguageKn, nil
	case "ks":
		return LanguageKs, nil
	case "kr":
		return LanguageKr, nil
	case "kk":
		return LanguageKk, nil
	case "km":
		return LanguageKm, nil
	case "ki":
		return LanguageKi, nil
	case "rw":
		return LanguageRw, nil
	case "ky":
		return LanguageKy, nil
	case "kv":
		return LanguageKv, nil
	case "kg":
		return LanguageKg, nil
	case "ko":
		return LanguageKo, nil
	case "kj":
		return LanguageKj, nil
	case "ku":
		return LanguageKu, nil
	case "lo":
		return LanguageLo, nil
	case "la":
		return LanguageLa, nil
	case "lv":
		return LanguageLv, nil
	case "li":
		return LanguageLi, nil
	case "ln":
		return LanguageLn, nil
	case "lt":
		return LanguageLt, nil
	case "lb":
		return LanguageLb, nil
	case "lu":
		return LanguageLu, nil
	case "lg":
		return LanguageLg, nil
	case "mk":
		return LanguageMk, nil
	case "mh":
		return LanguageMh, nil
	case "ml":
		return LanguageMl, nil
	case "mi":
		return LanguageMi, nil
	case "mr":
		return LanguageMr, nil
	case "ms":
		return LanguageMs, nil
	case "mg":
		return LanguageMg, nil
	case "mt":
		return LanguageMt, nil
	case "mn":
		return LanguageMn, nil
	case "na":
		return LanguageNa, nil
	case "nv":
		return LanguageNv, nil
	case "nr":
		return LanguageNr, nil
	case "nd":
		return LanguageNd, nil
	case "ng":
		return LanguageNg, nil
	case "ne":
		return LanguageNe, nil
	case "nn":
		return LanguageNn, nil
	case "nb":
		return LanguageNb, nil
	case "no":
		return LanguageNo, nil
	case "ny":
		return LanguageNy, nil
	case "oc":
		return LanguageOc, nil
	case "oj":
		return LanguageOj, nil
	case "or":
		return LanguageOr, nil
	case "om":
		return LanguageOm, nil
	case "os":
		return LanguageOs, nil
	case "pa":
		return LanguagePa, nil
	case "fa":
		return LanguageFa, nil
	case "pi":
		return LanguagePi, nil
	case "pl":
		return LanguagePl, nil
	case "pt":
		return LanguagePt, nil
	case "ps":
		return LanguagePs, nil
	case "qu":
		return LanguageQu, nil
	case "rm":
		return LanguageRm, nil
	case "ro":
		return LanguageRo, nil
	case "rn":
		return LanguageRn, nil
	case "ru":
		return LanguageRu, nil
	case "sg":
		return LanguageSg, nil
	case "sa":
		return LanguageSa, nil
	case "si":
		return LanguageSi, nil
	case "sk":
		return LanguageSk, nil
	case "sl":
		return LanguageSl, nil
	case "se":
		return LanguageSe, nil
	case "sm":
		return LanguageSm, nil
	case "sn":
		return LanguageSn, nil
	case "sd":
		return LanguageSd, nil
	case "so":
		return LanguageSo, nil
	case "st":
		return LanguageSt, nil
	case "es":
		return LanguageEs, nil
	case "sc":
		return LanguageSc, nil
	case "sr":
		return LanguageSr, nil
	case "ss":
		return LanguageSs, nil
	case "su":
		return LanguageSu, nil
	case "sw":
		return LanguageSw, nil
	case "sv":
		return LanguageSv, nil
	case "ty":
		return LanguageTy, nil
	case "ta":
		return LanguageTa, nil
	case "tt":
		return LanguageTt, nil
	case "te":
		return LanguageTe, nil
	case "tg":
		return LanguageTg, nil
	case "tl":
		return LanguageTl, nil
	case "th":
		return LanguageTh, nil
	case "bo":
		return LanguageBo, nil
	case "ti":
		return LanguageTi, nil
	case "to":
		return LanguageTo, nil
	case "tn":
		return LanguageTn, nil
	case "ts":
		return LanguageTs, nil
	case "tk":
		return LanguageTk, nil
	case "tr":
		return LanguageTr, nil
	case "tw":
		return LanguageTw, nil
	case "ug":
		return LanguageUg, nil
	case "uk":
		return LanguageUk, nil
	case "ur":
		return LanguageUr, nil
	case "uz":
		return LanguageUz, nil
	case "ve":
		return LanguageVe, nil
	case "vi":
		return LanguageVi, nil
	case "vo":
		return LanguageVo, nil
	case "cy":
		return LanguageCy, nil
	case "wa":
		return LanguageWa, nil
	case "wo":
		return LanguageWo, nil
	case "xh":
		return LanguageXh, nil
	case "yi":
		return LanguageYi, nil
	case "yo":
		return LanguageYo, nil
	case "za":
		return LanguageZa, nil
	case "zu":
		return LanguageZu, nil
	}
	var t Language
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l Language) Ptr() *Language {
	return &l
}

type MeasurementData struct {
	Record      []string               `json:"record,omitempty"`
	RecordCount int                    `json:"record_count"`
	Properties  *MeasurementProperties `json:"properties,omitempty"`
}

// A numerical representation in a standard unit of some dimension of an entity, for example, weight
type MeasurementInfo struct {
	Limit int                `json:"limit"`
	Size  *SizeInfo          `json:"size,omitempty"`
	Data  []*MeasurementData `json:"data,omitempty"`
}

type MeasurementProperties struct {
	Type  MeasurementType `json:"type,omitempty"`
	Unit  Unit            `json:"unit,omitempty"`
	Value float64         `json:"value"`
}

// The type of measurement, e.g. net weight
type MeasurementType string

const (
	// Total weight including the weight of goods, packaging, and any additional accessories used for shipping
	MeasurementTypeGrossWeight MeasurementType = "gross_weight"
	// Weight of raw goods only
	MeasurementTypeNetWeight MeasurementType = "net_weight"
	// Describes the number of units of product
	MeasurementTypeQuantity MeasurementType = "quantity"
)

func NewMeasurementTypeFromString(s string) (MeasurementType, error) {
	switch s {
	case "gross_weight":
		return MeasurementTypeGrossWeight, nil
	case "net_weight":
		return MeasurementTypeNetWeight, nil
	case "quantity":
		return MeasurementTypeQuantity, nil
	}
	var t MeasurementType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MeasurementType) Ptr() *MeasurementType {
	return &m
}

// Monetary value context enums describe the types of financial values an asset can have
type MonetaryValueContext string

const (
	MonetaryValueContextCostInsuranceAndFreight MonetaryValueContext = "cost_insurance_and_freight"
	MonetaryValueContextFreeOnBoard             MonetaryValueContext = "free_on_board"
)

func NewMonetaryValueContextFromString(s string) (MonetaryValueContext, error) {
	switch s {
	case "cost_insurance_and_freight":
		return MonetaryValueContextCostInsuranceAndFreight, nil
	case "free_on_board":
		return MonetaryValueContextFreeOnBoard, nil
	}
	var t MonetaryValueContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MonetaryValueContext) Ptr() *MonetaryValueContext {
	return &m
}

type MonetaryValueData struct {
	Record      []string                 `json:"record,omitempty"`
	RecordCount int                      `json:"record_count"`
	Properties  *MonetaryValueProperties `json:"properties,omitempty"`
}

// The financial value of an asset (e.g. FOB, CIF)
type MonetaryValueInfo struct {
	Limit int                  `json:"limit"`
	Size  *SizeInfo            `json:"size,omitempty"`
	Data  []*MonetaryValueData `json:"data,omitempty"`
}

type MonetaryValueProperties struct {
	Context  *string   `json:"context,omitempty"`
	Currency *Currency `json:"currency,omitempty"`
	Value    float64   `json:"value"`
}

// Name context enums describe different ways in which a name can belong to an entity
type NameContext string

const (
	// The main name, full name, or "best name" for an entity
	NameContextPrimary NameContext = "primary"
	// A given name (i.e. first name, middle name)
	NameContextGiven NameContext = "given"
	// A family name (i.e. last name)
	NameContextFamily NameContext = "family"
	// An alternative, former, or otherwise non-primary name
	NameContextAlias NameContext = "alias"
	// A machine translation of a name
	NameContextMachineTranslation NameContext = "machine_translation"
	// A machine transliteration of a name using a specific system (e.g. Pinyin, ISO, UNGEGN)
	NameContextTransliteration NameContext = "transliteration"
)

func NewNameContextFromString(s string) (NameContext, error) {
	switch s {
	case "primary":
		return NameContextPrimary, nil
	case "given":
		return NameContextGiven, nil
	case "family":
		return NameContextFamily, nil
	case "alias":
		return NameContextAlias, nil
	case "machine_translation":
		return NameContextMachineTranslation, nil
	case "transliteration":
		return NameContextTransliteration, nil
	}
	var t NameContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NameContext) Ptr() *NameContext {
	return &n
}

type NameData struct {
	Record      []string        `json:"record,omitempty"`
	RecordCount int             `json:"record_count"`
	Properties  *NameProperties `json:"properties,omitempty"`
}

// An entity's name. The value may be straightforward (e.g. 'Acme LLC,' 'John Doe') or context-specific (e.g. 'Jones v. Smith' as a legal matter name).
type NameInfo struct {
	Limit int         `json:"limit"`
	Size  *SizeInfo   `json:"size,omitempty"`
	Data  []*NameData `json:"data,omitempty"`
}

type NameProperties struct {
	Context        *string   `json:"context,omitempty"`
	Language       *Language `json:"language,omitempty"`
	Translated     *string   `json:"translated,omitempty"`
	Transliterated *string   `json:"transliterated,omitempty"`
	Value          string    `json:"value"`
}

// Person status enums describe different life events
type PersonStatus string

const (
	PersonStatusBorn    PersonStatus = "born"
	PersonStatusDied    PersonStatus = "died"
	PersonStatusMarried PersonStatus = "married"
)

func NewPersonStatusFromString(s string) (PersonStatus, error) {
	switch s {
	case "born":
		return PersonStatusBorn, nil
	case "died":
		return PersonStatusDied, nil
	case "married":
		return PersonStatusMarried, nil
	}
	var t PersonStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PersonStatus) Ptr() *PersonStatus {
	return &p
}

type PersonStatusData struct {
	Record      []string                `json:"record,omitempty"`
	RecordCount int                     `json:"record_count"`
	Properties  *PersonStatusProperties `json:"properties,omitempty"`
}

// A key event in a person's life, usually temporal
type PersonStatusInfo struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*PersonStatusData `json:"data,omitempty"`
}

type PersonStatusProperties struct {
	Value PersonStatus `json:"value,omitempty"`
}

type PositionData struct {
	Record      []string            `json:"record,omitempty"`
	RecordCount int                 `json:"record_count"`
	Properties  *PositionProperties `json:"properties,omitempty"`
}

// An attribute used for many different relationship types that allows for the inclusion of a title or designation (e.g. member_of_the_board_of, Position: 'Secretary of the Board,' or shareholder_of, Position: 'Minority shareholder')
type PositionInfo struct {
	Limit int             `json:"limit"`
	Size  *SizeInfo       `json:"size,omitempty"`
	Data  []*PositionData `json:"data,omitempty"`
}

type PositionProperties struct {
	Value string `json:"value"`
}

type RiskIntelligenceData struct {
	Record      []string                    `json:"record,omitempty"`
	RecordCount int                         `json:"record_count"`
	Properties  *RiskIntelligenceProperties `json:"properties,omitempty"`
}

// Risk intelligence metadata
type RiskIntelligenceInfo struct {
	Limit int                     `json:"limit"`
	Size  *SizeInfo               `json:"size,omitempty"`
	Data  []*RiskIntelligenceData `json:"data,omitempty"`
}

type RiskIntelligenceProperties struct {
	Authority *string `json:"authority,omitempty"`
	List      *string `json:"list,omitempty"`
	Program   *string `json:"program,omitempty"`
	Reason    *string `json:"reason,omitempty"`
	Type      Tag     `json:"type,omitempty"`
}

type SharesData struct {
	Record      []string          `json:"record,omitempty"`
	RecordCount int               `json:"record_count"`
	Properties  *SharesProperties `json:"properties,omitempty"`
}

// Shares associated with an entity (e.g. its number of issued shares, or the number of shares held by a shareholder)
type SharesInfo struct {
	Limit int           `json:"limit"`
	Size  *SizeInfo     `json:"size,omitempty"`
	Data  []*SharesData `json:"data,omitempty"`
}

type SharesProperties struct {
	Currency      *Currency `json:"currency,omitempty"`
	MonetaryValue *float64  `json:"monetary_value,omitempty"`
	NumShares     *float64  `json:"num_shares,omitempty"`
	Percentage    *float64  `json:"percentage,omitempty"`
	Type          *string   `json:"type,omitempty"`
}

// Status context enums describe the different types of statuses that can be represented in a status attribute.
type StatusContext string

const (
	// e.g. 'Broker,' 'Intermediary.' An individual who acts as an intermediary for trading, lending, and investing purposes.
	StatusContextBrokerLicense StatusContext = "broker_license"
	// e.g. 'Investment Advisor.' An individual who provides investment advice and/or securities analysis services for a fee.
	StatusContextInvestmentAdvisorLicense StatusContext = "investment_advisor_license"
	// e.g. 'Sole proprietor,' 'Sole proprietorship,' 'Individual entrepreneurship,' 'Sole trader.'
	StatusContextSoleProprietorshipStatus StatusContext = "sole_proprietorship_status"
	// e.g. 'Partnership.' A basic form of partnership under common law. A company entity, typically unincorporated, comprised of two or more partners who agree to share in all assets, profits, and liabilities of a business.
	StatusContextGeneralPartnershipStatus StatusContext = "general_partnership_status"
	// e.g. 'LLP,' 'Limited-Liability Limited Partnership.' A partnership in which some or all partners have limited liabilities. Each partner's liabilities are limited to the amount they contribute to the business.
	StatusContextLimitedLiabilityPartnershipStatus StatusContext = "limited_liability_partnership_status"
)

func NewStatusContextFromString(s string) (StatusContext, error) {
	switch s {
	case "broker_license":
		return StatusContextBrokerLicense, nil
	case "investment_advisor_license":
		return StatusContextInvestmentAdvisorLicense, nil
	case "sole_proprietorship_status":
		return StatusContextSoleProprietorshipStatus, nil
	case "general_partnership_status":
		return StatusContextGeneralPartnershipStatus, nil
	case "limited_liability_partnership_status":
		return StatusContextLimitedLiabilityPartnershipStatus, nil
	}
	var t StatusContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StatusContext) Ptr() *StatusContext {
	return &s
}

type StatusData struct {
	Record      []string          `json:"record,omitempty"`
	RecordCount int               `json:"record_count"`
	Properties  *StatusProperties `json:"properties,omitempty"`
}

// The status of an entity.
type StatusInfo struct {
	Limit int           `json:"limit"`
	Size  *SizeInfo     `json:"size,omitempty"`
	Data  []*StatusData `json:"data,omitempty"`
}

type StatusProperties struct {
	Context *StatusContext `json:"context,omitempty"`
	Text    *string        `json:"text,omitempty"`
	Value   *CompanyStatus `json:"value,omitempty"`
}

// Risk tags
type Tag string

const (
	TagPep                                        Tag = "pep"
	TagStateOwned                                 Tag = "state_owned"
	TagFormerSoe                                  Tag = "former_soe"
	TagSanctioned                                 Tag = "sanctioned"
	TagFormerlySanctioned                         Tag = "formerly_sanctioned"
	TagReputationalRiskTerrorism                  Tag = "reputational_risk_terrorism"
	TagReputationalRiskOrganizedCrime             Tag = "reputational_risk_organized_crime"
	TagReputationalRiskFinancialCrime             Tag = "reputational_risk_financial_crime"
	TagReputationalRiskBriberyAndCorruption       Tag = "reputational_risk_bribery_and_corruption"
	TagReputationalRiskOther                      Tag = "reputational_risk_other"
	TagReputationalRiskCybercrime                 Tag = "reputational_risk_cybercrime"
	TagReputationalRiskModernSlavery              Tag = "reputational_risk_modern_slavery"
	TagRegulatoryAction                           Tag = "regulatory_action"
	TagLawEnforcementAction                       Tag = "law_enforcement_action"
	TagExportControls                             Tag = "export_controls"
	TagForcedLaborXinjiangContractors             Tag = "forced_labor_xinjiang_contractors"
	TagWroEntity                                  Tag = "wro_entity"
	TagUflpaEntity                                Tag = "uflpa_entity"
	TagSheffieldHallamUniversityForcedLaborEntity Tag = "sheffield_hallam_university_forced_labor_entity"
)

func NewTagFromString(s string) (Tag, error) {
	switch s {
	case "pep":
		return TagPep, nil
	case "state_owned":
		return TagStateOwned, nil
	case "former_soe":
		return TagFormerSoe, nil
	case "sanctioned":
		return TagSanctioned, nil
	case "formerly_sanctioned":
		return TagFormerlySanctioned, nil
	case "reputational_risk_terrorism":
		return TagReputationalRiskTerrorism, nil
	case "reputational_risk_organized_crime":
		return TagReputationalRiskOrganizedCrime, nil
	case "reputational_risk_financial_crime":
		return TagReputationalRiskFinancialCrime, nil
	case "reputational_risk_bribery_and_corruption":
		return TagReputationalRiskBriberyAndCorruption, nil
	case "reputational_risk_other":
		return TagReputationalRiskOther, nil
	case "reputational_risk_cybercrime":
		return TagReputationalRiskCybercrime, nil
	case "reputational_risk_modern_slavery":
		return TagReputationalRiskModernSlavery, nil
	case "regulatory_action":
		return TagRegulatoryAction, nil
	case "law_enforcement_action":
		return TagLawEnforcementAction, nil
	case "export_controls":
		return TagExportControls, nil
	case "forced_labor_xinjiang_contractors":
		return TagForcedLaborXinjiangContractors, nil
	case "wro_entity":
		return TagWroEntity, nil
	case "uflpa_entity":
		return TagUflpaEntity, nil
	case "sheffield_hallam_university_forced_labor_entity":
		return TagSheffieldHallamUniversityForcedLaborEntity, nil
	}
	var t Tag
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t Tag) Ptr() *Tag {
	return &t
}

type TranslatedNameData struct {
	Record      []string                  `json:"record,omitempty"`
	RecordCount int                       `json:"record_count"`
	Properties  *TranslatedNameProperties `json:"properties,omitempty"`
}

// A name that has been translated to English
type TranslatedNameInfo struct {
	Limit int                   `json:"limit"`
	Size  *SizeInfo             `json:"size,omitempty"`
	Data  []*TranslatedNameData `json:"data,omitempty"`
}

type TranslatedNameProperties struct {
	Context  *TranslationContext `json:"context,omitempty"`
	Original *string             `json:"original,omitempty"`
	Value    string              `json:"value"`
}

// Translation context enums describe different types of translations
type TranslationContext string

const (
	// A translation made using a Sayari machine learning model
	TranslationContextSayariMachineTranslation TranslationContext = "sayari_machine_translation"
	// A Pinyin transliteration
	TranslationContextPinyin TranslationContext = "pinyin"
	// A translation made using Google Translate API
	TranslationContextGoogleTranslate TranslationContext = "google_translate"
)

func NewTranslationContextFromString(s string) (TranslationContext, error) {
	switch s {
	case "sayari_machine_translation":
		return TranslationContextSayariMachineTranslation, nil
	case "pinyin":
		return TranslationContextPinyin, nil
	case "google_translate":
		return TranslationContextGoogleTranslate, nil
	}
	var t TranslationContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TranslationContext) Ptr() *TranslationContext {
	return &t
}

// Unit of measurement (i.e. SI base units)
type Unit string

const (
	UnitMetre    Unit = "metre"
	UnitKilogram Unit = "kilogram"
	UnitUnit     Unit = "unit"
)

func NewUnitFromString(s string) (Unit, error) {
	switch s {
	case "metre":
		return UnitMetre, nil
	case "kilogram":
		return UnitKilogram, nil
	case "unit":
		return UnitUnit, nil
	}
	var t Unit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u Unit) Ptr() *Unit {
	return &u
}

type WeakIdentifierData struct {
	Record      []string                  `json:"record,omitempty"`
	RecordCount int                       `json:"record_count"`
	Properties  *WeakIdentifierProperties `json:"properties,omitempty"`
}

// A non-unique ID number, like a partially redacted tax ID or a registry identifier whose value and type may be shared by multiple entities
type WeakIdentifierInfo struct {
	Limit int                   `json:"limit"`
	Size  *SizeInfo             `json:"size,omitempty"`
	Data  []*WeakIdentifierData `json:"data,omitempty"`
}

type WeakIdentifierProperties struct {
	Type  WeakIdentifierType `json:"type,omitempty"`
	Value string             `json:"value"`
}

// All weak (non-unique) identifiers in Sayari's database
type WeakIdentifierType string

const (
	// A string that is thought to be an ID number, but whose type is unknown
	WeakIdentifierTypeUnknown            WeakIdentifierType = "unknown"
	WeakIdentifierTypeMxPartialRfcPerson WeakIdentifierType = "mx_partial_rfc_person"
	WeakIdentifierTypeRuOktmo            WeakIdentifierType = "ru_oktmo"
	WeakIdentifierTypeRuKpp              WeakIdentifierType = "ru_kpp"
	// A unique identifier that is reissued when a company dissolves
	WeakIdentifierTypeRuOkpo WeakIdentifierType = "ru_okpo"
	// A passport number whose country of origin is not known
	WeakIdentifierTypeUnknownPassport WeakIdentifierType = "unknown_passport"
	// An identifier from the Kosovo company registry
	WeakIdentifierTypeRksKtaNumber WeakIdentifierType = "rks_kta_number"
	// Individual taxpayer registry identification (https://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas)
	WeakIdentifierTypeBraPartialCpf WeakIdentifierType = "bra_partial_cpf"
	// Identification number for Venezuelan comisarios
	WeakIdentifierTypeVenColegiadoNumber WeakIdentifierType = "ven_colegiado_number"
	WeakIdentifierTypePanFolio           WeakIdentifierType = "pan_folio"
	// A unique identifier that is reissued when a company dissolves
	WeakIdentifierTypeKgzOkpo               WeakIdentifierType = "kgz_okpo"
	WeakIdentifierTypeKgzInn                WeakIdentifierType = "kgz_inn"
	WeakIdentifierTypeLbnRegistrationNumber WeakIdentifierType = "lbn_registration_number"
	// Number in registry per EBR
	WeakIdentifierTypeItaEbrRegNumber WeakIdentifierType = "ita_ebr_reg_number"
	// EBR short search code
	WeakIdentifierTypeItaEbrShortSearchCode WeakIdentifierType = "ita_ebr_short_search_code"
	// CVE number in Chile Santiago Gazette
	WeakIdentifierTypeChlSantiagoGazetteCve WeakIdentifierType = "chl_santiago_gazette_cve"
	// Bermuda registration number
	WeakIdentifierTypeBmuRegistrationNumber WeakIdentifierType = "bmu_registration_number"
	// Brazilian Lawyer Identification number
	WeakIdentifierTypeBrazilianOab WeakIdentifierType = "brazilian_oab"
	// Iranian registration number
	WeakIdentifierTypeIrnRegNumber WeakIdentifierType = "irn_reg_number"
	// Mexican FME
	WeakIdentifierTypeMxFme WeakIdentifierType = "mx_fme"
	// See https://www.wikidata.org/wiki/Property:P3125
	WeakIdentifierTypeUkrEdrpou WeakIdentifierType = "ukr_edrpou"
	// Label for various license numbers extracted from EGRUL documents
	WeakIdentifierTypeRuLicenseNumber WeakIdentifierType = "ru_license_number"
	// Unique call sign for vessels
	WeakIdentifierTypeMaritimeCallSign WeakIdentifierType = "maritime_call_sign"
	// Registration numbers for North Korean ships
	WeakIdentifierTypePrkShipRegNo WeakIdentifierType = "prk_ship_reg_no"
	// National identification number for enterprises and associations (Senegal)
	WeakIdentifierTypeCofiCode WeakIdentifierType = "cofi_code"
	// Foreign entity accreditation number
	WeakIdentifierTypeRuNza WeakIdentifierType = "ru_nza"
	// Unique company id from Inspección General de Justicia in Argentina
	WeakIdentifierTypeArgIgjNumber WeakIdentifierType = "arg_igj_number"
	// Brazilian Lawyer Identification number
	WeakIdentifierTypeUnknownBraCaseNumber WeakIdentifierType = "unknown_bra_case_number"
	WeakIdentifierTypeIrqProvisionCard     WeakIdentifierType = "irq_provision_card"
	// Mobile Home Serial Number
	WeakIdentifierTypeMblHmSn WeakIdentifierType = "mbl_hm_sn"
	// Mobile Home HUD Number
	WeakIdentifierTypeMblHmHudNum WeakIdentifierType = "mbl_hm_hud_num"
	// Mobile Home Title Number
	WeakIdentifierTypeMblHmTitleNum WeakIdentifierType = "mbl_hm_title_num"
	// Time stamp unique to each politician's filing on Declaranet
	WeakIdentifierTypeMexDeclaranetAcuse WeakIdentifierType = "mex_declaranet_acuse"
	// The company number given to each company listed in Handelsregister, the German Commercial Register. It is not unique unless combined with the district court XJustiz ID, which this weak identifier does not contain because in some cases it is not provided.
	WeakIdentifierTypeDeuRegisternummer WeakIdentifierType = "deu_registernummer"
	// A National ID Number whose country of origin is not known
	WeakIdentifierTypeUnknownNationalIdNum WeakIdentifierType = "unknown_national_id_num"
	// A Civil Reg Number whose country of origin is not known
	WeakIdentifierTypeUnknownCivilRegNum WeakIdentifierType = "unknown_civil_reg_num"
	// A Residency Number whose country of origin is not known
	WeakIdentifierTypeUnknownResidencyNum WeakIdentifierType = "unknown_residency_num"
	// A Folio ID Number whose country of origin is not known
	WeakIdentifierTypeUnknownFolioIdNum WeakIdentifierType = "unknown_folio_id_num"
	// A commercial registration number of unknown origin
	WeakIdentifierTypeUnknownCommercialRegisterId WeakIdentifierType = "unknown_commercial_register_id"
	// A chamber of commerce number of unknwon origin
	WeakIdentifierTypeUnknownChamberOfCommerceId WeakIdentifierType = "unknown_chamber_of_commerce_id"
	// A license number of unknown origin
	WeakIdentifierTypeUnknownLicenseNum WeakIdentifierType = "unknown_license_num"
	// An industrial license number of unknown origin
	WeakIdentifierTypeUnknownIndustrialLicenseNum WeakIdentifierType = "unknown_industrial_license_num"
	// Czechia file number from Moj registry
	WeakIdentifierTypeCzeFileNumber WeakIdentifierType = "cze_file_number"
	// Mexican trademark application number
	WeakIdentifierTypeMexTmAppNo WeakIdentifierType = "mex_tm_app_no"
	// Mexican trademark registration number
	WeakIdentifierTypeMexTmRegNo WeakIdentifierType = "mex_tm_reg_no"
	// Company number from Jordan corporate registry
	WeakIdentifierTypeJordanCompanyNo WeakIdentifierType = "jordan_company_no"
	// Part of a qichacha URL, used to uniquely identify people within the site
	WeakIdentifierTypeCnQccInternalId WeakIdentifierType = "cn_qcc_internal_id"
	// Weak identifier found in sole proprietor source
	WeakIdentifierTypeJorSolPropInstitutionNumber WeakIdentifierType = "jor_sol_prop_institution_number"
	// North Carolina SoS corporation number
	WeakIdentifierTypeUsaNcCorpNo WeakIdentifierType = "usa_nc_corp_no"
	// New Mexico Secretary of State License Id
	WeakIdentifierTypeUsaNmLicenseId WeakIdentifierType = "usa_nm_license_id"
	// Cambodia tax identification number
	WeakIdentifierTypeKhmTinNumber WeakIdentifierType = "khm_tin_number"
	// Entity ID from Missouri Corporate Registry
	WeakIdentifierTypeUsaMoEntityId WeakIdentifierType = "usa_mo_entity_id"
	// Corporation Number from Missouri Corporate Registry - used on SoS search
	WeakIdentifierTypeUsaMoCorpNumber WeakIdentifierType = "usa_mo_corp_number"
	// Case number for legal matters from Macao Tribunais da RAEM Judgments
	WeakIdentifierTypeMacRaemCaseNumber WeakIdentifierType = "mac_raem_case_number"
	// Notary office number for notaries in Honduras Tegucigalpa source
	WeakIdentifierTypeHndTegucigalpaNotary WeakIdentifierType = "hnd_tegucigalpa_notary"
	// Lebanese family number
	WeakIdentifierTypeLbnFamilyNumber      WeakIdentifierType = "lbn_family_number"
	WeakIdentifierTypeTxBexarPropertyGeoId WeakIdentifierType = "tx_bexar_property_geo_id"
	WeakIdentifierTypePakCnicFamilyNo      WeakIdentifierType = "pak_cnic_family_no"
	// Romanian Commercial Register ID (concatenated from jud_com, nr_com, and an_com from ROU/taxpayers)
	WeakIdentifierTypeRouCommercialRegisterId WeakIdentifierType = "rou_commercial_register_id"
	// Partial South African ID number for individuals
	WeakIdentifierTypeSouthAfricaPartialIdNumber WeakIdentifierType = "south_africa_partial_id_number"
	// Internal ID used to link companies between PRK/CN exports and trade dict sources. Downgraded to weak id.
	WeakIdentifierTypePrkInternalTradeId WeakIdentifierType = "prk_internal_trade_id"
	// Chinese custums registration code. Downgraded to weak identifier.
	WeakIdentifierTypeChnCustomsRegistrationCode WeakIdentifierType = "chn_customs_registration_code"
	// Austrian Company Register Number (no longer used)
	WeakIdentifierTypeAutFormerCrNo WeakIdentifierType = "aut_former_cr_no"
	// Austrian National Bank ID Number
	WeakIdentifierTypeAutNatlBankNo WeakIdentifierType = "aut_natl_bank_no"
	// Latvian Personal ID Number (last 5 digits masked)
	WeakIdentifierTypeLvaPersonIdMasked WeakIdentifierType = "lva_person_id_masked"
	// Latvian Court Case ID Number
	WeakIdentifierTypeLvaCourtCaseId WeakIdentifierType = "lva_court_case_id"
	// Internal identifier for legal persons from CHN cninfo data
	WeakIdentifierTypeChnCninfoLegalPersonId WeakIdentifierType = "chn_cninfo_legal_person_id"
	WeakIdentifierTypeRksBusinessNumber      WeakIdentifierType = "rks_business_number"
	// A fiscal number from the Kosovo company registry
	WeakIdentifierTypeRksFiscalNumber WeakIdentifierType = "rks_fiscal_number"
	// A tax identifier number in Madagascar.
	WeakIdentifierTypeMdgNifNumber WeakIdentifierType = "mdg_nif_number"
	// A tax identifier number in Madagascar.
	WeakIdentifierTypeMdgRcsNumber WeakIdentifierType = "mdg_rcs_number"
	// See https://en.wikipedia.org/wiki/VAT_identification_number
	WeakIdentifierTypeVat WeakIdentifierType = "vat"
	// Site number of business registered in Chicago, IL business license registry (unique to account number)
	WeakIdentifierTypeUsaIlChicagoSiteNumber WeakIdentifierType = "usa_il_chicago_site_number"
	// Ticker symbol for securities without exchange information
	WeakIdentifierTypeUsaGenericTicker WeakIdentifierType = "usa_generic_ticker"
	// A certificate number for the National Registry of Contractors in Venezuela
	WeakIdentifierTypeVenRncNumber WeakIdentifierType = "ven_rnc_number"
	// Identifier for shipment transactions
	WeakIdentifierTypeUsaImportsSystemIdentityId WeakIdentifierType = "usa_imports_system_identity_id"
	// Bill of lading number for Colombian trade data
	WeakIdentifierTypeColBillOfLading WeakIdentifierType = "col_bill_of_lading"
	// Colombian SECOP internal ID
	WeakIdentifierTypeColSecopNo WeakIdentifierType = "col_secop_no"
	// The register REGON fulfils the function of the national official Register of National Economy Entities
	WeakIdentifierTypePolRegonNumber WeakIdentifierType = "pol_regon_number"
	// Tax identification number from Poland
	WeakIdentifierTypePolNipNumber WeakIdentifierType = "pol_nip_number"
	// Bill of lading number for trade data
	WeakIdentifierTypeBillOfLading WeakIdentifierType = "bill_of_lading"
	// Panama IBC RUC
	WeakIdentifierTypePanIbcRuc WeakIdentifierType = "pan_ibc_ruc"
	// Old Pakistan company code
	WeakIdentifierTypePakOldCompanyCode WeakIdentifierType = "pak_old_company_code"
	// Japan ministry of land, infrastructure, transportation and tourism permit number
	WeakIdentifierTypeJpnPermitNo WeakIdentifierType = "jpn_permit_no"
	// Dominica Business Registry Entity Number
	WeakIdentifierTypeDmaCorporateRegistryEntityNum WeakIdentifierType = "dma_corporate_registry_entity_num"
	// Antigua and Barbuda Business Registry Entity Number
	WeakIdentifierTypeAtgCorporateRegistryEntityNum WeakIdentifierType = "atg_corporate_registry_entity_num"
	// St. Lucia Business Registry Entity Number
	WeakIdentifierTypeLcaCorporateRegistryEntityNum WeakIdentifierType = "lca_corporate_registry_entity_num"
	// Manifiesto number for Venezuelan shipments
	WeakIdentifierTypeVenManifiestoNumber WeakIdentifierType = "ven_manifiesto_number"
	// Matricula mercantil number which is non unique across different chambers of commerce
	WeakIdentifierTypeColMatriculaMercantil WeakIdentifierType = "col_matricula_mercantil"
	// Maritime Mobile Service Identity Number (https://en.wikipedia.org/wiki/Maritime_Mobile_Service_Identity)
	WeakIdentifierTypeMaritimeMobileServiceIdentity WeakIdentifierType = "maritime_mobile_service_identity"
	// Former USA/IRS FEI/EIN Number
	WeakIdentifierTypeUsaFormerFein WeakIdentifierType = "usa_former_fein"
	// USA Customs and Border Protection Withhold Release Order ID
	WeakIdentifierTypeUsaCbpWroId WeakIdentifierType = "usa_cbp_wro_id"
	// China Classification Society Ship Class Number
	WeakIdentifierTypeCcsShipClassNumber WeakIdentifierType = "ccs_ship_class_number"
	// Partial Turkish Central Registry Number System MERSIS number
	WeakIdentifierTypeTurPartialMersisNumber WeakIdentifierType = "tur_partial_mersis_number"
	// Turkey municipal trade registry ID number. Assigned by municipal chambers of commerce in Turkey.
	WeakIdentifierTypeTurOfficeRegistrationNumber WeakIdentifierType = "tur_office_registration_number"
	// A Identification Card or Passport Document for people in Venezuela
	WeakIdentifierTypePartialVenCedula WeakIdentifierType = "partial_ven_cedula"
	// Russia Central Bank ID
	WeakIdentifierTypeRusCbrId WeakIdentifierType = "rus_cbr_id"
	// Georgian state registration number
	WeakIdentifierTypeGeoStateRegistrationNumber WeakIdentifierType = "geo_state_registration_number"
	// Bosnia and Herzegovenia business register registration number
	WeakIdentifierTypeBihMbsNumber WeakIdentifierType = "bih_mbs_number"
)

func NewWeakIdentifierTypeFromString(s string) (WeakIdentifierType, error) {
	switch s {
	case "unknown":
		return WeakIdentifierTypeUnknown, nil
	case "mx_partial_rfc_person":
		return WeakIdentifierTypeMxPartialRfcPerson, nil
	case "ru_oktmo":
		return WeakIdentifierTypeRuOktmo, nil
	case "ru_kpp":
		return WeakIdentifierTypeRuKpp, nil
	case "ru_okpo":
		return WeakIdentifierTypeRuOkpo, nil
	case "unknown_passport":
		return WeakIdentifierTypeUnknownPassport, nil
	case "rks_kta_number":
		return WeakIdentifierTypeRksKtaNumber, nil
	case "bra_partial_cpf":
		return WeakIdentifierTypeBraPartialCpf, nil
	case "ven_colegiado_number":
		return WeakIdentifierTypeVenColegiadoNumber, nil
	case "pan_folio":
		return WeakIdentifierTypePanFolio, nil
	case "kgz_okpo":
		return WeakIdentifierTypeKgzOkpo, nil
	case "kgz_inn":
		return WeakIdentifierTypeKgzInn, nil
	case "lbn_registration_number":
		return WeakIdentifierTypeLbnRegistrationNumber, nil
	case "ita_ebr_reg_number":
		return WeakIdentifierTypeItaEbrRegNumber, nil
	case "ita_ebr_short_search_code":
		return WeakIdentifierTypeItaEbrShortSearchCode, nil
	case "chl_santiago_gazette_cve":
		return WeakIdentifierTypeChlSantiagoGazetteCve, nil
	case "bmu_registration_number":
		return WeakIdentifierTypeBmuRegistrationNumber, nil
	case "brazilian_oab":
		return WeakIdentifierTypeBrazilianOab, nil
	case "irn_reg_number":
		return WeakIdentifierTypeIrnRegNumber, nil
	case "mx_fme":
		return WeakIdentifierTypeMxFme, nil
	case "ukr_edrpou":
		return WeakIdentifierTypeUkrEdrpou, nil
	case "ru_license_number":
		return WeakIdentifierTypeRuLicenseNumber, nil
	case "maritime_call_sign":
		return WeakIdentifierTypeMaritimeCallSign, nil
	case "prk_ship_reg_no":
		return WeakIdentifierTypePrkShipRegNo, nil
	case "cofi_code":
		return WeakIdentifierTypeCofiCode, nil
	case "ru_nza":
		return WeakIdentifierTypeRuNza, nil
	case "arg_igj_number":
		return WeakIdentifierTypeArgIgjNumber, nil
	case "unknown_bra_case_number":
		return WeakIdentifierTypeUnknownBraCaseNumber, nil
	case "irq_provision_card":
		return WeakIdentifierTypeIrqProvisionCard, nil
	case "mbl_hm_sn":
		return WeakIdentifierTypeMblHmSn, nil
	case "mbl_hm_hud_num":
		return WeakIdentifierTypeMblHmHudNum, nil
	case "mbl_hm_title_num":
		return WeakIdentifierTypeMblHmTitleNum, nil
	case "mex_declaranet_acuse":
		return WeakIdentifierTypeMexDeclaranetAcuse, nil
	case "deu_registernummer":
		return WeakIdentifierTypeDeuRegisternummer, nil
	case "unknown_national_id_num":
		return WeakIdentifierTypeUnknownNationalIdNum, nil
	case "unknown_civil_reg_num":
		return WeakIdentifierTypeUnknownCivilRegNum, nil
	case "unknown_residency_num":
		return WeakIdentifierTypeUnknownResidencyNum, nil
	case "unknown_folio_id_num":
		return WeakIdentifierTypeUnknownFolioIdNum, nil
	case "unknown_commercial_register_id":
		return WeakIdentifierTypeUnknownCommercialRegisterId, nil
	case "unknown_chamber_of_commerce_id":
		return WeakIdentifierTypeUnknownChamberOfCommerceId, nil
	case "unknown_license_num":
		return WeakIdentifierTypeUnknownLicenseNum, nil
	case "unknown_industrial_license_num":
		return WeakIdentifierTypeUnknownIndustrialLicenseNum, nil
	case "cze_file_number":
		return WeakIdentifierTypeCzeFileNumber, nil
	case "mex_tm_app_no":
		return WeakIdentifierTypeMexTmAppNo, nil
	case "mex_tm_reg_no":
		return WeakIdentifierTypeMexTmRegNo, nil
	case "jordan_company_no":
		return WeakIdentifierTypeJordanCompanyNo, nil
	case "cn_qcc_internal_id":
		return WeakIdentifierTypeCnQccInternalId, nil
	case "jor_sol_prop_institution_number":
		return WeakIdentifierTypeJorSolPropInstitutionNumber, nil
	case "usa_nc_corp_no":
		return WeakIdentifierTypeUsaNcCorpNo, nil
	case "usa_nm_license_id":
		return WeakIdentifierTypeUsaNmLicenseId, nil
	case "khm_tin_number":
		return WeakIdentifierTypeKhmTinNumber, nil
	case "usa_mo_entity_id":
		return WeakIdentifierTypeUsaMoEntityId, nil
	case "usa_mo_corp_number":
		return WeakIdentifierTypeUsaMoCorpNumber, nil
	case "mac_raem_case_number":
		return WeakIdentifierTypeMacRaemCaseNumber, nil
	case "hnd_tegucigalpa_notary":
		return WeakIdentifierTypeHndTegucigalpaNotary, nil
	case "lbn_family_number":
		return WeakIdentifierTypeLbnFamilyNumber, nil
	case "tx_bexar_property_geo_id":
		return WeakIdentifierTypeTxBexarPropertyGeoId, nil
	case "pak_cnic_family_no":
		return WeakIdentifierTypePakCnicFamilyNo, nil
	case "rou_commercial_register_id":
		return WeakIdentifierTypeRouCommercialRegisterId, nil
	case "south_africa_partial_id_number":
		return WeakIdentifierTypeSouthAfricaPartialIdNumber, nil
	case "prk_internal_trade_id":
		return WeakIdentifierTypePrkInternalTradeId, nil
	case "chn_customs_registration_code":
		return WeakIdentifierTypeChnCustomsRegistrationCode, nil
	case "aut_former_cr_no":
		return WeakIdentifierTypeAutFormerCrNo, nil
	case "aut_natl_bank_no":
		return WeakIdentifierTypeAutNatlBankNo, nil
	case "lva_person_id_masked":
		return WeakIdentifierTypeLvaPersonIdMasked, nil
	case "lva_court_case_id":
		return WeakIdentifierTypeLvaCourtCaseId, nil
	case "chn_cninfo_legal_person_id":
		return WeakIdentifierTypeChnCninfoLegalPersonId, nil
	case "rks_business_number":
		return WeakIdentifierTypeRksBusinessNumber, nil
	case "rks_fiscal_number":
		return WeakIdentifierTypeRksFiscalNumber, nil
	case "mdg_nif_number":
		return WeakIdentifierTypeMdgNifNumber, nil
	case "mdg_rcs_number":
		return WeakIdentifierTypeMdgRcsNumber, nil
	case "vat":
		return WeakIdentifierTypeVat, nil
	case "usa_il_chicago_site_number":
		return WeakIdentifierTypeUsaIlChicagoSiteNumber, nil
	case "usa_generic_ticker":
		return WeakIdentifierTypeUsaGenericTicker, nil
	case "ven_rnc_number":
		return WeakIdentifierTypeVenRncNumber, nil
	case "usa_imports_system_identity_id":
		return WeakIdentifierTypeUsaImportsSystemIdentityId, nil
	case "col_bill_of_lading":
		return WeakIdentifierTypeColBillOfLading, nil
	case "col_secop_no":
		return WeakIdentifierTypeColSecopNo, nil
	case "pol_regon_number":
		return WeakIdentifierTypePolRegonNumber, nil
	case "pol_nip_number":
		return WeakIdentifierTypePolNipNumber, nil
	case "bill_of_lading":
		return WeakIdentifierTypeBillOfLading, nil
	case "pan_ibc_ruc":
		return WeakIdentifierTypePanIbcRuc, nil
	case "pak_old_company_code":
		return WeakIdentifierTypePakOldCompanyCode, nil
	case "jpn_permit_no":
		return WeakIdentifierTypeJpnPermitNo, nil
	case "dma_corporate_registry_entity_num":
		return WeakIdentifierTypeDmaCorporateRegistryEntityNum, nil
	case "atg_corporate_registry_entity_num":
		return WeakIdentifierTypeAtgCorporateRegistryEntityNum, nil
	case "lca_corporate_registry_entity_num":
		return WeakIdentifierTypeLcaCorporateRegistryEntityNum, nil
	case "ven_manifiesto_number":
		return WeakIdentifierTypeVenManifiestoNumber, nil
	case "col_matricula_mercantil":
		return WeakIdentifierTypeColMatriculaMercantil, nil
	case "maritime_mobile_service_identity":
		return WeakIdentifierTypeMaritimeMobileServiceIdentity, nil
	case "usa_former_fein":
		return WeakIdentifierTypeUsaFormerFein, nil
	case "usa_cbp_wro_id":
		return WeakIdentifierTypeUsaCbpWroId, nil
	case "ccs_ship_class_number":
		return WeakIdentifierTypeCcsShipClassNumber, nil
	case "tur_partial_mersis_number":
		return WeakIdentifierTypeTurPartialMersisNumber, nil
	case "tur_office_registration_number":
		return WeakIdentifierTypeTurOfficeRegistrationNumber, nil
	case "partial_ven_cedula":
		return WeakIdentifierTypePartialVenCedula, nil
	case "rus_cbr_id":
		return WeakIdentifierTypeRusCbrId, nil
	case "geo_state_registration_number":
		return WeakIdentifierTypeGeoStateRegistrationNumber, nil
	case "bih_mbs_number":
		return WeakIdentifierTypeBihMbsNumber, nil
	}
	var t WeakIdentifierType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WeakIdentifierType) Ptr() *WeakIdentifierType {
	return &w
}

// A map of fields appearing in the audit logs for this event
type EventInfo = map[string]interface{}

type HistoryInfo struct {
	User        string    `json:"user"`
	Environment string    `json:"environment"`
	Event       string    `json:"event"`
	Data        EventInfo `json:"data,omitempty"`
	Timestamp   string    `json:"timestamp"`
}

type UsageInfo struct {
	Entity         *int `json:"entity,omitempty"`
	EntitySummary  *int `json:"entity_summary,omitempty"`
	Record         *int `json:"record,omitempty"`
	Resolve        *int `json:"resolve,omitempty"`
	SearchEntities *int `json:"search_entities,omitempty"`
	SearchRecords  *int `json:"search_records,omitempty"`
	SearchTrade    *int `json:"search_trade,omitempty"`
	Traversal      *int `json:"traversal,omitempty"`
}

type MatchExplanation struct {
	Matched  *string `json:"matched,omitempty"`
	Uploaded *string `json:"uploaded,omitempty"`
}

type ResolutionResponseFields struct {
	Name        []string   `json:"name,omitempty"`
	Identifier  []string   `json:"identifier,omitempty"`
	Country     []Country  `json:"country,omitempty"`
	Address     []string   `json:"address,omitempty"`
	DateOfBirth []string   `json:"date_of_birth,omitempty"`
	Contact     []string   `json:"contact,omitempty"`
	Type        []Entities `json:"type,omitempty"`
}

type ResolutionResult struct {
	Score          float64                        `json:"score"`
	EntityId       string                         `json:"entity_id"`
	Label          string                         `json:"label"`
	Type           Entities                       `json:"type,omitempty"`
	Identifiers    []*Identifier                  `json:"identifiers,omitempty"`
	PsaId          *int                           `json:"psa_id,omitempty"`
	Addresses      []string                       `json:"addresses,omitempty"`
	Countries      []Country                      `json:"countries,omitempty"`
	Sources        []string                       `json:"sources,omitempty"`
	MatchedQueries []string                       `json:"matched_queries,omitempty"`
	Highlight      map[string][]string            `json:"highlight,omitempty"`
	Explanation    map[string][]*MatchExplanation `json:"explanation,omitempty"`
}

// Bad gateway
type BadGatewayResponse = interface{}

// Incorrectly formatted request
type BadRequestResponse = interface{}

// Connection error
type ConnectionErrorResponse = interface{}

// Internal server error occurred.
type InternalServerErrorResponse = interface{}

// Resource not found or does not exist.
type MethodNotAllowedResponse struct {
	Status  int      `json:"status"`
	Message []string `json:"message,omitempty"`
	Success bool     `json:"success"`
}

// Request made in an unacceptable state. This is most commonly due to parameter validation errors.
type NotAcceptableResponse struct {
	Status  int      `json:"status"`
	Message []string `json:"message,omitempty"`
	Success bool     `json:"success"`
}

// Request made with an unsupported HTTP method.
type NotFoundResponse struct {
	Status  int      `json:"status"`
	Message []string `json:"message,omitempty"`
	Success bool     `json:"success"`
}

// Too many requests within too short of a period. The reply will contain a retry-after header that indicates when the client can safely retry.
type RateLimitResponse = interface{}

// Request made without valid token.
type UnauthorizedResponse = interface{}

// A type of legal entity in a given jurisdiction (e.g. 'LLC,' 'Sociedad Anonima,' 'Private Company Limited by Shares')
type CompanyType = *string

type Coordinate struct {
	Lat     float64 `json:"lat"`
	Lng     float64 `json:"lng"`
	Address string  `json:"address"`
}

type EmbeddedEntity struct {
	Id                EntityId                `json:"id"`
	Label             EntityLabel             `json:"label"`
	Degree            EntityDegree            `json:"degree"`
	Closed            EntityClosed            `json:"closed"`
	EntityUrl         EntityUrl               `json:"entity_url"`
	Pep               EntityPep               `json:"pep"`
	PsaCount          EntityPsaCount          `json:"psa_count"`
	Sanctioned        EntitySanctioned        `json:"sanctioned"`
	Type              Entities                `json:"type,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty"`
	Countries         []Country               `json:"countries,omitempty"`
	SourceCount       SourceCount             `json:"source_count,omitempty"`
	Addresses         EntityAddresses         `json:"addresses,omitempty"`
	DateOfBirth       EntityDob               `json:"date_of_birth,omitempty"`
	RelationshipCount EntityRelationshipCount `json:"relationship_count,omitempty"`
}

// List of physical addresses associated with the entity. See https://docs.sayari.com/attributes/#address
type EntityAddresses = []string

// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
type EntityClosed = bool

// Birth date of a person. See https://docs.sayari.com/attributes/#date-of-birth
type EntityDob = *string

// Number of outgoing relationships
type EntityDegree = int

type EntityDetails struct {
	Id                EntityId                `json:"id"`
	Label             EntityLabel             `json:"label"`
	Degree            EntityDegree            `json:"degree"`
	Closed            EntityClosed            `json:"closed"`
	EntityUrl         EntityUrl               `json:"entity_url"`
	Pep               EntityPep               `json:"pep"`
	PsaCount          EntityPsaCount          `json:"psa_count"`
	Sanctioned        EntitySanctioned        `json:"sanctioned"`
	Type              Entities                `json:"type,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty"`
	Countries         []Country               `json:"countries,omitempty"`
	SourceCount       SourceCount             `json:"source_count,omitempty"`
	Addresses         EntityAddresses         `json:"addresses,omitempty"`
	DateOfBirth       EntityDob               `json:"date_of_birth,omitempty"`
	RelationshipCount EntityRelationshipCount `json:"relationship_count,omitempty"`
	RegistrationDate  EntityRegistrationDate  `json:"registration_date,omitempty"`
	TranslatedLabel   EntityTranslatedLabel   `json:"translated_label,omitempty"`
	HsCode            EntityHsCode            `json:"hs_code,omitempty"`
	ShipmentArrival   ShipmentArrival         `json:"shipment_arrival,omitempty"`
	ShipmentDeparture ShipmentDepartue        `json:"shipment_departure,omitempty"`
	CompanyType       *string                 `json:"company_type,omitempty"`
	LatestStatus      *Status                 `json:"latest_status,omitempty"`
	Risk              EntityRisk              `json:"risk,omitempty"`
	Attributes        *AttributeDetails       `json:"attributes,omitempty"`
	Relationships     *EntityRelationships    `json:"relationships,omitempty"`
	PossiblySameAs    *PossiblySameAs         `json:"possibly_same_as,omitempty"`
	ReferencedBy      *ReferencedBy           `json:"referenced_by,omitempty"`
	Matches           map[string][]string     `json:"matches,omitempty"`
}

// Harmonized Tariff Schedule Code associated with the entity/shipment
type EntityHsCode = *string

// Unique identifier of the entity
type EntityId = string

// Display name of the entity
type EntityLabel = string

// Number of entities that are Possibly the Same As (PSA) the entity.
type EntityPsaCount = int

// True if the entity has the "Politically Exposed Person (PEP)" risk factor, otherwise false. See https://docs.sayari.com/risk/#politically-exposed-person-pep
type EntityPep = bool

// Type (registered/incorporated/active) and date of the earliest significant activity associated with the entity. Will appear as 'Registered YYYY-MM-DD'
type EntityRegistrationDate = *string

// Count of related entities by relationship type.
type EntityRelationshipCount = map[Relationships]int

// All relationships the entity is a part of.
type EntityRelationships struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*RelationshipData `json:"data,omitempty"`
}

// Risk factors associated with the entity.
type EntityRisk = map[Risk]*RiskData

// True if the entity has the "Sanctioned" risk factor, otherwise false. See https://docs.sayari.com/risk/#sanctioned
type EntitySanctioned = bool

// Label in English if available. Translation performed by Sayari.
type EntityTranslatedLabel = *string

// Convenience URL to the entity in the API.
type EntityUrl = string

// Identifiers associated with the entity. See https://docs.sayari.com/attributes/#identifier
type Identifier struct {
	Value string `json:"value"`
	Type  string `json:"type"`
	Label string `json:"label"`
}

// The entity that is possibly the same as the target entity.
type PsaEntity struct {
	Id                EntityId                `json:"id"`
	Label             EntityLabel             `json:"label"`
	Degree            EntityDegree            `json:"degree"`
	Closed            EntityClosed            `json:"closed"`
	EntityUrl         EntityUrl               `json:"entity_url"`
	Pep               EntityPep               `json:"pep"`
	PsaCount          EntityPsaCount          `json:"psa_count"`
	Sanctioned        EntitySanctioned        `json:"sanctioned"`
	Type              Entities                `json:"type,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty"`
	Countries         []Country               `json:"countries,omitempty"`
	SourceCount       SourceCount             `json:"source_count,omitempty"`
	Addresses         EntityAddresses         `json:"addresses,omitempty"`
	DateOfBirth       EntityDob               `json:"date_of_birth,omitempty"`
	RelationshipCount EntityRelationshipCount `json:"relationship_count,omitempty"`
	Risk              EntityRisk              `json:"risk,omitempty"`
}

// List of entities that are Possibly the Same As (PSA) the entity.
type PossiblySameAs struct {
	Limit int                   `json:"limit"`
	Size  *SizeInfo             `json:"size,omitempty"`
	Data  []*PossiblySameAsData `json:"data,omitempty"`
}

type PossiblySameAsData struct {
	Editable *bool                             `json:"editable,omitempty"`
	Entity   *PsaEntity                        `json:"entity,omitempty"`
	Matches  map[string][]*PossiblySameAsMatch `json:"matches,omitempty"`
}

type PossiblySameAsMatch struct {
	Source string `json:"source"`
	Target string `json:"target"`
}

type RecordDetails struct {
	Id              RecordId            `json:"id"`
	Label           string              `json:"label"`
	Source          SourceId            `json:"source"`
	PublicationDate *string             `json:"publication_date,omitempty"`
	AcquisitionDate string              `json:"acquisition_date"`
	ReferencesCount int                 `json:"references_count"`
	RecordUrl       string              `json:"record_url"`
	SourceUrl       *string             `json:"source_url,omitempty"`
	Matches         map[string][]string `json:"matches,omitempty"`
}

// The unique identifier for a record in the database
type RecordId = string

// List of records that reference the entity.
type ReferencedBy struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*ReferencedByData `json:"data,omitempty"`
}

type ReferencedByData struct {
	Record *RecordDetails       `json:"record,omitempty"`
	Type   ReferencedByDataType `json:"type,omitempty"`
}

type ReferencedByDataType string

const (
	ReferencedByDataTypeAbout    ReferencedByDataType = "about"
	ReferencedByDataTypeMentions ReferencedByDataType = "mentions"
)

func NewReferencedByDataTypeFromString(s string) (ReferencedByDataType, error) {
	switch s {
	case "about":
		return ReferencedByDataTypeAbout, nil
	case "mentions":
		return ReferencedByDataTypeMentions, nil
	}
	var t ReferencedByDataType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReferencedByDataType) Ptr() *ReferencedByDataType {
	return &r
}

type RelationshipAttributeValue struct {
	Value     *string `json:"value,omitempty"`
	NumShares *int    `json:"num_shares,omitempty"`
}

type RelationshipData struct {
	Target        *EmbeddedEntity   `json:"target,omitempty"`
	Types         RelationshipTypes `json:"types,omitempty"`
	Dates         []string          `json:"dates,omitempty"`
	FirstObserved *string           `json:"first_observed,omitempty"`
	LastObserved  *string           `json:"last_observed,omitempty"`
	StartDate     *string           `json:"start_date,omitempty"`
}

type RelationshipInfo struct {
	Record          string                                       `json:"record"`
	Attributes      map[Attributes][]*RelationshipAttributeValue `json:"attributes,omitempty"`
	FromDate        *string                                      `json:"from_date,omitempty"`
	AcquisitionDate string                                       `json:"acquisition_date"`
	PublicationDate *string                                      `json:"publication_date,omitempty"`
}

type RelationshipTypes = map[Relationships][]*RelationshipInfo

type Risk string

const (
	RiskSheffieldHallamUniversityForcedLaborEntity                Risk = "sheffield_hallam_university_forced_labor_entity"
	RiskExportControls                                            Risk = "export_controls"
	RiskForcedLaborXinjiangUflpa                                  Risk = "forced_labor_xinjiang_uflpa"
	RiskPsaForcedLaborXinjiangUflpa                               Risk = "psa_forced_labor_xinjiang_uflpa"
	RiskPsaExportControls                                         Risk = "psa_export_controls"
	RiskPsaSheffieldHallamUniversityForcedLaborEntity             Risk = "psa_sheffield_hallam_university_forced_labor_entity"
	RiskPsaSanctioned                                             Risk = "psa_sanctioned"
	RiskPsaWroEntity                                              Risk = "psa_wro_entity"
	RiskSanctioned                                                Risk = "sanctioned"
	RiskWroEntity                                                 Risk = "wro_entity"
	RiskExportToSanctioned                                        Risk = "export_to_sanctioned"
	RiskExportToSoe                                               Risk = "export_to_soe"
	RiskExportsBisHighPriorityItems                               Risk = "exports_bis_high_priority_items"
	RiskForcedLaborSheffieldHallamUniversityReportsOriginDirect   Risk = "forced_labor_sheffield_hallam_university_reports_origin_direct"
	RiskForcedLaborWroOriginDirect                                Risk = "forced_labor_wro_origin_direct"
	RiskForcedLaborXinjiangOriginDirect                           Risk = "forced_labor_xinjiang_origin_direct"
	RiskForcedLaborUflpaOriginDirect                              Risk = "forced_labor_uflpa_origin_direct"
	RiskForcedLaborXinjiangGeospatial                             Risk = "forced_labor_xinjiang_geospatial"
	RiskForcedLaborXinjiangRegistration                           Risk = "forced_labor_xinjiang_registration"
	RiskForcedLaborChinaKeywords                                  Risk = "forced_labor_china_keywords"
	RiskOwnedByXinjiangEntity                                     Risk = "owned_by_xinjiang_entity"
	RiskOwnerOfForcedLaborXinjiangEntity                          Risk = "owner_of_forced_labor_xinjiang_entity"
	RiskForcedLaborSheffieldHallamUniversityReportsOriginSubtier  Risk = "forced_labor_sheffield_hallam_university_reports_origin_subtier"
	RiskForcedLaborWroOriginSubtier                               Risk = "forced_labor_wro_origin_subtier"
	RiskForcedLaborXinjiangOriginSubtier                          Risk = "forced_labor_xinjiang_origin_subtier"
	RiskForcedLaborUflpaOriginSubtier                             Risk = "forced_labor_uflpa_origin_subtier"
	RiskForcedLaborXinjiangContractors                            Risk = "forced_labor_xinjiang_contractors"
	RiskForcedLaborXinjiangName                                   Risk = "forced_labor_xinjiang_name"
	RiskFormerlySanctioned                                        Risk = "formerly_sanctioned"
	RiskFormerWroEntity                                           Risk = "former_wro_entity"
	RiskMeuListContractors                                        Risk = "meu_list_contractors"
	RiskImportsBisHighPriorityItems                               Risk = "imports_bis_high_priority_items"
	RiskOwnedBySheffieldHallamUniversityReportsForcedLaborEntity  Risk = "owned_by_sheffield_hallam_university_reports_forced_labor_entity"
	RiskOwnedByEntityInExportControls                             Risk = "owned_by_entity_in_export_controls"
	RiskOwnedByBisMeuEntity                                       Risk = "owned_by_bis_meu_entity"
	RiskOwnedBySection1260HEntity                                 Risk = "owned_by_section_1260h_entity"
	RiskOwnedByCmicEntity                                         Risk = "owned_by_cmic_entity"
	RiskOwnedByForcedLaborXinjiangUflpa                           Risk = "owned_by_forced_labor_xinjiang_uflpa"
	RiskOwnedBySanctionedEntity                                   Risk = "owned_by_sanctioned_entity"
	RiskOwnedBySoe                                                Risk = "owned_by_soe"
	RiskOwnedByWroEntity                                          Risk = "owned_by_wro_entity"
	RiskOwnerOfRegulatoryActionEntity                             Risk = "owner_of_regulatory_action_entity"
	RiskOwnerOfSheffieldHallamUniversityReportsForcedLaborEntity  Risk = "owner_of_sheffield_hallam_university_reports_forced_labor_entity"
	RiskOwnerOfExportControlsEntity                               Risk = "owner_of_export_controls_entity"
	RiskOwnerOfForcedLaborXinjiangUflpa                           Risk = "owner_of_forced_labor_xinjiang_uflpa"
	RiskOwnerOfSanctionedEntity                                   Risk = "owner_of_sanctioned_entity"
	RiskOwnerOfSoe                                                Risk = "owner_of_soe"
	RiskOwnerOfWroEntity                                          Risk = "owner_of_wro_entity"
	RiskPep                                                       Risk = "pep"
	RiskPsaForcedLaborXinjiangGeospatial                          Risk = "psa_forced_labor_xinjiang_geospatial"
	RiskPsaForcedLaborXinjiangRegistration                        Risk = "psa_forced_labor_xinjiang_registration"
	RiskPsaForcedLaborXinjiangName                                Risk = "psa_forced_labor_xinjiang_name"
	RiskPsaRegulatoryAction                                       Risk = "psa_regulatory_action"
	RiskPsaStateOwned                                             Risk = "psa_state_owned"
	RiskPsaPep                                                    Risk = "psa_pep"
	RiskRegulatoryAction                                          Risk = "regulatory_action"
	RiskStateOwned                                                Risk = "state_owned"
	RiskReputationalRiskBriberyAndCorruption                      Risk = "reputational_risk_bribery_and_corruption"
	RiskReputationalRiskCybercrime                                Risk = "reputational_risk_cybercrime"
	RiskReputationalRiskFinancialCrime                            Risk = "reputational_risk_financial_crime"
	RiskReputationalRiskForcedLabor                               Risk = "reputational_risk_forced_labor"
	RiskFormerSoe                                                 Risk = "former_soe"
	RiskLawEnforcementAction                                      Risk = "law_enforcement_action"
	RiskReputationalRiskOrganizedCrime                            Risk = "reputational_risk_organized_crime"
	RiskReputationalRiskOther                                     Risk = "reputational_risk_other"
	RiskSheffieldHallamUniversityForcedLaborReportsEntityAdjacent Risk = "sheffield_hallam_university_forced_labor_reports_entity_adjacent"
	RiskExportControlsAdjacent                                    Risk = "export_controls_adjacent"
	RiskForcedLaborXinjiangUflpaAdjacent                          Risk = "forced_labor_xinjiang_uflpa_adjacent"
	RiskPepAdjacent                                               Risk = "pep_adjacent"
	RiskSanctionedAdjacent                                        Risk = "sanctioned_adjacent"
	RiskSoeAdjacent                                               Risk = "soe_adjacent"
	RiskWroEntityAdjacent                                         Risk = "wro_entity_adjacent"
	RiskReputationalRiskTerrorism                                 Risk = "reputational_risk_terrorism"
	RiskBaselAml                                                  Risk = "basel_aml"
	RiskCpiScore                                                  Risk = "cpi_score"
	RiskEuHighRiskThird                                           Risk = "eu_high_risk_third"
)

func NewRiskFromString(s string) (Risk, error) {
	switch s {
	case "sheffield_hallam_university_forced_labor_entity":
		return RiskSheffieldHallamUniversityForcedLaborEntity, nil
	case "export_controls":
		return RiskExportControls, nil
	case "forced_labor_xinjiang_uflpa":
		return RiskForcedLaborXinjiangUflpa, nil
	case "psa_forced_labor_xinjiang_uflpa":
		return RiskPsaForcedLaborXinjiangUflpa, nil
	case "psa_export_controls":
		return RiskPsaExportControls, nil
	case "psa_sheffield_hallam_university_forced_labor_entity":
		return RiskPsaSheffieldHallamUniversityForcedLaborEntity, nil
	case "psa_sanctioned":
		return RiskPsaSanctioned, nil
	case "psa_wro_entity":
		return RiskPsaWroEntity, nil
	case "sanctioned":
		return RiskSanctioned, nil
	case "wro_entity":
		return RiskWroEntity, nil
	case "export_to_sanctioned":
		return RiskExportToSanctioned, nil
	case "export_to_soe":
		return RiskExportToSoe, nil
	case "exports_bis_high_priority_items":
		return RiskExportsBisHighPriorityItems, nil
	case "forced_labor_sheffield_hallam_university_reports_origin_direct":
		return RiskForcedLaborSheffieldHallamUniversityReportsOriginDirect, nil
	case "forced_labor_wro_origin_direct":
		return RiskForcedLaborWroOriginDirect, nil
	case "forced_labor_xinjiang_origin_direct":
		return RiskForcedLaborXinjiangOriginDirect, nil
	case "forced_labor_uflpa_origin_direct":
		return RiskForcedLaborUflpaOriginDirect, nil
	case "forced_labor_xinjiang_geospatial":
		return RiskForcedLaborXinjiangGeospatial, nil
	case "forced_labor_xinjiang_registration":
		return RiskForcedLaborXinjiangRegistration, nil
	case "forced_labor_china_keywords":
		return RiskForcedLaborChinaKeywords, nil
	case "owned_by_xinjiang_entity":
		return RiskOwnedByXinjiangEntity, nil
	case "owner_of_forced_labor_xinjiang_entity":
		return RiskOwnerOfForcedLaborXinjiangEntity, nil
	case "forced_labor_sheffield_hallam_university_reports_origin_subtier":
		return RiskForcedLaborSheffieldHallamUniversityReportsOriginSubtier, nil
	case "forced_labor_wro_origin_subtier":
		return RiskForcedLaborWroOriginSubtier, nil
	case "forced_labor_xinjiang_origin_subtier":
		return RiskForcedLaborXinjiangOriginSubtier, nil
	case "forced_labor_uflpa_origin_subtier":
		return RiskForcedLaborUflpaOriginSubtier, nil
	case "forced_labor_xinjiang_contractors":
		return RiskForcedLaborXinjiangContractors, nil
	case "forced_labor_xinjiang_name":
		return RiskForcedLaborXinjiangName, nil
	case "formerly_sanctioned":
		return RiskFormerlySanctioned, nil
	case "former_wro_entity":
		return RiskFormerWroEntity, nil
	case "meu_list_contractors":
		return RiskMeuListContractors, nil
	case "imports_bis_high_priority_items":
		return RiskImportsBisHighPriorityItems, nil
	case "owned_by_sheffield_hallam_university_reports_forced_labor_entity":
		return RiskOwnedBySheffieldHallamUniversityReportsForcedLaborEntity, nil
	case "owned_by_entity_in_export_controls":
		return RiskOwnedByEntityInExportControls, nil
	case "owned_by_bis_meu_entity":
		return RiskOwnedByBisMeuEntity, nil
	case "owned_by_section_1260h_entity":
		return RiskOwnedBySection1260HEntity, nil
	case "owned_by_cmic_entity":
		return RiskOwnedByCmicEntity, nil
	case "owned_by_forced_labor_xinjiang_uflpa":
		return RiskOwnedByForcedLaborXinjiangUflpa, nil
	case "owned_by_sanctioned_entity":
		return RiskOwnedBySanctionedEntity, nil
	case "owned_by_soe":
		return RiskOwnedBySoe, nil
	case "owned_by_wro_entity":
		return RiskOwnedByWroEntity, nil
	case "owner_of_regulatory_action_entity":
		return RiskOwnerOfRegulatoryActionEntity, nil
	case "owner_of_sheffield_hallam_university_reports_forced_labor_entity":
		return RiskOwnerOfSheffieldHallamUniversityReportsForcedLaborEntity, nil
	case "owner_of_export_controls_entity":
		return RiskOwnerOfExportControlsEntity, nil
	case "owner_of_forced_labor_xinjiang_uflpa":
		return RiskOwnerOfForcedLaborXinjiangUflpa, nil
	case "owner_of_sanctioned_entity":
		return RiskOwnerOfSanctionedEntity, nil
	case "owner_of_soe":
		return RiskOwnerOfSoe, nil
	case "owner_of_wro_entity":
		return RiskOwnerOfWroEntity, nil
	case "pep":
		return RiskPep, nil
	case "psa_forced_labor_xinjiang_geospatial":
		return RiskPsaForcedLaborXinjiangGeospatial, nil
	case "psa_forced_labor_xinjiang_registration":
		return RiskPsaForcedLaborXinjiangRegistration, nil
	case "psa_forced_labor_xinjiang_name":
		return RiskPsaForcedLaborXinjiangName, nil
	case "psa_regulatory_action":
		return RiskPsaRegulatoryAction, nil
	case "psa_state_owned":
		return RiskPsaStateOwned, nil
	case "psa_pep":
		return RiskPsaPep, nil
	case "regulatory_action":
		return RiskRegulatoryAction, nil
	case "state_owned":
		return RiskStateOwned, nil
	case "reputational_risk_bribery_and_corruption":
		return RiskReputationalRiskBriberyAndCorruption, nil
	case "reputational_risk_cybercrime":
		return RiskReputationalRiskCybercrime, nil
	case "reputational_risk_financial_crime":
		return RiskReputationalRiskFinancialCrime, nil
	case "reputational_risk_forced_labor":
		return RiskReputationalRiskForcedLabor, nil
	case "former_soe":
		return RiskFormerSoe, nil
	case "law_enforcement_action":
		return RiskLawEnforcementAction, nil
	case "reputational_risk_organized_crime":
		return RiskReputationalRiskOrganizedCrime, nil
	case "reputational_risk_other":
		return RiskReputationalRiskOther, nil
	case "sheffield_hallam_university_forced_labor_reports_entity_adjacent":
		return RiskSheffieldHallamUniversityForcedLaborReportsEntityAdjacent, nil
	case "export_controls_adjacent":
		return RiskExportControlsAdjacent, nil
	case "forced_labor_xinjiang_uflpa_adjacent":
		return RiskForcedLaborXinjiangUflpaAdjacent, nil
	case "pep_adjacent":
		return RiskPepAdjacent, nil
	case "sanctioned_adjacent":
		return RiskSanctionedAdjacent, nil
	case "soe_adjacent":
		return RiskSoeAdjacent, nil
	case "wro_entity_adjacent":
		return RiskWroEntityAdjacent, nil
	case "reputational_risk_terrorism":
		return RiskReputationalRiskTerrorism, nil
	case "basel_aml":
		return RiskBaselAml, nil
	case "cpi_score":
		return RiskCpiScore, nil
	case "eu_high_risk_third":
		return RiskEuHighRiskThird, nil
	}
	var t Risk
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Risk) Ptr() *Risk {
	return &r
}

type RiskData struct {
	Value    interface{}            `json:"value,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Level    RiskLevel              `json:"level,omitempty"`
}

type RiskLevel string

const (
	RiskLevelCritical RiskLevel = "critical"
	RiskLevelHigh     RiskLevel = "high"
	RiskLevelElevated RiskLevel = "elevated"
	RiskLevelRelevant RiskLevel = "relevant"
)

func NewRiskLevelFromString(s string) (RiskLevel, error) {
	switch s {
	case "critical":
		return RiskLevelCritical, nil
	case "high":
		return RiskLevelHigh, nil
	case "elevated":
		return RiskLevelElevated, nil
	case "relevant":
		return RiskLevelRelevant, nil
	}
	var t RiskLevel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RiskLevel) Ptr() *RiskLevel {
	return &r
}

type SearchField string

const (
	SearchFieldName            SearchField = "name"
	SearchFieldIdentifier      SearchField = "identifier"
	SearchFieldAddress         SearchField = "address"
	SearchFieldBusinessPurpose SearchField = "business_purpose"
	SearchFieldDateOfBirth     SearchField = "date_of_birth"
	SearchFieldContact         SearchField = "contact"
)

func NewSearchFieldFromString(s string) (SearchField, error) {
	switch s {
	case "name":
		return SearchFieldName, nil
	case "identifier":
		return SearchFieldIdentifier, nil
	case "address":
		return SearchFieldAddress, nil
	case "business_purpose":
		return SearchFieldBusinessPurpose, nil
	case "date_of_birth":
		return SearchFieldDateOfBirth, nil
	case "contact":
		return SearchFieldContact, nil
	}
	var t SearchField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchField) Ptr() *SearchField {
	return &s
}

// Arrival date of a shipment.
type ShipmentArrival = *string

// Departure date of a shipment.
type ShipmentDepartue = *string

// Number of records associated with the entity, grouped by source.
type SourceCount = map[string]*SourceCountInfo

// The number of time the entity is referenced by a source.
type SourceCountInfo struct {
	Count int    `json:"count"`
	Label string `json:"label"`
}

// The most recent satus of an entity and when that status was observed.
type Status struct {
	Status string  `json:"status"`
	Date   *string `json:"date,omitempty"`
}

type Aggregations struct {
	ByVolume []*VolumeAggregates `json:"byVolume,omitempty"`
}

type Bucket struct {
	Key      string `json:"key"`
	DocCount int    `json:"doc_count"`
}

type BusinessPurpose struct {
	Value *string `json:"value,omitempty"`
	Code  *string `json:"code,omitempty"`
}

type LatestShipmentDate struct {
	DocCountErrorUpperBound int       `json:"doc_count_error_upper_bound"`
	SumOtherDocCount        int       `json:"sum_other_doc_count"`
	Buckets                 []*Bucket `json:"buckets,omitempty"`
}

type MonetaryValue struct {
	Value    float64   `json:"value"`
	Currency *Currency `json:"currency,omitempty"`
	Context  *string   `json:"context,omitempty"`
}

type Shipment struct {
	MonetaryValue   []*MonetaryValue             `json:"monetary_value,omitempty"`
	Dst             []*SourceOrDestinationEntity `json:"dst,omitempty"`
	Weight          []*Weight                    `json:"weight,omitempty"`
	BusinessPurpose []*BusinessPurpose           `json:"business_purpose,omitempty"`
	Identifier      []*ShipmentIdentifier        `json:"identifier,omitempty"`
	Country         []*ShipmentCountry           `json:"country,omitempty"`
	Src             []*SourceOrDestinationEntity `json:"src,omitempty"`
	Metadata        *ShipmentMetadata            `json:"metadata,omitempty"`
}

type ShipmentCountry struct {
	Value Country `json:"value,omitempty"`
}

type ShipmentHits struct {
	Hits []*Shipment `json:"hits,omitempty"`
}

type ShipmentIdentifier struct {
	Value string               `json:"value"`
	Type  *BothIdentifierTypes `json:"type,omitempty"`
}

type ShipmentMetadata struct {
	ArrivalCountry   []Country          `json:"arrival_country,omitempty"`
	Jurisdiction     []Country          `json:"jurisdiction,omitempty"`
	ReferenceId      string             `json:"reference_id"`
	EntityId         EntityId           `json:"entity_id"`
	DepartureAddress *AddressProperties `json:"departure_address,omitempty"`
	Type             string             `json:"type"`
	Sources          []string           `json:"sources,omitempty"`
	DepartureCountry []Country          `json:"departure_country,omitempty"`
}

type SourceOrDestinationEntity struct {
	RiskFactors     map[Risk]interface{} `json:"risk_factors,omitempty"`
	Name            []string             `json:"name,omitempty"`
	BusinessPurpose []*BusinessPurpose   `json:"business_purpose,omitempty"`
	Country         []Country            `json:"country,omitempty"`
	EntityId        EntityId             `json:"entity_id"`
	Type            Relationships        `json:"type,omitempty"`
}

type Supplier struct {
	Id                EntityId                `json:"id"`
	Label             EntityLabel             `json:"label"`
	Degree            EntityDegree            `json:"degree"`
	Closed            EntityClosed            `json:"closed"`
	EntityUrl         EntityUrl               `json:"entity_url"`
	Pep               EntityPep               `json:"pep"`
	PsaCount          EntityPsaCount          `json:"psa_count"`
	Sanctioned        EntitySanctioned        `json:"sanctioned"`
	Type              Entities                `json:"type,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty"`
	Countries         []Country               `json:"countries,omitempty"`
	SourceCount       SourceCount             `json:"source_count,omitempty"`
	Addresses         EntityAddresses         `json:"addresses,omitempty"`
	DateOfBirth       EntityDob               `json:"date_of_birth,omitempty"`
	RelationshipCount EntityRelationshipCount `json:"relationship_count,omitempty"`
	RegistrationDate  EntityRegistrationDate  `json:"registration_date,omitempty"`
	TranslatedLabel   EntityTranslatedLabel   `json:"translated_label,omitempty"`
	HsCode            EntityHsCode            `json:"hs_code,omitempty"`
	ShipmentArrival   ShipmentArrival         `json:"shipment_arrival,omitempty"`
	ShipmentDeparture ShipmentDepartue        `json:"shipment_departure,omitempty"`
	CompanyType       *string                 `json:"company_type,omitempty"`
	LatestStatus      *Status                 `json:"latest_status,omitempty"`
	Risk              EntityRisk              `json:"risk,omitempty"`
	Attributes        *AttributeDetails       `json:"attributes,omitempty"`
	Relationships     *EntityRelationships    `json:"relationships,omitempty"`
	PossiblySameAs    *PossiblySameAs         `json:"possibly_same_as,omitempty"`
	ReferencedBy      *ReferencedBy           `json:"referenced_by,omitempty"`
	Matches           map[string][]string     `json:"matches,omitempty"`
	Metadata          *SupplierMetadata       `json:"metadata,omitempty"`
}

type SupplierMetadata struct {
	LatestShipmentDate *string `json:"latestShipmentDate,omitempty"`
	Shipments          int     `json:"shipments"`
}

type SupplierOrBuyerHits struct {
	Hits         []*Supplier   `json:"hits,omitempty"`
	Aggregations *Aggregations `json:"aggregations,omitempty"`
}

type VolumeAggregates struct {
	Key                string              `json:"key"`
	DocCount           int                 `json:"doc_count"`
	LatestShipmentDate *LatestShipmentDate `json:"latest_shipment_date,omitempty"`
}

type Weight struct {
	Value float64 `json:"value"`
	Unit  string  `json:"unit"`
	Type  string  `json:"type"`
}

type ShortestPathData struct {
	Target *EntityDetails   `json:"target,omitempty"`
	Path   []*TraversalPath `json:"path,omitempty"`
}

type TraversalData struct {
	Source string           `json:"source"`
	Target *EntityDetails   `json:"target,omitempty"`
	Path   []*TraversalPath `json:"path,omitempty"`
}

type TraversalPath struct {
	Field         string                                `json:"field"`
	Entity        *EntityDetails                        `json:"entity,omitempty"`
	Relationships map[string]*TraversalRelationshipData `json:"relationships,omitempty"`
}

type TraversalRelationshipData struct {
	Values       []*RelationshipInfo `json:"values,omitempty"`
	LastObserved *string             `json:"last_observed,omitempty"`
}
