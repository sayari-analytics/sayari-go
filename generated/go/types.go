// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
)

type AttributeProperties struct {
	Editable    bool   `json:"editable" url:"editable"`
	RecordCount int    `json:"record_count" url:"record_count"`
	Id          string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AttributeProperties) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeProperties) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeResponseData struct {
	Value      interface{}            `json:"value,omitempty" url:"value,omitempty"`
	Properties []*AttributeProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AttributeResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeResponseData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type CountQualifier string

const (
	CountQualifierEq  CountQualifier = "eq"
	CountQualifierGte CountQualifier = "gte"
)

func NewCountQualifierFromString(s string) (CountQualifier, error) {
	switch s {
	case "eq":
		return CountQualifierEq, nil
	case "gte":
		return CountQualifierGte, nil
	}
	var t CountQualifier
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountQualifier) Ptr() *CountQualifier {
	return &c
}

// Response fields that represent unbounded collections, such as a search result or an entity's attributes or relationships, or a record's references, can all be paginated in cases where the collection is larger than can be efficiently returned in a single request.
type PaginatedResponse struct {
	Limit int             `json:"limit" url:"limit"`
	Size  *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PaginatedResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PaginatedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler PaginatedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PaginatedResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PaginatedResponse) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type QualifiedCount struct {
	Count     int            `json:"count" url:"count"`
	Qualifier CountQualifier `json:"qualifier" url:"qualifier"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (q *QualifiedCount) GetExtraProperties() map[string]interface{} {
	return q.extraProperties
}

func (q *QualifiedCount) UnmarshalJSON(data []byte) error {
	type unmarshaler QualifiedCount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*q = QualifiedCount(value)

	extraProperties, err := core.ExtractExtraProperties(data, *q)
	if err != nil {
		return err
	}
	q.extraProperties = extraProperties

	q._rawJSON = json.RawMessage(data)
	return nil
}

func (q *QualifiedCount) String() string {
	if len(q._rawJSON) > 0 {
		if value, err := core.StringifyJSON(q._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(q); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", q)
}

type AdditionalInformationData struct {
	Editable    *bool                            `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                         `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                              `json:"record_count" url:"record_count"`
	Properties  *AdditionalInformationProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdditionalInformationData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdditionalInformationData) UnmarshalJSON(data []byte) error {
	type unmarshaler AdditionalInformationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdditionalInformationData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdditionalInformationData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// This is a generic attribute used to hold miscellaneous information not covered by any other attribute. Includes "value" (for the attribute itself), "type" (a name: e.g., "Real property description"), and "extra" (a miscellaneous field to hold any other details).
type AdditionalInformationInfo struct {
	Limit  int                          `json:"limit" url:"limit"`
	Size   *QualifiedCount              `json:"size,omitempty" url:"size,omitempty"`
	Data   []*AdditionalInformationData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}                  `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                         `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdditionalInformationInfo) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdditionalInformationInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler AdditionalInformationInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdditionalInformationInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdditionalInformationInfo) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AdditionalInformationProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The type of additional information being conveyed
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The additional information itself
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AdditionalInformationProperties) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AdditionalInformationProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler AdditionalInformationProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AdditionalInformationProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AdditionalInformationProperties) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AddressData struct {
	Editable    *bool              `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string           `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                `json:"record_count" url:"record_count"`
	Properties  *AddressProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AddressData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddressData) UnmarshalJSON(data []byte) error {
	type unmarshaler AddressData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddressData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddressData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// A physical location description. Addresses may exist as a simple string ("123 South Main St., South Bend, IN 46556"), or may be in smaller chunks with separate fields ("Number: 123", "Street name: South Main ..."). Where possible, these fields will be parsed using the [Libpostal ontology](https://github.com/openvenues/libpostal#parser-labels), which facilitates more robust address analysis and comparison.
type AddressInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*AddressData  `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AddressInfo) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddressInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler AddressInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddressInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddressInfo) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AddressProperties struct {
	Building *string `json:"building,omitempty" url:"building,omitempty"`
	// For category queries like "restaurants", etc.
	Category *string `json:"category,omitempty" url:"category,omitempty"`
	// Any human settlement, including cities, towns, villages, hamlets, localities, etc.
	City *string `json:"city,omitempty" url:"city,omitempty"`
	// Boroughs or districts within a city that serve some official purpose (e.g., "Brooklyn", "Hackney", or "Bratislava IV")
	CityDistrict *string `json:"city_district,omitempty" url:"city_district,omitempty"`
	// Sovereign nations and their dependent territories; anything with an ISO 3166 code
	Country *string `json:"country,omitempty" url:"country,omitempty"`
	// Informal subdivision of a country without any political status
	CountryRegion *string `json:"country_region,omitempty" url:"country_region,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// Numbered/lettered entrance
	Entrance *string `json:"entrance,omitempty" url:"entrance,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// Building/site name (e.g., "Brooklyn Academy of Music", "Empire State Building")
	House *string `json:"house,omitempty" url:"house,omitempty"`
	// Usually refers to the external (street-facing) building number. In some jurisdictions, this may be a compound number that also includes an apartment/block number.
	HouseNumber *string `json:"house_number,omitempty" url:"house_number,omitempty"`
	// Named islands (e.g., "Maui")
	Island *string `json:"island,omitempty" url:"island,omitempty"`
	// The language in which the address was provided in the record
	Language *Language `json:"language,omitempty" url:"language,omitempty"`
	// Expressions indicating a floor number (e.g., "3rd Floor", "Ground Floor")
	Level        *string `json:"level,omitempty" url:"level,omitempty"`
	MetroStation *string `json:"metro_station,omitempty" url:"metro_station,omitempty"`
	// Phrases like "in", "near", etc. used after a category phrase, to help with parsing queries like "restaurants in Brooklyn"
	Near       *string `json:"near,omitempty" url:"near,omitempty"`
	Normalized string  `json:"normalized" url:"normalized"`
	// Typically found in non-physical (mail-only) addresses
	PoBox *string `json:"po_box,omitempty" url:"po_box,omitempty"`
	// Postal codes used for mail sorting
	Postcode *string `json:"postcode,omitempty" url:"postcode,omitempty"`
	// A code describing the precision of the X and Y coordinates
	PrecisionCode *string `json:"precision_code,omitempty" url:"precision_code,omitempty"`
	// Street name(s)
	Road *string `json:"road,omitempty" url:"road,omitempty"`
	// Numbered/lettered staircase
	Staircase *string `json:"staircase,omitempty" url:"staircase,omitempty"`
	// A first-level administrative division, including provinces and departments. Scotland, Northern Ireland, Wales, and England in the UK are also mapped to "state" (convention commonly used in geocoding tools).
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// A second-level administrative division or county
	StateDistrict *string `json:"state_district,omitempty" url:"state_district,omitempty"`
	// Usually an unofficial neighborhood name, like "Harlem", "South Bronx", or "Crown Heights"
	Suburb *string `json:"suburb,omitempty" url:"suburb,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The address value translated to English
	Translated *string `json:"translated,omitempty" url:"translated,omitempty"`
	// The address value transliterated to English
	Transliterated *string `json:"transliterated,omitempty" url:"transliterated,omitempty"`
	// Indicates what the address is referring to. For example, it could be a physical address, mailing address, or other address type.
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// An apartment, unit, office, lot, or other secondary unit designator
	Unit  *string `json:"unit,omitempty" url:"unit,omitempty"`
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	// Currently only used for appending “West Indies” after the country name, a pattern frequently used in the English-speaking Caribbean (e.g., “Jamaica, West Indies”)
	WorldRegion *string `json:"world_region,omitempty" url:"world_region,omitempty"`
	// The X coordinate (longitude) of the address
	X *float64 `json:"x,omitempty" url:"x,omitempty"`
	// The Y coordinate (latitude) of the address
	Y *float64 `json:"y,omitempty" url:"y,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AddressProperties) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddressProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler AddressProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddressProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddressProperties) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// This enumerated type indicates the kind of location an address is referring to.
type AddressType string

const (
	// The port to which a shipment is sent
	AddressTypeArrival AddressType = "arrival"
	// The port from which a shipment leaves
	AddressTypeDeparture AddressType = "departure"
	// An address at which an entity receives mail
	AddressTypeMailing AddressType = "mailing"
	// An address at which an entity has a physical presence
	AddressTypePhysical AddressType = "physical"
	// An address an entity has listed for its registration
	AddressTypeRegistered AddressType = "registered"
	// An address at which an entity conducts its operations
	AddressTypeBusiness AddressType = "business"
)

func NewAddressTypeFromString(s string) (AddressType, error) {
	switch s {
	case "arrival":
		return AddressTypeArrival, nil
	case "departure":
		return AddressTypeDeparture, nil
	case "mailing":
		return AddressTypeMailing, nil
	case "physical":
		return AddressTypePhysical, nil
	case "registered":
		return AddressTypeRegistered, nil
	case "business":
		return AddressTypeBusiness, nil
	}
	var t AddressType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a AddressType) Ptr() *AddressType {
	return &a
}

type AttributeData struct {
	Editable    *bool    `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int      `json:"record_count" url:"record_count"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AttributeData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeData) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeData) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeDetails struct {
	AdditionalInformation *AdditionalInformationInfo `json:"additional_information,omitempty" url:"additional_information,omitempty"`
	Address               *AddressInfo               `json:"address,omitempty" url:"address,omitempty"`
	BusinessPurpose       *BusinessPurposeInfo       `json:"business_purpose,omitempty" url:"business_purpose,omitempty"`
	CompanyType           *CompanyTypeInfo           `json:"company_type,omitempty" url:"company_type,omitempty"`
	Contact               *ContactInfo               `json:"contact,omitempty" url:"contact,omitempty"`
	Country               *CountryInfo               `json:"country,omitempty" url:"country,omitempty"`
	DateOfBirth           *DateOfBirthInfo           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	Finances              *FinancesInfo              `json:"finances,omitempty" url:"finances,omitempty"`
	Financials            *FinancialsInfo            `json:"financials,omitempty" url:"financials,omitempty"`
	Gender                *GenderInfo                `json:"gender,omitempty" url:"gender,omitempty"`
	Generic               *GenericInfo               `json:"generic,omitempty" url:"generic,omitempty"`
	Identifier            *IdentifierInfo            `json:"identifier,omitempty" url:"identifier,omitempty"`
	Measurement           *MeasurementInfo           `json:"measurement,omitempty" url:"measurement,omitempty"`
	MonetaryValue         *MonetaryValueInfo         `json:"monetary_value,omitempty" url:"monetary_value,omitempty"`
	Name                  *NameInfo                  `json:"name,omitempty" url:"name,omitempty"`
	PersonStatus          *PersonStatusInfo          `json:"person_status,omitempty" url:"person_status,omitempty"`
	Position              *PositionInfo              `json:"position,omitempty" url:"position,omitempty"`
	RiskIntelligence      *RiskIntelligenceInfo      `json:"risk_intelligence,omitempty" url:"risk_intelligence,omitempty"`
	Shares                *SharesInfo                `json:"shares,omitempty" url:"shares,omitempty"`
	Status                *StatusInfo                `json:"status,omitempty" url:"status,omitempty"`
	TranslatedName        *TranslatedNameInfo        `json:"translated_name,omitempty" url:"translated_name,omitempty"`
	WeakIdentifier        *WeakIdentifierInfo        `json:"weak_identifier,omitempty" url:"weak_identifier,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *AttributeDetails) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeDetails) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type Attributes string

const (
	AttributesPosition              Attributes = "position"
	AttributesBusinessPurpose       Attributes = "business_purpose"
	AttributesGender                Attributes = "gender"
	AttributesCountry               Attributes = "country"
	AttributesAdditionalInformation Attributes = "additional_information"
	AttributesGeneric               Attributes = "generic"
	AttributesCompanyType           Attributes = "company_type"
	AttributesMeasurement           Attributes = "measurement"
	AttributesFinancials            Attributes = "financials"
	AttributesStatus                Attributes = "status"
	AttributesFinances              Attributes = "finances"
	AttributesTranslatedName        Attributes = "translated_name"
	AttributesPersonStatus          Attributes = "person_status"
	AttributesDateOfBirth           Attributes = "date_of_birth"
	AttributesShares                Attributes = "shares"
	AttributesRiskIntelligence      Attributes = "risk_intelligence"
	AttributesAddress               Attributes = "address"
	AttributesContact               Attributes = "contact"
	AttributesMonetaryValue         Attributes = "monetary_value"
	AttributesIdentifier            Attributes = "identifier"
	AttributesWeakIdentifier        Attributes = "weak_identifier"
	AttributesName                  Attributes = "name"
)

func NewAttributesFromString(s string) (Attributes, error) {
	switch s {
	case "position":
		return AttributesPosition, nil
	case "business_purpose":
		return AttributesBusinessPurpose, nil
	case "gender":
		return AttributesGender, nil
	case "country":
		return AttributesCountry, nil
	case "additional_information":
		return AttributesAdditionalInformation, nil
	case "generic":
		return AttributesGeneric, nil
	case "company_type":
		return AttributesCompanyType, nil
	case "measurement":
		return AttributesMeasurement, nil
	case "financials":
		return AttributesFinancials, nil
	case "status":
		return AttributesStatus, nil
	case "finances":
		return AttributesFinances, nil
	case "translated_name":
		return AttributesTranslatedName, nil
	case "person_status":
		return AttributesPersonStatus, nil
	case "date_of_birth":
		return AttributesDateOfBirth, nil
	case "shares":
		return AttributesShares, nil
	case "risk_intelligence":
		return AttributesRiskIntelligence, nil
	case "address":
		return AttributesAddress, nil
	case "contact":
		return AttributesContact, nil
	case "monetary_value":
		return AttributesMonetaryValue, nil
	case "identifier":
		return AttributesIdentifier, nil
	case "weak_identifier":
		return AttributesWeakIdentifier, nil
	case "name":
		return AttributesName, nil
	}
	var t Attributes
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a Attributes) Ptr() *Attributes {
	return &a
}

type BusinessPurposeData struct {
	Editable    *bool                      `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                   `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                        `json:"record_count" url:"record_count"`
	Properties  *BusinessPurposeProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BusinessPurposeData) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessPurposeData) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessPurposeData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessPurposeData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessPurposeData) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Text and/or a code (NAICS, NACE, ISIC, etc.) that describes what a company is legally allowed to do or produce
type BusinessPurposeInfo struct {
	Limit  int                    `json:"limit" url:"limit"`
	Size   *QualifiedCount        `json:"size,omitempty" url:"size,omitempty"`
	Data   []*BusinessPurposeData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}            `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                   `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BusinessPurposeInfo) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessPurposeInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessPurposeInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessPurposeInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessPurposeInfo) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type BusinessPurposeProperties struct {
	// A code
	Code *string `json:"code,omitempty" url:"code,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// The type of code (e.g., "ISIC4", "NACE1")
	Standard *BusinessPurposeStandard `json:"standard,omitempty" url:"standard,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// A text description
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BusinessPurposeProperties) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessPurposeProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessPurposeProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessPurposeProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessPurposeProperties) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

// Business purpose standard enums describe the type of code listed in a business purpose attribute, which may or may not allow for [Pyisic](https://github.com/sayari-analytics/pyisic) conversions/lookups.
type BusinessPurposeStandard string

const (
	// Classificação Nacional de Atividades Econômicas - Brazil National Economic Activity Classification, Rev. 2.0
	BusinessPurposeStandardCnae2 BusinessPurposeStandard = "CNAE2"
	// International Standard Industrial Classification, Rev. 3
	BusinessPurposeStandardIsic3 BusinessPurposeStandard = "ISIC3"
	// International Standard Industrial Classification, Rev. 3.1
	BusinessPurposeStandardIsic31 BusinessPurposeStandard = "ISIC31"
	// International Standard Industrial Classification, Rev. 4
	BusinessPurposeStandardIsic4 BusinessPurposeStandard = "ISIC4"
	// Japan Standard Industrial Classification, Rev. 13
	BusinessPurposeStandardJsic13 BusinessPurposeStandard = "JSIC13"
	// Korean Standard Industry Classification, Rev. 10
	BusinessPurposeStandardKsic10 BusinessPurposeStandard = "KSIC10"
	// Nomenclature of Economic Activities, Rev. 1
	BusinessPurposeStandardNace1 BusinessPurposeStandard = "NACE1"
	// Nomenclature of Economic Activities, Rev. 2
	BusinessPurposeStandardNace2 BusinessPurposeStandard = "NACE2"
	// North American Industry Classification System, Rev. 2017
	BusinessPurposeStandardNaics2017 BusinessPurposeStandard = "NAICS2017"
	// Standardna klasifikacija dejavnosti - Slovenia Standard Classification of Activities, Rev. 2002
	BusinessPurposeStandardSkd2002 BusinessPurposeStandard = "SKD2002"
	// Standardna klasifikacija dejavnosti - Slovenia Standard Classification of Activities, Rev. 2008
	BusinessPurposeStandardSkd2008 BusinessPurposeStandard = "SKD2008"
	// การจัดประเภทมาตรฐานอุตสาหกรรมประเทศไทย ปี 2552 - Thailand Standard Industrial Classification, Rev. 2009
	BusinessPurposeStandardTsic2552 BusinessPurposeStandard = "TSIC2552"
	// Nomenclature des activités économiques - Belgium Nomenclature of Economic Activities, Rev. 2003
	BusinessPurposeStandardNacebel2003 BusinessPurposeStandard = "NACEBEL2003"
	// Nomenclature des activités économiques - Belgium Nomenclature of Economic Activities, Rev. 2008
	BusinessPurposeStandardNacebel2008 BusinessPurposeStandard = "NACEBEL2008"
	// Nomenclature d'activités française - French Nomenclature of Economic Activities, Rev. 1
	BusinessPurposeStandardNaf1 BusinessPurposeStandard = "NAF1"
	// Nomenclature d'activités française - French Nomenclature of Economic Activities, Rev. 2
	BusinessPurposeStandardNaf2 BusinessPurposeStandard = "NAF2"
	// Экономикалык Ишмердиктердин Тyрлөрүнүн Мамлекеттик Классификатору - Kyrgyz State Economic Activity Classification, Rev. 2011
	BusinessPurposeStandardGced2011 BusinessPurposeStandard = "GCED2011"
	// Sistema de Clasificación Industrial de América del Norte - Mexico North American Industry Classification System, Rev. 2018
	BusinessPurposeStandardScian2018 BusinessPurposeStandard = "SCIAN2018"
	// Clasificador Nacional de Actividades Económicas(CNAE) - Cuba National Economic Activity Classifications, Rev. 2021
	BusinessPurposeStandardCcnae2021 BusinessPurposeStandard = "CCNAE2021"
	// Clasificatorul Activităţilor Din Economia Moldovei - Moldova Classification of Economic Activities, Rev. 2005
	BusinessPurposeStandardCaem2005 BusinessPurposeStandard = "CAEM2005"
	// De Standaard Bedrijfsindeling (SBI) - Netherlands Standard Company Classification, Rev. 2008
	BusinessPurposeStandardSbi2008 BusinessPurposeStandard = "SBI2008"
	// Harmonized System Codes (standardized numerical method of classifying traded products)
	BusinessPurposeStandardHs BusinessPurposeStandard = "HS"
	// Standard Industrial Classification (SIC) Code List (USA)
	BusinessPurposeStandardSic BusinessPurposeStandard = "SIC"
	// Singapore Standard Industrial Classification (national standard for classifying economic activities undertaken by economic units)
	BusinessPurposeStandardSsic2020 BusinessPurposeStandard = "SSIC2020"
	// Polska Klasyfikacja Działalności (PKD) - Polish Classification of Activities, Rev. 2007
	BusinessPurposeStandardPkd2007 BusinessPurposeStandard = "PKD2007"
	// European System of Accounts
	BusinessPurposeStandardEsa2010 BusinessPurposeStandard = "ESA2010"
	// San Marino Codici ATECO
	BusinessPurposeStandardAteco BusinessPurposeStandard = "ATECO"
	// Code d'activité économique Quebec
	BusinessPurposeStandardCae BusinessPurposeStandard = "CAE"
	// Finland Standard Industrial Classification TOL 2008
	BusinessPurposeStandardTol2008 BusinessPurposeStandard = "TOL2008"
	// Abu Dhabi Global Market Activity Code
	BusinessPurposeStandardAdgm BusinessPurposeStandard = "ADGM"
)

func NewBusinessPurposeStandardFromString(s string) (BusinessPurposeStandard, error) {
	switch s {
	case "CNAE2":
		return BusinessPurposeStandardCnae2, nil
	case "ISIC3":
		return BusinessPurposeStandardIsic3, nil
	case "ISIC31":
		return BusinessPurposeStandardIsic31, nil
	case "ISIC4":
		return BusinessPurposeStandardIsic4, nil
	case "JSIC13":
		return BusinessPurposeStandardJsic13, nil
	case "KSIC10":
		return BusinessPurposeStandardKsic10, nil
	case "NACE1":
		return BusinessPurposeStandardNace1, nil
	case "NACE2":
		return BusinessPurposeStandardNace2, nil
	case "NAICS2017":
		return BusinessPurposeStandardNaics2017, nil
	case "SKD2002":
		return BusinessPurposeStandardSkd2002, nil
	case "SKD2008":
		return BusinessPurposeStandardSkd2008, nil
	case "TSIC2552":
		return BusinessPurposeStandardTsic2552, nil
	case "NACEBEL2003":
		return BusinessPurposeStandardNacebel2003, nil
	case "NACEBEL2008":
		return BusinessPurposeStandardNacebel2008, nil
	case "NAF1":
		return BusinessPurposeStandardNaf1, nil
	case "NAF2":
		return BusinessPurposeStandardNaf2, nil
	case "GCED2011":
		return BusinessPurposeStandardGced2011, nil
	case "SCIAN2018":
		return BusinessPurposeStandardScian2018, nil
	case "CCNAE2021":
		return BusinessPurposeStandardCcnae2021, nil
	case "CAEM2005":
		return BusinessPurposeStandardCaem2005, nil
	case "SBI2008":
		return BusinessPurposeStandardSbi2008, nil
	case "HS":
		return BusinessPurposeStandardHs, nil
	case "SIC":
		return BusinessPurposeStandardSic, nil
	case "SSIC2020":
		return BusinessPurposeStandardSsic2020, nil
	case "PKD2007":
		return BusinessPurposeStandardPkd2007, nil
	case "ESA2010":
		return BusinessPurposeStandardEsa2010, nil
	case "ATECO":
		return BusinessPurposeStandardAteco, nil
	case "CAE":
		return BusinessPurposeStandardCae, nil
	case "TOL2008":
		return BusinessPurposeStandardTol2008, nil
	case "ADGM":
		return BusinessPurposeStandardAdgm, nil
	}
	var t BusinessPurposeStandard
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (b BusinessPurposeStandard) Ptr() *BusinessPurposeStandard {
	return &b
}

// Company status enums describe a normalized set of statuses to which we map specific terms describing a company's status in a source document.
type CompanyStatus string

const (
	CompanyStatusSeized              CompanyStatus = "seized"
	CompanyStatusInReceivership      CompanyStatus = "in_receivership"
	CompanyStatusRegistrationRevoked CompanyStatus = "registration_revoked"
	CompanyStatusOpening             CompanyStatus = "opening"
	CompanyStatusDissolved           CompanyStatus = "dissolved"
	// e.g., "Active", "Operating," "In good standing"
	CompanyStatusActive CompanyStatus = "active"
	// e.g., "Inactive", "Administratively dissolved". Used when the company still exists but is not operating normally.
	CompanyStatusInactive CompanyStatus = "inactive"
	// e.g., "Closed", "Struck from the register", "Registration canceled". Used when the company no longer legally exists.
	CompanyStatusClosed CompanyStatus = "closed"
	// e.g., "In liquidation", "Dissolved". Used when the company is on track to close.
	CompanyStatusClosing CompanyStatus = "closing"
	// e.g., "Registration date"
	CompanyStatusRegistered CompanyStatus = "registered"
	// e.g., "Date of incorporation"
	CompanyStatusIncorporated CompanyStatus = "incorporated"
	// e.g., "In receivership", "Bankruptcy trustee appointed", "Seized". Used when an exernal party is granted legal/operational control over the company, typically to steer it through a bankruptcy or winding-up process.
	CompanyStatusUnderExternalControl CompanyStatus = "under_external_control"
	// e.g., "Expired", "Inactive". Used when the business license is no longer active and up to date.
	CompanyStatusExpired CompanyStatus = "expired"
	// e.g., "Expanded", "Barred". Used when a broker has been involved in one or more disclosure events involving certain final criminal matters, regulatory actions, civil judgment proceedings, or arbitrations or civil litigations.
	CompanyStatusExpanded CompanyStatus = "expanded"
	// e.g., "Terminated", "Closed". Used when the licensing organization terminates a business license, barring the individual and/or company from performing business activities with the association of the organization.
	CompanyStatusTerminated CompanyStatus = "terminated"
)

func NewCompanyStatusFromString(s string) (CompanyStatus, error) {
	switch s {
	case "seized":
		return CompanyStatusSeized, nil
	case "in_receivership":
		return CompanyStatusInReceivership, nil
	case "registration_revoked":
		return CompanyStatusRegistrationRevoked, nil
	case "opening":
		return CompanyStatusOpening, nil
	case "dissolved":
		return CompanyStatusDissolved, nil
	case "active":
		return CompanyStatusActive, nil
	case "inactive":
		return CompanyStatusInactive, nil
	case "closed":
		return CompanyStatusClosed, nil
	case "closing":
		return CompanyStatusClosing, nil
	case "registered":
		return CompanyStatusRegistered, nil
	case "incorporated":
		return CompanyStatusIncorporated, nil
	case "under_external_control":
		return CompanyStatusUnderExternalControl, nil
	case "expired":
		return CompanyStatusExpired, nil
	case "expanded":
		return CompanyStatusExpanded, nil
	case "terminated":
		return CompanyStatusTerminated, nil
	}
	var t CompanyStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CompanyStatus) Ptr() *CompanyStatus {
	return &c
}

type CompanyTypeData struct {
	Editable    *bool                  `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string               `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                    `json:"record_count" url:"record_count"`
	Properties  *CompanyTypeProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyTypeData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyTypeData) UnmarshalJSON(data []byte) error {
	type unmarshaler CompanyTypeData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompanyTypeData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyTypeData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// A type of legal entity in a given jurisdiction (e.g., "LLC", "Sociedad Anonima", "Private Company Limited by Shares")
type CompanyTypeInfo struct {
	Limit  int                `json:"limit" url:"limit"`
	Size   *QualifiedCount    `json:"size,omitempty" url:"size,omitempty"`
	Data   []*CompanyTypeData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}        `json:"next,omitempty" url:"next,omitempty"`
	Offset *int               `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyTypeInfo) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyTypeInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler CompanyTypeInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompanyTypeInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyTypeInfo) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CompanyTypeProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	Value  *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CompanyTypeProperties) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CompanyTypeProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler CompanyTypeProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CompanyTypeProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CompanyTypeProperties) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ContactData struct {
	Editable    *bool              `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string           `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                `json:"record_count" url:"record_count"`
	Properties  *ContactProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ContactData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContactData) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Contact information for an entity
type ContactInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*ContactData  `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ContactInfo) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContactInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactInfo) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ContactProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// Email, fax, phone number, or URL
	Type *ContactType `json:"type,omitempty" url:"type,omitempty"`
	// The contact detail itself (e.g., "jdoe@sayari.com", "202-555-5555")
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *ContactProperties) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *ContactProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler ContactProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = ContactProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *ContactProperties) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Contact type enums describe different methods of contact reported in a record about a given entity.
type ContactType string

const (
	// Any kind of phone number
	ContactTypePhoneNumber ContactType = "phone_number"
	// A fax number
	ContactTypeFax ContactType = "fax"
	// An email address
	ContactTypeEmail ContactType = "email"
	// A URL
	ContactTypeUrl ContactType = "url"
)

func NewContactTypeFromString(s string) (ContactType, error) {
	switch s {
	case "phone_number":
		return ContactTypePhoneNumber, nil
	case "fax":
		return ContactTypeFax, nil
	case "email":
		return ContactTypeEmail, nil
	case "url":
		return ContactTypeUrl, nil
	}
	var t ContactType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ContactType) Ptr() *ContactType {
	return &c
}

// Country enums are normalized representations of country names. [Source](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3#ECU)
type Country string

const (
	// Aruba
	CountryAbw Country = "ABW"
	// Afghanistan
	CountryAfg Country = "AFG"
	// Angola
	CountryAgo Country = "AGO"
	// Anguilla
	CountryAia Country = "AIA"
	// Åland Islands
	CountryAla Country = "ALA"
	// Albania
	CountryAlb Country = "ALB"
	// Andorra
	CountryAnd Country = "AND"
	// United Arab Emirates
	CountryAre Country = "ARE"
	// Argentina
	CountryArg Country = "ARG"
	// Armenia
	CountryArm Country = "ARM"
	// American Samoa
	CountryAsm Country = "ASM"
	// Antarctica
	CountryAta Country = "ATA"
	// French Southern and Antarctic Lands
	CountryAtf Country = "ATF"
	// Antigua and Barbuda
	CountryAtg Country = "ATG"
	// Australia
	CountryAus Country = "AUS"
	// Austria
	CountryAut Country = "AUT"
	// Azerbaijan
	CountryAze Country = "AZE"
	// Burundi
	CountryBdi Country = "BDI"
	// Belgium
	CountryBel Country = "BEL"
	// Benin
	CountryBen Country = "BEN"
	// Burkina Faso
	CountryBfa Country = "BFA"
	// Bangladesh
	CountryBgd Country = "BGD"
	// Bulgaria
	CountryBgr Country = "BGR"
	// Bahrain
	CountryBhr Country = "BHR"
	// Bahamas
	CountryBhs Country = "BHS"
	// Bosnia and Herzegovina
	CountryBih Country = "BIH"
	// Saint Barthélemy
	CountryBlm Country = "BLM"
	// Saint Helena, Ascension and Tristan da Cunha
	CountryShn Country = "SHN"
	// Belarus
	CountryBlr Country = "BLR"
	// Belize
	CountryBlz Country = "BLZ"
	// Bermuda
	CountryBmu Country = "BMU"
	// Bolivia
	CountryBol Country = "BOL"
	// Caribbean Netherlands
	CountryBes Country = "BES"
	// Brazil
	CountryBra Country = "BRA"
	// Barbados
	CountryBrb Country = "BRB"
	// Brunei
	CountryBrn Country = "BRN"
	// Bhutan
	CountryBtn Country = "BTN"
	// Bouvet Island
	CountryBvt Country = "BVT"
	// Botswana
	CountryBwa Country = "BWA"
	// Central African Republic
	CountryCaf Country = "CAF"
	// Canada
	CountryCan Country = "CAN"
	// Cocos (Keeling) Islands
	CountryCck Country = "CCK"
	// Switzerland
	CountryChe Country = "CHE"
	// Chile
	CountryChl Country = "CHL"
	// China
	CountryChn Country = "CHN"
	// Ivory Coast
	CountryCiv Country = "CIV"
	// Cameroon
	CountryCmr Country = "CMR"
	// Democratic Republic of the Congo
	CountryCod Country = "COD"
	// Republic of the Congo
	CountryCog Country = "COG"
	// Cook Islands
	CountryCok Country = "COK"
	// Colombia
	CountryCol Country = "COL"
	// Comoros
	CountryCom Country = "COM"
	// Cape Verde
	CountryCpv Country = "CPV"
	// Costa Rica
	CountryCri Country = "CRI"
	// Cuba
	CountryCub Country = "CUB"
	// Curaçao
	CountryCuw Country = "CUW"
	// Christmas Island
	CountryCxr Country = "CXR"
	// Cayman Islands
	CountryCym Country = "CYM"
	// Cyprus
	CountryCyp Country = "CYP"
	// Czechia
	CountryCze Country = "CZE"
	// Germany
	CountryDeu Country = "DEU"
	// Djibouti
	CountryDji Country = "DJI"
	// Dominica
	CountryDma Country = "DMA"
	// Denmark
	CountryDnk Country = "DNK"
	// Dominican Republic
	CountryDom Country = "DOM"
	// Algeria
	CountryDza Country = "DZA"
	// Ecuador
	CountryEcu Country = "ECU"
	// Egypt
	CountryEgy Country = "EGY"
	// Eritrea
	CountryEri Country = "ERI"
	// Western Sahara
	CountryEsh Country = "ESH"
	// Spain
	CountryEsp Country = "ESP"
	// Estonia
	CountryEst Country = "EST"
	// Ethiopia
	CountryEth Country = "ETH"
	// Finland
	CountryFin Country = "FIN"
	// Fiji
	CountryFji Country = "FJI"
	// Falkland Islands
	CountryFlk Country = "FLK"
	// France
	CountryFra Country = "FRA"
	// Faroe Islands
	CountryFro Country = "FRO"
	// Micronesia
	CountryFsm Country = "FSM"
	// Gabon
	CountryGab Country = "GAB"
	// United Kingdom
	CountryGbr Country = "GBR"
	// Georgia
	CountryGeo Country = "GEO"
	// Guernsey
	CountryGgy Country = "GGY"
	// Ghana
	CountryGha Country = "GHA"
	// Gibraltar
	CountryGib Country = "GIB"
	// Guinea
	CountryGin Country = "GIN"
	// Guadeloupe
	CountryGlp Country = "GLP"
	// Gambia
	CountryGmb Country = "GMB"
	// Guinea-Bissau
	CountryGnb Country = "GNB"
	// Equatorial Guinea
	CountryGnq Country = "GNQ"
	// Greece
	CountryGrc Country = "GRC"
	// Grenada
	CountryGrd Country = "GRD"
	// Greenland
	CountryGrl Country = "GRL"
	// Guatemala
	CountryGtm Country = "GTM"
	// French Guiana
	CountryGuf Country = "GUF"
	// Guam
	CountryGum Country = "GUM"
	// Guyana
	CountryGuy Country = "GUY"
	// Hong Kong
	CountryHkg Country = "HKG"
	// Heard Island and McDonald Islands
	CountryHmd Country = "HMD"
	// Honduras
	CountryHnd Country = "HND"
	// Croatia
	CountryHrv Country = "HRV"
	// Haiti
	CountryHti Country = "HTI"
	// Hungary
	CountryHun Country = "HUN"
	// Indonesia
	CountryIdn Country = "IDN"
	// Isle of Man
	CountryImn Country = "IMN"
	// India
	CountryInd Country = "IND"
	// British Indian Ocean Territory
	CountryIot Country = "IOT"
	// Ireland
	CountryIrl Country = "IRL"
	// Iran
	CountryIrn Country = "IRN"
	// Iraq
	CountryIrq Country = "IRQ"
	// Iceland
	CountryIsl Country = "ISL"
	// Israel
	CountryIsr Country = "ISR"
	// Italy
	CountryIta Country = "ITA"
	// Jamaica
	CountryJam Country = "JAM"
	// Jersey
	CountryJey Country = "JEY"
	// Jordan
	CountryJor Country = "JOR"
	// Japan
	CountryJpn Country = "JPN"
	// Kazakhstan
	CountryKaz Country = "KAZ"
	// Kenya
	CountryKen Country = "KEN"
	// Kyrgyzstan
	CountryKgz Country = "KGZ"
	// Cambodia
	CountryKhm Country = "KHM"
	// Kiribati
	CountryKir Country = "KIR"
	// Saint Kitts and Nevis
	CountryKna Country = "KNA"
	// South Korea
	CountryKor Country = "KOR"
	// Kosovo
	CountryUnk Country = "UNK"
	// Kuwait
	CountryKwt Country = "KWT"
	// Laos
	CountryLao Country = "LAO"
	// Lebanon
	CountryLbn Country = "LBN"
	// Liberia
	CountryLbr Country = "LBR"
	// Libya
	CountryLby Country = "LBY"
	// Saint Lucia
	CountryLca Country = "LCA"
	// Liechtenstein
	CountryLie Country = "LIE"
	// Sri Lanka
	CountryLka Country = "LKA"
	// Lesotho
	CountryLso Country = "LSO"
	// Lithuania
	CountryLtu Country = "LTU"
	// Luxembourg
	CountryLux Country = "LUX"
	// Latvia
	CountryLva Country = "LVA"
	// Macau
	CountryMac Country = "MAC"
	// Saint Martin
	CountryMaf Country = "MAF"
	// Morocco
	CountryMar Country = "MAR"
	// Monaco
	CountryMco Country = "MCO"
	// Moldova
	CountryMda Country = "MDA"
	// Madagascar
	CountryMdg Country = "MDG"
	// Maldives
	CountryMdv Country = "MDV"
	// Mexico
	CountryMex Country = "MEX"
	// Marshall Islands
	CountryMhl Country = "MHL"
	// Macedonia
	CountryMkd Country = "MKD"
	// Mali
	CountryMli Country = "MLI"
	// Malta
	CountryMlt Country = "MLT"
	// Myanmar
	CountryMmr Country = "MMR"
	// Montenegro
	CountryMne Country = "MNE"
	// Mongolia
	CountryMng Country = "MNG"
	// Northern Mariana Islands
	CountryMnp Country = "MNP"
	// Mozambique
	CountryMoz Country = "MOZ"
	// Mauritania
	CountryMrt Country = "MRT"
	// Montserrat
	CountryMsr Country = "MSR"
	// Martinique
	CountryMtq Country = "MTQ"
	// Mauritius
	CountryMus Country = "MUS"
	// Malawi
	CountryMwi Country = "MWI"
	// Malaysia
	CountryMys Country = "MYS"
	// Mayotte
	CountryMyt Country = "MYT"
	// Namibia
	CountryNam Country = "NAM"
	// New Caledonia
	CountryNcl Country = "NCL"
	// Niger
	CountryNer Country = "NER"
	// Norfolk Island
	CountryNfk Country = "NFK"
	// Nigeria
	CountryNga Country = "NGA"
	// Nicaragua
	CountryNic Country = "NIC"
	// Niue
	CountryNiu Country = "NIU"
	// Netherlands
	CountryNld Country = "NLD"
	// Norway
	CountryNor Country = "NOR"
	// Nepal
	CountryNpl Country = "NPL"
	// Nauru
	CountryNru Country = "NRU"
	// New Zealand
	CountryNzl Country = "NZL"
	// Oman
	CountryOmn Country = "OMN"
	// Pakistan
	CountryPak Country = "PAK"
	// Panama
	CountryPan Country = "PAN"
	// Pitcairn Islands
	CountryPcn Country = "PCN"
	// Peru
	CountryPer Country = "PER"
	// Philippines
	CountryPhl Country = "PHL"
	// Palau
	CountryPlw Country = "PLW"
	// Papua New Guinea
	CountryPng Country = "PNG"
	// Poland
	CountryPol Country = "POL"
	// Puerto Rico
	CountryPri Country = "PRI"
	// North Korea
	CountryPrk Country = "PRK"
	// Portugal
	CountryPrt Country = "PRT"
	// Paraguay
	CountryPry Country = "PRY"
	// Palestine
	CountryPse Country = "PSE"
	// French Polynesia
	CountryPyf Country = "PYF"
	// Qatar
	CountryQat Country = "QAT"
	// Réunion
	CountryReu Country = "REU"
	// Romania
	CountryRou Country = "ROU"
	// Russia
	CountryRus Country = "RUS"
	// Rwanda
	CountryRwa Country = "RWA"
	// Saudi Arabia
	CountrySau Country = "SAU"
	// Sudan
	CountrySdn Country = "SDN"
	// Senegal
	CountrySen Country = "SEN"
	// Singapore
	CountrySgp Country = "SGP"
	// South Georgia
	CountrySgs Country = "SGS"
	// Svalbard and Jan Mayen
	CountrySjm Country = "SJM"
	// Solomon Islands
	CountrySlb Country = "SLB"
	// Sierra Leone
	CountrySle Country = "SLE"
	// El Salvador
	CountrySlv Country = "SLV"
	// San Marino
	CountrySmr Country = "SMR"
	// Somalia
	CountrySom Country = "SOM"
	// Saint Pierre and Miquelon
	CountrySpm Country = "SPM"
	// Serbia
	CountrySrb Country = "SRB"
	// South Sudan
	CountrySsd Country = "SSD"
	// São Tomé and Príncipe
	CountryStp Country = "STP"
	// Suriname
	CountrySur Country = "SUR"
	// Slovakia
	CountrySvk Country = "SVK"
	// Slovenia
	CountrySvn Country = "SVN"
	// Sweden
	CountrySwe Country = "SWE"
	// Eswatini
	CountrySwz Country = "SWZ"
	// Sint Maarten
	CountrySxm Country = "SXM"
	// Seychelles
	CountrySyc Country = "SYC"
	// Syria
	CountrySyr Country = "SYR"
	// Turks and Caicos Islands
	CountryTca Country = "TCA"
	// Chad
	CountryTcd Country = "TCD"
	// Togo
	CountryTgo Country = "TGO"
	// Thailand
	CountryTha Country = "THA"
	// Tajikistan
	CountryTjk Country = "TJK"
	// Tokelau
	CountryTkl Country = "TKL"
	// Turkmenistan
	CountryTkm Country = "TKM"
	// Timor-Leste
	CountryTls Country = "TLS"
	// Tonga
	CountryTon Country = "TON"
	// Trinidad and Tobago
	CountryTto Country = "TTO"
	// Tunisia
	CountryTun Country = "TUN"
	// Turkey
	CountryTur Country = "TUR"
	// Tuvalu
	CountryTuv Country = "TUV"
	// Taiwan
	CountryTwn Country = "TWN"
	// Tanzania
	CountryTza Country = "TZA"
	// Uganda
	CountryUga Country = "UGA"
	// Ukraine
	CountryUkr Country = "UKR"
	// United States Minor Outlying Islands
	CountryUmi Country = "UMI"
	// Uruguay
	CountryUry Country = "URY"
	// United States
	CountryUsa Country = "USA"
	// Uzbekistan
	CountryUzb Country = "UZB"
	// Vatican City
	CountryVat Country = "VAT"
	// Saint Vincent and the Grenadines
	CountryVct Country = "VCT"
	// Venezuela
	CountryVen Country = "VEN"
	// British Virgin Islands
	CountryVgb Country = "VGB"
	// United States Virgin Islands
	CountryVir Country = "VIR"
	// Vietnam
	CountryVnm Country = "VNM"
	// Vanuatu
	CountryVut Country = "VUT"
	// Wallis and Futuna
	CountryWlf Country = "WLF"
	// Samoa
	CountryWsm Country = "WSM"
	// Yemen
	CountryYem Country = "YEM"
	// South Africa
	CountryZaf Country = "ZAF"
	// Zambia
	CountryZmb Country = "ZMB"
	// Zimbabwe
	CountryZwe Country = "ZWE"
	// International
	CountryXxx Country = "XXX"
	// Kosovo
	CountryRks Country = "RKS"
)

func NewCountryFromString(s string) (Country, error) {
	switch s {
	case "ABW":
		return CountryAbw, nil
	case "AFG":
		return CountryAfg, nil
	case "AGO":
		return CountryAgo, nil
	case "AIA":
		return CountryAia, nil
	case "ALA":
		return CountryAla, nil
	case "ALB":
		return CountryAlb, nil
	case "AND":
		return CountryAnd, nil
	case "ARE":
		return CountryAre, nil
	case "ARG":
		return CountryArg, nil
	case "ARM":
		return CountryArm, nil
	case "ASM":
		return CountryAsm, nil
	case "ATA":
		return CountryAta, nil
	case "ATF":
		return CountryAtf, nil
	case "ATG":
		return CountryAtg, nil
	case "AUS":
		return CountryAus, nil
	case "AUT":
		return CountryAut, nil
	case "AZE":
		return CountryAze, nil
	case "BDI":
		return CountryBdi, nil
	case "BEL":
		return CountryBel, nil
	case "BEN":
		return CountryBen, nil
	case "BFA":
		return CountryBfa, nil
	case "BGD":
		return CountryBgd, nil
	case "BGR":
		return CountryBgr, nil
	case "BHR":
		return CountryBhr, nil
	case "BHS":
		return CountryBhs, nil
	case "BIH":
		return CountryBih, nil
	case "BLM":
		return CountryBlm, nil
	case "SHN":
		return CountryShn, nil
	case "BLR":
		return CountryBlr, nil
	case "BLZ":
		return CountryBlz, nil
	case "BMU":
		return CountryBmu, nil
	case "BOL":
		return CountryBol, nil
	case "BES":
		return CountryBes, nil
	case "BRA":
		return CountryBra, nil
	case "BRB":
		return CountryBrb, nil
	case "BRN":
		return CountryBrn, nil
	case "BTN":
		return CountryBtn, nil
	case "BVT":
		return CountryBvt, nil
	case "BWA":
		return CountryBwa, nil
	case "CAF":
		return CountryCaf, nil
	case "CAN":
		return CountryCan, nil
	case "CCK":
		return CountryCck, nil
	case "CHE":
		return CountryChe, nil
	case "CHL":
		return CountryChl, nil
	case "CHN":
		return CountryChn, nil
	case "CIV":
		return CountryCiv, nil
	case "CMR":
		return CountryCmr, nil
	case "COD":
		return CountryCod, nil
	case "COG":
		return CountryCog, nil
	case "COK":
		return CountryCok, nil
	case "COL":
		return CountryCol, nil
	case "COM":
		return CountryCom, nil
	case "CPV":
		return CountryCpv, nil
	case "CRI":
		return CountryCri, nil
	case "CUB":
		return CountryCub, nil
	case "CUW":
		return CountryCuw, nil
	case "CXR":
		return CountryCxr, nil
	case "CYM":
		return CountryCym, nil
	case "CYP":
		return CountryCyp, nil
	case "CZE":
		return CountryCze, nil
	case "DEU":
		return CountryDeu, nil
	case "DJI":
		return CountryDji, nil
	case "DMA":
		return CountryDma, nil
	case "DNK":
		return CountryDnk, nil
	case "DOM":
		return CountryDom, nil
	case "DZA":
		return CountryDza, nil
	case "ECU":
		return CountryEcu, nil
	case "EGY":
		return CountryEgy, nil
	case "ERI":
		return CountryEri, nil
	case "ESH":
		return CountryEsh, nil
	case "ESP":
		return CountryEsp, nil
	case "EST":
		return CountryEst, nil
	case "ETH":
		return CountryEth, nil
	case "FIN":
		return CountryFin, nil
	case "FJI":
		return CountryFji, nil
	case "FLK":
		return CountryFlk, nil
	case "FRA":
		return CountryFra, nil
	case "FRO":
		return CountryFro, nil
	case "FSM":
		return CountryFsm, nil
	case "GAB":
		return CountryGab, nil
	case "GBR":
		return CountryGbr, nil
	case "GEO":
		return CountryGeo, nil
	case "GGY":
		return CountryGgy, nil
	case "GHA":
		return CountryGha, nil
	case "GIB":
		return CountryGib, nil
	case "GIN":
		return CountryGin, nil
	case "GLP":
		return CountryGlp, nil
	case "GMB":
		return CountryGmb, nil
	case "GNB":
		return CountryGnb, nil
	case "GNQ":
		return CountryGnq, nil
	case "GRC":
		return CountryGrc, nil
	case "GRD":
		return CountryGrd, nil
	case "GRL":
		return CountryGrl, nil
	case "GTM":
		return CountryGtm, nil
	case "GUF":
		return CountryGuf, nil
	case "GUM":
		return CountryGum, nil
	case "GUY":
		return CountryGuy, nil
	case "HKG":
		return CountryHkg, nil
	case "HMD":
		return CountryHmd, nil
	case "HND":
		return CountryHnd, nil
	case "HRV":
		return CountryHrv, nil
	case "HTI":
		return CountryHti, nil
	case "HUN":
		return CountryHun, nil
	case "IDN":
		return CountryIdn, nil
	case "IMN":
		return CountryImn, nil
	case "IND":
		return CountryInd, nil
	case "IOT":
		return CountryIot, nil
	case "IRL":
		return CountryIrl, nil
	case "IRN":
		return CountryIrn, nil
	case "IRQ":
		return CountryIrq, nil
	case "ISL":
		return CountryIsl, nil
	case "ISR":
		return CountryIsr, nil
	case "ITA":
		return CountryIta, nil
	case "JAM":
		return CountryJam, nil
	case "JEY":
		return CountryJey, nil
	case "JOR":
		return CountryJor, nil
	case "JPN":
		return CountryJpn, nil
	case "KAZ":
		return CountryKaz, nil
	case "KEN":
		return CountryKen, nil
	case "KGZ":
		return CountryKgz, nil
	case "KHM":
		return CountryKhm, nil
	case "KIR":
		return CountryKir, nil
	case "KNA":
		return CountryKna, nil
	case "KOR":
		return CountryKor, nil
	case "UNK":
		return CountryUnk, nil
	case "KWT":
		return CountryKwt, nil
	case "LAO":
		return CountryLao, nil
	case "LBN":
		return CountryLbn, nil
	case "LBR":
		return CountryLbr, nil
	case "LBY":
		return CountryLby, nil
	case "LCA":
		return CountryLca, nil
	case "LIE":
		return CountryLie, nil
	case "LKA":
		return CountryLka, nil
	case "LSO":
		return CountryLso, nil
	case "LTU":
		return CountryLtu, nil
	case "LUX":
		return CountryLux, nil
	case "LVA":
		return CountryLva, nil
	case "MAC":
		return CountryMac, nil
	case "MAF":
		return CountryMaf, nil
	case "MAR":
		return CountryMar, nil
	case "MCO":
		return CountryMco, nil
	case "MDA":
		return CountryMda, nil
	case "MDG":
		return CountryMdg, nil
	case "MDV":
		return CountryMdv, nil
	case "MEX":
		return CountryMex, nil
	case "MHL":
		return CountryMhl, nil
	case "MKD":
		return CountryMkd, nil
	case "MLI":
		return CountryMli, nil
	case "MLT":
		return CountryMlt, nil
	case "MMR":
		return CountryMmr, nil
	case "MNE":
		return CountryMne, nil
	case "MNG":
		return CountryMng, nil
	case "MNP":
		return CountryMnp, nil
	case "MOZ":
		return CountryMoz, nil
	case "MRT":
		return CountryMrt, nil
	case "MSR":
		return CountryMsr, nil
	case "MTQ":
		return CountryMtq, nil
	case "MUS":
		return CountryMus, nil
	case "MWI":
		return CountryMwi, nil
	case "MYS":
		return CountryMys, nil
	case "MYT":
		return CountryMyt, nil
	case "NAM":
		return CountryNam, nil
	case "NCL":
		return CountryNcl, nil
	case "NER":
		return CountryNer, nil
	case "NFK":
		return CountryNfk, nil
	case "NGA":
		return CountryNga, nil
	case "NIC":
		return CountryNic, nil
	case "NIU":
		return CountryNiu, nil
	case "NLD":
		return CountryNld, nil
	case "NOR":
		return CountryNor, nil
	case "NPL":
		return CountryNpl, nil
	case "NRU":
		return CountryNru, nil
	case "NZL":
		return CountryNzl, nil
	case "OMN":
		return CountryOmn, nil
	case "PAK":
		return CountryPak, nil
	case "PAN":
		return CountryPan, nil
	case "PCN":
		return CountryPcn, nil
	case "PER":
		return CountryPer, nil
	case "PHL":
		return CountryPhl, nil
	case "PLW":
		return CountryPlw, nil
	case "PNG":
		return CountryPng, nil
	case "POL":
		return CountryPol, nil
	case "PRI":
		return CountryPri, nil
	case "PRK":
		return CountryPrk, nil
	case "PRT":
		return CountryPrt, nil
	case "PRY":
		return CountryPry, nil
	case "PSE":
		return CountryPse, nil
	case "PYF":
		return CountryPyf, nil
	case "QAT":
		return CountryQat, nil
	case "REU":
		return CountryReu, nil
	case "ROU":
		return CountryRou, nil
	case "RUS":
		return CountryRus, nil
	case "RWA":
		return CountryRwa, nil
	case "SAU":
		return CountrySau, nil
	case "SDN":
		return CountrySdn, nil
	case "SEN":
		return CountrySen, nil
	case "SGP":
		return CountrySgp, nil
	case "SGS":
		return CountrySgs, nil
	case "SJM":
		return CountrySjm, nil
	case "SLB":
		return CountrySlb, nil
	case "SLE":
		return CountrySle, nil
	case "SLV":
		return CountrySlv, nil
	case "SMR":
		return CountrySmr, nil
	case "SOM":
		return CountrySom, nil
	case "SPM":
		return CountrySpm, nil
	case "SRB":
		return CountrySrb, nil
	case "SSD":
		return CountrySsd, nil
	case "STP":
		return CountryStp, nil
	case "SUR":
		return CountrySur, nil
	case "SVK":
		return CountrySvk, nil
	case "SVN":
		return CountrySvn, nil
	case "SWE":
		return CountrySwe, nil
	case "SWZ":
		return CountrySwz, nil
	case "SXM":
		return CountrySxm, nil
	case "SYC":
		return CountrySyc, nil
	case "SYR":
		return CountrySyr, nil
	case "TCA":
		return CountryTca, nil
	case "TCD":
		return CountryTcd, nil
	case "TGO":
		return CountryTgo, nil
	case "THA":
		return CountryTha, nil
	case "TJK":
		return CountryTjk, nil
	case "TKL":
		return CountryTkl, nil
	case "TKM":
		return CountryTkm, nil
	case "TLS":
		return CountryTls, nil
	case "TON":
		return CountryTon, nil
	case "TTO":
		return CountryTto, nil
	case "TUN":
		return CountryTun, nil
	case "TUR":
		return CountryTur, nil
	case "TUV":
		return CountryTuv, nil
	case "TWN":
		return CountryTwn, nil
	case "TZA":
		return CountryTza, nil
	case "UGA":
		return CountryUga, nil
	case "UKR":
		return CountryUkr, nil
	case "UMI":
		return CountryUmi, nil
	case "URY":
		return CountryUry, nil
	case "USA":
		return CountryUsa, nil
	case "UZB":
		return CountryUzb, nil
	case "VAT":
		return CountryVat, nil
	case "VCT":
		return CountryVct, nil
	case "VEN":
		return CountryVen, nil
	case "VGB":
		return CountryVgb, nil
	case "VIR":
		return CountryVir, nil
	case "VNM":
		return CountryVnm, nil
	case "VUT":
		return CountryVut, nil
	case "WLF":
		return CountryWlf, nil
	case "WSM":
		return CountryWsm, nil
	case "YEM":
		return CountryYem, nil
	case "ZAF":
		return CountryZaf, nil
	case "ZMB":
		return CountryZmb, nil
	case "ZWE":
		return CountryZwe, nil
	case "XXX":
		return CountryXxx, nil
	case "RKS":
		return CountryRks, nil
	}
	var t Country
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c Country) Ptr() *Country {
	return &c
}

// Country context enums describe different ways an entity can be connected to a country.
type CountryContext string

const (
	// The reported citizenship of a person
	CountryContextCitizenship CountryContext = "citizenship"
	// Rarely used. Converted to "domicile".
	CountryContextIncorporation CountryContext = "incorporation"
	// The reported country of residence of a person
	CountryContextResidence CountryContext = "residence"
	// The reported nationality of a person
	CountryContextNationality CountryContext = "nationality"
	// The country of an entity address
	CountryContextAddress CountryContext = "address"
	// The flag state of a vessel. Often changes over time.
	CountryContextVesselFlag CountryContext = "vessel_flag"
	// e.g., "Country of incorporation", "Jurisdiction of formation", "Organized under the laws of". A company can operate in multiple countries, but can only have one domicile at a time.
	CountryContextDomicile CountryContext = "domicile"
	// The country a shipment starts in
	CountryContextShipmentDeparture CountryContext = "shipment_departure"
	// The country of the consignee/recipient of a shipment
	CountryContextShipmentArrival CountryContext = "shipment_arrival"
	// Any country a shipment moves through between its departure and arrival
	CountryContextShipmentTransit CountryContext = "shipment_transit"
	// The entity is the principal entity in a record originating from this country
	CountryContextActivityIn CountryContext = "activity_in"
	// The entity is mentioned in a record originating from this country
	CountryContextMentionedIn CountryContext = "mentioned_in"
	// The country of origin of a product
	CountryContextProductOrigin CountryContext = "product_origin"
)

func NewCountryContextFromString(s string) (CountryContext, error) {
	switch s {
	case "citizenship":
		return CountryContextCitizenship, nil
	case "incorporation":
		return CountryContextIncorporation, nil
	case "residence":
		return CountryContextResidence, nil
	case "nationality":
		return CountryContextNationality, nil
	case "address":
		return CountryContextAddress, nil
	case "vessel_flag":
		return CountryContextVesselFlag, nil
	case "domicile":
		return CountryContextDomicile, nil
	case "shipment_departure":
		return CountryContextShipmentDeparture, nil
	case "shipment_arrival":
		return CountryContextShipmentArrival, nil
	case "shipment_transit":
		return CountryContextShipmentTransit, nil
	case "activity_in":
		return CountryContextActivityIn, nil
	case "mentioned_in":
		return CountryContextMentionedIn, nil
	case "product_origin":
		return CountryContextProductOrigin, nil
	}
	var t CountryContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountryContext) Ptr() *CountryContext {
	return &c
}

type CountryData struct {
	Editable    *bool              `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string           `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                `json:"record_count" url:"record_count"`
	Properties  *CountryProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountryData) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountryData) UnmarshalJSON(data []byte) error {
	type unmarshaler CountryData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountryData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountryData) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// An affiliation of an entity with a given country through residence, nationality, etc.
type CountryInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*CountryData  `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountryInfo) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountryInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler CountryInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountryInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountryInfo) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CountryProperties struct {
	// The type of affiliation
	Context *CountryContext `json:"context,omitempty" url:"context,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// The subnational state, province, region, etc.
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The country, ideally normalized to an ISO trigram
	Value Country `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CountryProperties) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CountryProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler CountryProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CountryProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CountryProperties) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Currency enums are normalized representations of currencies. [Source](https://en.wikipedia.org/wiki/ISO_4217).
type Currency string

const (
	// Afghani/971/2
	CurrencyAfn Currency = "AFN"
	// Euro/978/2
	CurrencyEur Currency = "EUR"
	// Lek/008/2
	CurrencyAll Currency = "ALL"
	// Algerian Dinar/012/2
	CurrencyDzd Currency = "DZD"
	// US Dollar/840/2
	CurrencyUsd Currency = "USD"
	// Kwanza/973/2
	CurrencyAoa Currency = "AOA"
	// East Caribbean Dollar/951/2
	CurrencyXcd Currency = "XCD"
	// Argentine Peso/032/2
	CurrencyArs Currency = "ARS"
	// Armenian Dram/051/2
	CurrencyAmd Currency = "AMD"
	// Aruban Florin/533/2
	CurrencyAwg Currency = "AWG"
	// Australian Dollar/036/2
	CurrencyAud Currency = "AUD"
	// Azerbaijan Manat/944/2
	CurrencyAzn Currency = "AZN"
	// Bahamian Dollar/044/2
	CurrencyBsd Currency = "BSD"
	// Bahraini Dinar/048/3
	CurrencyBhd Currency = "BHD"
	// Taka/050/2
	CurrencyBdt Currency = "BDT"
	// Barbados Dollar/052/2
	CurrencyBbd Currency = "BBD"
	// Belarusian Ruble/933/2
	CurrencyByn Currency = "BYN"
	// Belize Dollar/084/2
	CurrencyBzd Currency = "BZD"
	// CFA Franc BCEAO/952/0
	CurrencyXof Currency = "XOF"
	// Bermudian Dollar/060/2
	CurrencyBmd Currency = "BMD"
	// Indian Rupee/356/2
	CurrencyInr Currency = "INR"
	// Ngultrum/064/2
	CurrencyBtn Currency = "BTN"
	// Boliviano/068/2
	CurrencyBob Currency = "BOB"
	// Mvdol/984/2
	CurrencyBov Currency = "BOV"
	// Convertible Mark/977/2
	CurrencyBam Currency = "BAM"
	// Pula/072/2
	CurrencyBwp Currency = "BWP"
	// Norwegian Krone/578/2
	CurrencyNok Currency = "NOK"
	// Brazilian Real/986/2
	CurrencyBrl Currency = "BRL"
	// Brunei Dollar/096/2
	CurrencyBnd Currency = "BND"
	// Bulgarian Lev/975/2
	CurrencyBgn Currency = "BGN"
	// Burundi Franc/108/0
	CurrencyBif Currency = "BIF"
	// Cabo Verde Escudo/132/2
	CurrencyCve Currency = "CVE"
	// Riel/116/2
	CurrencyKhr Currency = "KHR"
	// CFA Franc BEAC/950/0
	CurrencyXaf Currency = "XAF"
	// Canadian Dollar/124/2
	CurrencyCad Currency = "CAD"
	// Cayman Islands Dollar/136/2
	CurrencyKyd Currency = "KYD"
	// Chilean Peso/152/0
	CurrencyClp Currency = "CLP"
	// Unidad de Fomento/990/4
	CurrencyClf Currency = "CLF"
	// Yuan Renminbi/156/2
	CurrencyCny Currency = "CNY"
	// Colombian Peso/170/2
	CurrencyCop Currency = "COP"
	// Unidad de Valor Real/970/2
	CurrencyCou Currency = "COU"
	// Comorian Franc /174/0
	CurrencyKmf Currency = "KMF"
	// Congolese Franc/976/2
	CurrencyCdf Currency = "CDF"
	// New Zealand Dollar/554/2
	CurrencyNzd Currency = "NZD"
	// Costa Rican Colon/188/2
	CurrencyCrc Currency = "CRC"
	// Kuna/191/2
	CurrencyHrk Currency = "HRK"
	// Cuban Peso/192/2
	CurrencyCup Currency = "CUP"
	// Peso Convertible/931/2
	CurrencyCuc Currency = "CUC"
	// Netherlands Antillean Guilder/532/2
	CurrencyAng Currency = "ANG"
	// Czech Koruna/203/2
	CurrencyCzk Currency = "CZK"
	// Danish Krone/208/2
	CurrencyDkk Currency = "DKK"
	// Djibouti Franc/262/0
	CurrencyDjf Currency = "DJF"
	// Dominican Peso/214/2
	CurrencyDop Currency = "DOP"
	// Egyptian Pound/818/2
	CurrencyEgp Currency = "EGP"
	// El Salvador Colon/222/2
	CurrencySvc Currency = "SVC"
	// Nakfa/232/2
	CurrencyErn Currency = "ERN"
	// Ethiopian Birr/230/2
	CurrencyEtb Currency = "ETB"
	// Falkland Islands Pound/238/2
	CurrencyFkp Currency = "FKP"
	// Fiji Dollar/242/2
	CurrencyFjd Currency = "FJD"
	// CFP Franc/953/0
	CurrencyXpf Currency = "XPF"
	// Dalasi/270/2
	CurrencyGmd Currency = "GMD"
	// Lari/981/2
	CurrencyGel Currency = "GEL"
	// Ghana Cedi/936/2
	CurrencyGhs Currency = "GHS"
	// Gibraltar Pound/292/2
	CurrencyGip Currency = "GIP"
	// Quetzal/320/2
	CurrencyGtq Currency = "GTQ"
	// Pound Sterling/826/2
	CurrencyGbp Currency = "GBP"
	// Guinean Franc/324/0
	CurrencyGnf Currency = "GNF"
	// Guyana Dollar/328/2
	CurrencyGyd Currency = "GYD"
	// Gourde/332/2
	CurrencyHtg Currency = "HTG"
	// Lempira/340/2
	CurrencyHnl Currency = "HNL"
	// Hong Kong Dollar/344/2
	CurrencyHkd Currency = "HKD"
	// Forint/348/2
	CurrencyHuf Currency = "HUF"
	// Iceland Krona/352/0
	CurrencyIsk Currency = "ISK"
	// Rupiah/360/2
	CurrencyIdr Currency = "IDR"
	// SDR (Special Drawing Right)/960/N.A.
	CurrencyXdr Currency = "XDR"
	// Iranian Rial/364/2
	CurrencyIrr Currency = "IRR"
	// Iraqi Dinar/368/3
	CurrencyIqd Currency = "IQD"
	// New Israeli Sheqel/376/2
	CurrencyIls Currency = "ILS"
	// Jamaican Dollar/388/2
	CurrencyJmd Currency = "JMD"
	// Yen/392/0
	CurrencyJpy Currency = "JPY"
	// Jordanian Dinar/400/3
	CurrencyJod Currency = "JOD"
	// Tenge/398/2
	CurrencyKzt Currency = "KZT"
	// Kenyan Shilling/404/2
	CurrencyKes Currency = "KES"
	// North Korean Won/408/2
	CurrencyKpw Currency = "KPW"
	// Won/410/0
	CurrencyKrw Currency = "KRW"
	// Kuwaiti Dinar/414/3
	CurrencyKwd Currency = "KWD"
	// Som/417/2
	CurrencyKgs Currency = "KGS"
	// Lao Kip/418/2
	CurrencyLak Currency = "LAK"
	// Lebanese Pound/422/2
	CurrencyLbp Currency = "LBP"
	// Loti/426/2
	CurrencyLsl Currency = "LSL"
	// Rand/710/2
	CurrencyZar Currency = "ZAR"
	// Liberian Dollar/430/2
	CurrencyLrd Currency = "LRD"
	// Libyan Dinar/434/3
	CurrencyLyd Currency = "LYD"
	// Swiss Franc/756/2
	CurrencyChf Currency = "CHF"
	// Pataca/446/2
	CurrencyMop Currency = "MOP"
	// Denar/807/2
	CurrencyMkd Currency = "MKD"
	// Malagasy Ariary/969/2
	CurrencyMga Currency = "MGA"
	// Malawi Kwacha/454/2
	CurrencyMwk Currency = "MWK"
	// Malaysian Ringgit/458/2
	CurrencyMyr Currency = "MYR"
	// Rufiyaa/462/2
	CurrencyMvr Currency = "MVR"
	// Ouguiya/929/2
	CurrencyMru Currency = "MRU"
	// Mauritius Rupee/480/2
	CurrencyMur Currency = "MUR"
	// ADB Unit of Account/965/N.A.
	CurrencyXua Currency = "XUA"
	// Mexican Peso/484/2
	CurrencyMxn Currency = "MXN"
	// Mexican Unidad de Inversion (UDI)/979/2
	CurrencyMxv Currency = "MXV"
	// Moldovan Leu/498/2
	CurrencyMdl Currency = "MDL"
	// Tugrik/496/2
	CurrencyMnt Currency = "MNT"
	// Moroccan Dirham/504/2
	CurrencyMad Currency = "MAD"
	// Mozambique Metical/943/2
	CurrencyMzn Currency = "MZN"
	// Kyat/104/2
	CurrencyMmk Currency = "MMK"
	// Namibia Dollar/516/2
	CurrencyNad Currency = "NAD"
	// Nepalese Rupee/524/2
	CurrencyNpr Currency = "NPR"
	// Cordoba Oro/558/2
	CurrencyNio Currency = "NIO"
	// Naira/566/2
	CurrencyNgn Currency = "NGN"
	// Rial Omani/512/3
	CurrencyOmr Currency = "OMR"
	// Pakistan Rupee/586/2
	CurrencyPkr Currency = "PKR"
	// Balboa/590/2
	CurrencyPab Currency = "PAB"
	// Kina/598/2
	CurrencyPgk Currency = "PGK"
	// Guarani/600/0
	CurrencyPyg Currency = "PYG"
	// Sol/604/2
	CurrencyPen Currency = "PEN"
	// Philippine Peso/608/2
	CurrencyPhp Currency = "PHP"
	// Zloty/985/2
	CurrencyPln Currency = "PLN"
	// Qatari Rial/634/2
	CurrencyQar Currency = "QAR"
	// Romanian Leu/946/2
	CurrencyRon Currency = "RON"
	// Russian Ruble/643/2
	CurrencyRub Currency = "RUB"
	// Rwanda Franc/646/0
	CurrencyRwf Currency = "RWF"
	// Saint Helena Pound/654/2
	CurrencyShp Currency = "SHP"
	// Tala/882/2
	CurrencyWst Currency = "WST"
	// Dobra/930/2
	CurrencyStn Currency = "STN"
	// Saudi Riyal/682/2
	CurrencySar Currency = "SAR"
	// Serbian Dinar/941/2
	CurrencyRsd Currency = "RSD"
	// Seychelles Rupee/690/2
	CurrencyScr Currency = "SCR"
	// Leone/694/2
	CurrencySll Currency = "SLL"
	// Singapore Dollar/702/2
	CurrencySgd Currency = "SGD"
	// Sucre/994/N.A.
	CurrencyXsu Currency = "XSU"
	// Solomon Islands Dollar/090/2
	CurrencySbd Currency = "SBD"
	// Somali Shilling/706/2
	CurrencySos Currency = "SOS"
	// South Sudanese Pound/728/2
	CurrencySsp Currency = "SSP"
	// Sri Lanka Rupee/144/2
	CurrencyLkr Currency = "LKR"
	// Sudanese Pound/938/2
	CurrencySdg Currency = "SDG"
	// Surinam Dollar/968/2
	CurrencySrd Currency = "SRD"
	// Lilangeni/748/2
	CurrencySzl Currency = "SZL"
	// Swedish Krona/752/2
	CurrencySek Currency = "SEK"
	// WIR Euro/947/2
	CurrencyChe Currency = "CHE"
	// WIR Franc/948/2
	CurrencyChw Currency = "CHW"
	// Syrian Pound/760/2
	CurrencySyp Currency = "SYP"
	// New Taiwan Dollar/901/2
	CurrencyTwd Currency = "TWD"
	// Somoni/972/2
	CurrencyTjs Currency = "TJS"
	// Tanzanian Shilling/834/2
	CurrencyTzs Currency = "TZS"
	// Baht/764/2
	CurrencyThb Currency = "THB"
	// Pa’anga/776/2
	CurrencyTop Currency = "TOP"
	// Trinidad and Tobago Dollar/780/2
	CurrencyTtd Currency = "TTD"
	// Tunisian Dinar/788/3
	CurrencyTnd Currency = "TND"
	// Turkish Lira/949/2
	CurrencyTry Currency = "TRY"
	// Turkmenistan New Manat/934/2
	CurrencyTmt Currency = "TMT"
	// Uganda Shilling/800/0
	CurrencyUgx Currency = "UGX"
	// Hryvnia/980/2
	CurrencyUah Currency = "UAH"
	// UAE Dirham/784/2
	CurrencyAed Currency = "AED"
	// US Dollar (Next day)/997/2
	CurrencyUsn Currency = "USN"
	// Peso Uruguayo/858/2
	CurrencyUyu Currency = "UYU"
	// Uruguay Peso en Unidades Indexadas (UI)/940/0
	CurrencyUyi Currency = "UYI"
	// Unidad Previsional/927/4
	CurrencyUyw Currency = "UYW"
	// Uzbekistan Sum/860/2
	CurrencyUzs Currency = "UZS"
	// Vatu/548/0
	CurrencyVuv Currency = "VUV"
	// Bolívar Soberano/928/2
	CurrencyVes Currency = "VES"
	// Dong/704/0
	CurrencyVnd Currency = "VND"
	// Yemeni Rial/886/2
	CurrencyYer Currency = "YER"
	// Zambian Kwacha/967/2
	CurrencyZmw Currency = "ZMW"
	// Zimbabwe Dollar/932/2
	CurrencyZwl Currency = "ZWL"
	// Bond Markets Unit European Composite Unit (EURCO)/955/N.A.
	CurrencyXba Currency = "XBA"
	// Bond Markets Unit European Monetary Unit (E.M.U.-6)/956/N.A.
	CurrencyXbb Currency = "XBB"
	// Bond Markets Unit European Unit of Account 9 (E.U.A.-9)/957/N.A.
	CurrencyXbc Currency = "XBC"
	// Bond Markets Unit European Unit of Account 17 (E.U.A.-17)/958/N.A.
	CurrencyXbd Currency = "XBD"
	// Codes specifically reserved for testing purposes/963/N.A.
	CurrencyXts Currency = "XTS"
	// The code assigned to transactions where no currency is involved/999/N.A.
	CurrencyXxx Currency = "XXX"
	// Gold/959/N.A.
	CurrencyXau Currency = "XAU"
	// Palladium/964/N.A.
	CurrencyXpd Currency = "XPD"
	// Platinum/962/N.A.
	CurrencyXpt Currency = "XPT"
	// Silver/961/N.A.
	CurrencyXag Currency = "XAG"
	// Latvian Lat; Learn more [here](https://en.wikipedia.org/wiki/Latvian_lats)
	CurrencyLvl Currency = "LVL"
	// Slovak Koruna
	CurrencySkk Currency = "SKK"
	// Italian Lira
	CurrencyItl Currency = "ITL"
	// Dutch Guilder
	CurrencyNlg Currency = "NLG"
	// Belgian Franc
	CurrencyBef Currency = "BEF"
	// Mauritanian Ouguiya
	CurrencyMro Currency = "MRO"
	// Ukrainian Hryvnia
	CurrencyUkh Currency = "UKH"
)

func NewCurrencyFromString(s string) (Currency, error) {
	switch s {
	case "AFN":
		return CurrencyAfn, nil
	case "EUR":
		return CurrencyEur, nil
	case "ALL":
		return CurrencyAll, nil
	case "DZD":
		return CurrencyDzd, nil
	case "USD":
		return CurrencyUsd, nil
	case "AOA":
		return CurrencyAoa, nil
	case "XCD":
		return CurrencyXcd, nil
	case "ARS":
		return CurrencyArs, nil
	case "AMD":
		return CurrencyAmd, nil
	case "AWG":
		return CurrencyAwg, nil
	case "AUD":
		return CurrencyAud, nil
	case "AZN":
		return CurrencyAzn, nil
	case "BSD":
		return CurrencyBsd, nil
	case "BHD":
		return CurrencyBhd, nil
	case "BDT":
		return CurrencyBdt, nil
	case "BBD":
		return CurrencyBbd, nil
	case "BYN":
		return CurrencyByn, nil
	case "BZD":
		return CurrencyBzd, nil
	case "XOF":
		return CurrencyXof, nil
	case "BMD":
		return CurrencyBmd, nil
	case "INR":
		return CurrencyInr, nil
	case "BTN":
		return CurrencyBtn, nil
	case "BOB":
		return CurrencyBob, nil
	case "BOV":
		return CurrencyBov, nil
	case "BAM":
		return CurrencyBam, nil
	case "BWP":
		return CurrencyBwp, nil
	case "NOK":
		return CurrencyNok, nil
	case "BRL":
		return CurrencyBrl, nil
	case "BND":
		return CurrencyBnd, nil
	case "BGN":
		return CurrencyBgn, nil
	case "BIF":
		return CurrencyBif, nil
	case "CVE":
		return CurrencyCve, nil
	case "KHR":
		return CurrencyKhr, nil
	case "XAF":
		return CurrencyXaf, nil
	case "CAD":
		return CurrencyCad, nil
	case "KYD":
		return CurrencyKyd, nil
	case "CLP":
		return CurrencyClp, nil
	case "CLF":
		return CurrencyClf, nil
	case "CNY":
		return CurrencyCny, nil
	case "COP":
		return CurrencyCop, nil
	case "COU":
		return CurrencyCou, nil
	case "KMF":
		return CurrencyKmf, nil
	case "CDF":
		return CurrencyCdf, nil
	case "NZD":
		return CurrencyNzd, nil
	case "CRC":
		return CurrencyCrc, nil
	case "HRK":
		return CurrencyHrk, nil
	case "CUP":
		return CurrencyCup, nil
	case "CUC":
		return CurrencyCuc, nil
	case "ANG":
		return CurrencyAng, nil
	case "CZK":
		return CurrencyCzk, nil
	case "DKK":
		return CurrencyDkk, nil
	case "DJF":
		return CurrencyDjf, nil
	case "DOP":
		return CurrencyDop, nil
	case "EGP":
		return CurrencyEgp, nil
	case "SVC":
		return CurrencySvc, nil
	case "ERN":
		return CurrencyErn, nil
	case "ETB":
		return CurrencyEtb, nil
	case "FKP":
		return CurrencyFkp, nil
	case "FJD":
		return CurrencyFjd, nil
	case "XPF":
		return CurrencyXpf, nil
	case "GMD":
		return CurrencyGmd, nil
	case "GEL":
		return CurrencyGel, nil
	case "GHS":
		return CurrencyGhs, nil
	case "GIP":
		return CurrencyGip, nil
	case "GTQ":
		return CurrencyGtq, nil
	case "GBP":
		return CurrencyGbp, nil
	case "GNF":
		return CurrencyGnf, nil
	case "GYD":
		return CurrencyGyd, nil
	case "HTG":
		return CurrencyHtg, nil
	case "HNL":
		return CurrencyHnl, nil
	case "HKD":
		return CurrencyHkd, nil
	case "HUF":
		return CurrencyHuf, nil
	case "ISK":
		return CurrencyIsk, nil
	case "IDR":
		return CurrencyIdr, nil
	case "XDR":
		return CurrencyXdr, nil
	case "IRR":
		return CurrencyIrr, nil
	case "IQD":
		return CurrencyIqd, nil
	case "ILS":
		return CurrencyIls, nil
	case "JMD":
		return CurrencyJmd, nil
	case "JPY":
		return CurrencyJpy, nil
	case "JOD":
		return CurrencyJod, nil
	case "KZT":
		return CurrencyKzt, nil
	case "KES":
		return CurrencyKes, nil
	case "KPW":
		return CurrencyKpw, nil
	case "KRW":
		return CurrencyKrw, nil
	case "KWD":
		return CurrencyKwd, nil
	case "KGS":
		return CurrencyKgs, nil
	case "LAK":
		return CurrencyLak, nil
	case "LBP":
		return CurrencyLbp, nil
	case "LSL":
		return CurrencyLsl, nil
	case "ZAR":
		return CurrencyZar, nil
	case "LRD":
		return CurrencyLrd, nil
	case "LYD":
		return CurrencyLyd, nil
	case "CHF":
		return CurrencyChf, nil
	case "MOP":
		return CurrencyMop, nil
	case "MKD":
		return CurrencyMkd, nil
	case "MGA":
		return CurrencyMga, nil
	case "MWK":
		return CurrencyMwk, nil
	case "MYR":
		return CurrencyMyr, nil
	case "MVR":
		return CurrencyMvr, nil
	case "MRU":
		return CurrencyMru, nil
	case "MUR":
		return CurrencyMur, nil
	case "XUA":
		return CurrencyXua, nil
	case "MXN":
		return CurrencyMxn, nil
	case "MXV":
		return CurrencyMxv, nil
	case "MDL":
		return CurrencyMdl, nil
	case "MNT":
		return CurrencyMnt, nil
	case "MAD":
		return CurrencyMad, nil
	case "MZN":
		return CurrencyMzn, nil
	case "MMK":
		return CurrencyMmk, nil
	case "NAD":
		return CurrencyNad, nil
	case "NPR":
		return CurrencyNpr, nil
	case "NIO":
		return CurrencyNio, nil
	case "NGN":
		return CurrencyNgn, nil
	case "OMR":
		return CurrencyOmr, nil
	case "PKR":
		return CurrencyPkr, nil
	case "PAB":
		return CurrencyPab, nil
	case "PGK":
		return CurrencyPgk, nil
	case "PYG":
		return CurrencyPyg, nil
	case "PEN":
		return CurrencyPen, nil
	case "PHP":
		return CurrencyPhp, nil
	case "PLN":
		return CurrencyPln, nil
	case "QAR":
		return CurrencyQar, nil
	case "RON":
		return CurrencyRon, nil
	case "RUB":
		return CurrencyRub, nil
	case "RWF":
		return CurrencyRwf, nil
	case "SHP":
		return CurrencyShp, nil
	case "WST":
		return CurrencyWst, nil
	case "STN":
		return CurrencyStn, nil
	case "SAR":
		return CurrencySar, nil
	case "RSD":
		return CurrencyRsd, nil
	case "SCR":
		return CurrencyScr, nil
	case "SLL":
		return CurrencySll, nil
	case "SGD":
		return CurrencySgd, nil
	case "XSU":
		return CurrencyXsu, nil
	case "SBD":
		return CurrencySbd, nil
	case "SOS":
		return CurrencySos, nil
	case "SSP":
		return CurrencySsp, nil
	case "LKR":
		return CurrencyLkr, nil
	case "SDG":
		return CurrencySdg, nil
	case "SRD":
		return CurrencySrd, nil
	case "SZL":
		return CurrencySzl, nil
	case "SEK":
		return CurrencySek, nil
	case "CHE":
		return CurrencyChe, nil
	case "CHW":
		return CurrencyChw, nil
	case "SYP":
		return CurrencySyp, nil
	case "TWD":
		return CurrencyTwd, nil
	case "TJS":
		return CurrencyTjs, nil
	case "TZS":
		return CurrencyTzs, nil
	case "THB":
		return CurrencyThb, nil
	case "TOP":
		return CurrencyTop, nil
	case "TTD":
		return CurrencyTtd, nil
	case "TND":
		return CurrencyTnd, nil
	case "TRY":
		return CurrencyTry, nil
	case "TMT":
		return CurrencyTmt, nil
	case "UGX":
		return CurrencyUgx, nil
	case "UAH":
		return CurrencyUah, nil
	case "AED":
		return CurrencyAed, nil
	case "USN":
		return CurrencyUsn, nil
	case "UYU":
		return CurrencyUyu, nil
	case "UYI":
		return CurrencyUyi, nil
	case "UYW":
		return CurrencyUyw, nil
	case "UZS":
		return CurrencyUzs, nil
	case "VUV":
		return CurrencyVuv, nil
	case "VES":
		return CurrencyVes, nil
	case "VND":
		return CurrencyVnd, nil
	case "YER":
		return CurrencyYer, nil
	case "ZMW":
		return CurrencyZmw, nil
	case "ZWL":
		return CurrencyZwl, nil
	case "XBA":
		return CurrencyXba, nil
	case "XBB":
		return CurrencyXbb, nil
	case "XBC":
		return CurrencyXbc, nil
	case "XBD":
		return CurrencyXbd, nil
	case "XTS":
		return CurrencyXts, nil
	case "XXX":
		return CurrencyXxx, nil
	case "XAU":
		return CurrencyXau, nil
	case "XPD":
		return CurrencyXpd, nil
	case "XPT":
		return CurrencyXpt, nil
	case "XAG":
		return CurrencyXag, nil
	case "LVL":
		return CurrencyLvl, nil
	case "SKK":
		return CurrencySkk, nil
	case "ITL":
		return CurrencyItl, nil
	case "NLG":
		return CurrencyNlg, nil
	case "BEF":
		return CurrencyBef, nil
	case "MRO":
		return CurrencyMro, nil
	case "UKH":
		return CurrencyUkh, nil
	}
	var t Currency
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c Currency) Ptr() *Currency {
	return &c
}

type DateOfBirthData struct {
	Editable    *bool                  `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string               `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                    `json:"record_count" url:"record_count"`
	Properties  *DateOfBirthProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DateOfBirthData) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DateOfBirthData) UnmarshalJSON(data []byte) error {
	type unmarshaler DateOfBirthData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DateOfBirthData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DateOfBirthData) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// Birth date of a person
type DateOfBirthInfo struct {
	Limit  int                `json:"limit" url:"limit"`
	Size   *QualifiedCount    `json:"size,omitempty" url:"size,omitempty"`
	Data   []*DateOfBirthData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}        `json:"next,omitempty" url:"next,omitempty"`
	Offset *int               `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DateOfBirthInfo) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DateOfBirthInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler DateOfBirthInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DateOfBirthInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DateOfBirthInfo) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type DateOfBirthProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The date of birth in YYYY-MM-DD, YYYY-MM, or YYYY format
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DateOfBirthProperties) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DateOfBirthProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler DateOfBirthProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DateOfBirthProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DateOfBirthProperties) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

// This represents which type of entity is being returned.
type Entities string

const (
	// A civil or criminal legal case or similar type of proceeding
	EntitiesLegalMatter Entities = "legal_matter"
	// A trademark, patent, copyright, or similar type of intangible property
	EntitiesIntellectualProperty Entities = "intellectual_property"
	// A generic placeholder entity. Rarely used. A generic entity typically does not fit any other entity type.
	EntitiesGeneric Entities = "generic"
	// An unknown placeholder entity. Rarely used. An unknown entity has insufficient information to be grouped by an existing entity type.
	EntitiesUnknown Entities = "unknown"
	// A tradable financial asset
	EntitiesSecurity Entities = "security"
	// A discretely registered name used by a person or company not operating under its legal name. This includes doing-business-as (DBA) names, fictitious names, etc. in jurisdictions that treat them as registered objects distinct from the person/company using them.
	EntitiesTradename Entities = "tradename"
	// A legal entity or organization
	EntitiesCompany Entities = "company"
	// A shipment between two entities
	EntitiesShipment Entities = "shipment"
	// Land, real estate, real property, or personal property not categorized under another entity type
	EntitiesProperty Entities = "property"
	// A natural person (human being)
	EntitiesPerson Entities = "person"
	// A cargo ship, oil tanker, fishing trawler, or other type of watercraft
	EntitiesVessel Entities = "vessel"
	// An airplane, helicopter, or other vehicle that travels by flight
	EntitiesAircraft Entities = "aircraft"
)

func NewEntitiesFromString(s string) (Entities, error) {
	switch s {
	case "legal_matter":
		return EntitiesLegalMatter, nil
	case "intellectual_property":
		return EntitiesIntellectualProperty, nil
	case "generic":
		return EntitiesGeneric, nil
	case "unknown":
		return EntitiesUnknown, nil
	case "security":
		return EntitiesSecurity, nil
	case "tradename":
		return EntitiesTradename, nil
	case "company":
		return EntitiesCompany, nil
	case "shipment":
		return EntitiesShipment, nil
	case "property":
		return EntitiesProperty, nil
	case "person":
		return EntitiesPerson, nil
	case "vessel":
		return EntitiesVessel, nil
	case "aircraft":
		return EntitiesAircraft, nil
	}
	var t Entities
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e Entities) Ptr() *Entities {
	return &e
}

// Finance type enums describe financial information about an entity. They're typically used to describe the cumulative monetary value of share capital issued by a company or held by an individual shareholder.
type FinanceType string

const (
	// Percentage ownership of a given company's share capital, represented as a value from 0-100
	FinanceTypeSharePercentage FinanceType = "share_percentage"
	// Cumulative monetary value of one or more company shares, typically either held by a shareholder or issued by the company
	FinanceTypeShareAmount FinanceType = "share_amount"
	// Cumulative monetary value of the share capital of a given company
	FinanceTypeRegisteredCapital FinanceType = "registered_capital"
	// Cumulative monetary value of the share capital for which one or more shareholders have paid a given company
	FinanceTypePaidUpCapital FinanceType = "paid_up_capital"
	// The maximum amount of share capital a company is allowed to issue under its legal statutes
	FinanceTypeAuthorizedCapital FinanceType = "authorized_capital"
	// Cumulative monetary value of the share capital held by shareholders of a given company
	FinanceTypeSubscribedCapital FinanceType = "subscribed_capital"
)

func NewFinanceTypeFromString(s string) (FinanceType, error) {
	switch s {
	case "share_percentage":
		return FinanceTypeSharePercentage, nil
	case "share_amount":
		return FinanceTypeShareAmount, nil
	case "registered_capital":
		return FinanceTypeRegisteredCapital, nil
	case "paid_up_capital":
		return FinanceTypePaidUpCapital, nil
	case "authorized_capital":
		return FinanceTypeAuthorizedCapital, nil
	case "subscribed_capital":
		return FinanceTypeSubscribedCapital, nil
	}
	var t FinanceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FinanceType) Ptr() *FinanceType {
	return &f
}

type FinancesData struct {
	Editable    *bool               `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string            `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                 `json:"record_count" url:"record_count"`
	Properties  *FinancesProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FinancesData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinancesData) UnmarshalJSON(data []byte) error {
	type unmarshaler FinancesData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FinancesData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinancesData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A financial figure, typically share capital
type FinancesInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*FinancesData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FinancesInfo) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinancesInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler FinancesInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FinancesInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinancesInfo) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FinancesProperties struct {
	// The type of figure
	Context *FinanceType `json:"context,omitempty" url:"context,omitempty"`
	// The currency, if applicable
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// A free-text definition of the type
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The numerical amount
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FinancesProperties) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinancesProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler FinancesProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FinancesProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinancesProperties) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FinancialsData struct {
	Editable    *bool                 `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string              `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                   `json:"record_count" url:"record_count"`
	Properties  *FinancialsProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FinancialsData) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinancialsData) UnmarshalJSON(data []byte) error {
	type unmarshaler FinancialsData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FinancialsData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinancialsData) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// A summary of financial information at one point in time
type FinancialsInfo struct {
	Limit  int               `json:"limit" url:"limit"`
	Size   *QualifiedCount   `json:"size,omitempty" url:"size,omitempty"`
	Data   []*FinancialsData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}       `json:"next,omitempty" url:"next,omitempty"`
	Offset *int              `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FinancialsInfo) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinancialsInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler FinancialsInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FinancialsInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinancialsInfo) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FinancialsProperties struct {
	// The total value of assets owned by a company
	Assets *float64 `json:"assets,omitempty" url:"assets,omitempty"`
	// Reporting currency
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// Total employees
	Employees *int `json:"employees,omitempty" url:"employees,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// Sum of the combined debts a company owes
	Liabilities *float64 `json:"liabilities,omitempty" url:"liabilities,omitempty"`
	// Company's earnings for a period after subtracting operating costs, taxes, and interest
	NetIncome *float64 `json:"net_income,omitempty" url:"net_income,omitempty"`
	// Paid-up capital is the capital already held by the company
	PaidUpCapital *float64 `json:"paid_up_capital,omitempty" url:"paid_up_capital,omitempty"`
	// Registered capital is the maximum amount of share capital that a company is authorized to raise
	RegisteredCapital *float64 `json:"registered_capital,omitempty" url:"registered_capital,omitempty"`
	// The total amount of income generated by the sale of goods or services related to the company's primary operations
	Revenue *float64 `json:"revenue,omitempty" url:"revenue,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (f *FinancialsProperties) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FinancialsProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler FinancialsProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FinancialsProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties

	f._rawJSON = json.RawMessage(data)
	return nil
}

func (f *FinancialsProperties) String() string {
	if len(f._rawJSON) > 0 {
		if value, err := core.StringifyJSON(f._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// Gender enums are normalized ways to refer to different genders.
type Gender string

const (
	// Refers to a male person
	GenderMale Gender = "male"
	// Refers to a female person
	GenderFemale Gender = "female"
	// Indicates a gender other than male or female
	GenderOther Gender = "other"
)

func NewGenderFromString(s string) (Gender, error) {
	switch s {
	case "male":
		return GenderMale, nil
	case "female":
		return GenderFemale, nil
	case "other":
		return GenderOther, nil
	}
	var t Gender
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g Gender) Ptr() *Gender {
	return &g
}

type GenderData struct {
	Editable    *bool             `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string          `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int               `json:"record_count" url:"record_count"`
	Properties  *GenderProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenderData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenderData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenderData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenderData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenderData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A person's gender
type GenderInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*GenderData   `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenderInfo) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenderInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler GenderInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenderInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenderInfo) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenderProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// May be described as "female", "male", or "other"
	Value Gender `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenderProperties) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenderProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler GenderProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenderProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenderProperties) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenericData struct {
	Editable    *bool              `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string           `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                `json:"record_count" url:"record_count"`
	Properties  *GenericProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenericData) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericData) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericData) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// A placeholder attribute. Rarely used. A generic attribute typically does not fit any other attribute type.
type GenericInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*GenericData  `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenericInfo) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericInfo) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GenericProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// A text description of the attribute (e.g., "name of pet")
	Type *string `json:"type,omitempty" url:"type,omitempty"`
	// The value of the attribute as text (e.g., "Max")
	Value *string `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GenericProperties) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GenericProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler GenericProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GenericProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GenericProperties) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type IdentifierData struct {
	Editable    *bool                 `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string              `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                   `json:"record_count" url:"record_count"`
	Properties  *IdentifierProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IdentifierData) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IdentifierData) UnmarshalJSON(data []byte) error {
	type unmarshaler IdentifierData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IdentifierData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IdentifierData) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// An ID number that uniquely identifies one entity when value and type are taken into account.
type IdentifierInfo struct {
	Limit  int               `json:"limit" url:"limit"`
	Size   *QualifiedCount   `json:"size,omitempty" url:"size,omitempty"`
	Data   []*IdentifierData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}       `json:"next,omitempty" url:"next,omitempty"`
	Offset *int              `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IdentifierInfo) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IdentifierInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler IdentifierInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IdentifierInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IdentifierInfo) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type IdentifierProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string              `json:"to_date,omitempty" url:"to_date,omitempty"`
	Type   *BothIdentifierTypes `json:"type,omitempty" url:"type,omitempty"`
	// The text/number value of the identifier
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IdentifierProperties) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IdentifierProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler IdentifierProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IdentifierProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IdentifierProperties) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

// Describes the real-world type of an identifier value that uniquely (strongly) identifies an entity. These are often associated with a governmental organization within a certain jurisdiction. Some of these types are deprecated, meaning they are no longer used.
type IdentifierType string

const (
	// Internal ID that can be used to link related companies within source
	IdentifierTypeCnTianyanchaCompanyId IdentifierType = "cn_tianyancha_company_id"
	// Internal ID that can be used to link related people within source
	IdentifierTypeCnTianyanchaHumanId IdentifierType = "cn_tianyancha_human_id"
	// A Chinese Unified Social Credit Code
	IdentifierTypeCnUnifiedSocialCreditCode IdentifierType = "cn_unified_social_credit_code"
	// A Chinese company registration number
	IdentifierTypeCnRegistrationNumber IdentifierType = "cn_registration_number"
	// A Chinese company organization code
	IdentifierTypeCnOrganizationCode IdentifierType = "cn_organization_code"
	// Part of a Qichacha URL, used to uniquely identify people within the site
	IdentifierTypeCnQichachaInternalId IdentifierType = "cn_qichacha_internal_id"
	// A Hong Kong CR Number
	IdentifierTypeCnHkCrNumber IdentifierType = "cn_hk_cr_number"
	// A Hong Kong document filing number used by ICRIS
	IdentifierTypeCnHkFilingNumber IdentifierType = "cn_hk_filing_number"
	// A Bahraini CR Number
	IdentifierTypeBhCrNumber IdentifierType = "bh_cr_number"
	// A Bahraini CR Number combined with a Bahraini branch number
	IdentifierTypeBhCrNumberAndBranch IdentifierType = "bh_cr_number_and_branch"
	// Deprecated; use jo_national_institution_number
	IdentifierTypeJoInternalId IdentifierType = "jo_internal_id"
	// A Jordanian National Institution Number
	IdentifierTypeJoNationalInstitutionNumber IdentifierType = "jo_national_institution_number"
	// Deprecated; use weak ID jor_sol_prop_institution_number
	IdentifierTypeJoInstitutionNumber IdentifierType = "jo_institution_number"
	// A Malta company number
	IdentifierTypeMaltaCompanyNumber IdentifierType = "malta_company_number"
	// A number linked to a Maltese national ID card
	IdentifierTypeMaltaNationalId IdentifierType = "malta_national_id"
	// Seems to be tied to accounting/auditing firms
	IdentifierTypeMaltaAccountancyRegistrationId IdentifierType = "malta_accountancy_registration_id"
	// A UK company registration number. The pattern was sourced from the snapshot file documentation provided to us. When the first two characters are not digits, they have a special meaning.
	IdentifierTypeUkCompanyNumber IdentifierType = "uk_company_number"
	// Unique UK ID number. Assigned to every firm in the FCA financial services registry.
	IdentifierTypeUkFirmReferenceNumber IdentifierType = "uk_firm_reference_number"
	// Internal person ID
	IdentifierTypeUkPersonNumber IdentifierType = "uk_person_number"
	// A tax ID issued by the Mexican Tax Administration Service
	IdentifierTypeMxRfcPerson IdentifierType = "mx_rfc_person"
	// A unique identity code for citizens and residents of Mexico
	IdentifierTypeMxCurp       IdentifierType = "mx_curp"
	IdentifierTypeMxRfcCompany IdentifierType = "mx_rfc_company"
	IdentifierTypeMxOfficeFme  IdentifierType = "mx_office_fme"
	// A Russian tax ID. Individuals get a 12-digit number; companies get 10 digits.
	IdentifierTypeRuInn IdentifierType = "ru_inn"
	// A Russian company registration number with 12 digits
	IdentifierTypeRuOgrn IdentifierType = "ru_ogrn"
	// Internal company ID
	IdentifierTypeVenSarenInternalEmployerNumber IdentifierType = "ven_saren_internal_employer_number"
	// Brazilian corporate ID number
	IdentifierTypeBraCnpj IdentifierType = "bra_cnpj"
	// Venezuelan tax ID for companies and individuals
	IdentifierTypeVenRif IdentifierType = "ven_rif"
	// A Venezuelan national ID number for individuals
	IdentifierTypeVenCedulaNumber IdentifierType = "ven_cedula_number"
	// Maldives corporate registration number
	IdentifierTypeMdvRegistrationNumber IdentifierType = "mdv_registration_number"
	// A unique eight-digit identification number that is required for any existing or proposed director of a company in India
	IdentifierTypeIndDirectorIdNumber IdentifierType = "ind_director_id_number"
	// A permanent account number (PAN) is a 10-digit alphanumeric tax ID issued by the Indian Income Tax Department.
	IdentifierTypeIndPermanentAccountNumber IdentifierType = "ind_permanent_account_number"
	// A unique identification number assigned by the Registrar of Companies (ROC) in various states under the Indian Ministry of Corporate Affairs (MCA)
	IdentifierTypeIndCorporateIdNumber IdentifierType = "ind_corporate_id_number"
	// A Kazakh tax ID number
	IdentifierTypeKazTin IdentifierType = "kaz_tin"
	// A 12-digit Kazakh business identification number
	IdentifierTypeKazBin         IdentifierType = "kaz_bin"
	IdentifierTypeKazStateRegNum IdentifierType = "kaz_state_reg_num"
	IdentifierTypeKazOkpoNum     IdentifierType = "kaz_okpo_num"
	// A nine-digit Kazakh identifier
	IdentifierTypeKazIdentifier IdentifierType = "kaz_identifier"
	// Kosovo registration number
	IdentifierTypeRksRegistrationNumber IdentifierType = "rks_registration_number"
	// General Electronic Commercial Registry (G.E.MI.) number for all legal forms of businesses in Greece
	IdentifierTypeGrcGemiNumber IdentifierType = "grc_gemi_number"
	// A certificate number for the National Registry of Contractors in Venezuela
	IdentifierTypeVenRncNumber IdentifierType = "ven_rnc_number"
	// A Virginia State Corporation Commission entity number
	IdentifierTypeUsaVaRegId IdentifierType = "usa_va_reg_id"
	IdentifierTypeUsaNyRegId IdentifierType = "usa_ny_reg_id"
	// USA IRS employer ID number
	IdentifierTypeUsaFeiNumber IdentifierType = "usa_fei_number"
	IdentifierTypeUkrMojId     IdentifierType = "ukr_moj_id"
	// Mauritius business registration number
	IdentifierTypeMusRegId IdentifierType = "mus_reg_id"
	// Title number for a property in the UK
	IdentifierTypeUkTitleNumber IdentifierType = "uk_title_number"
	// Registration number from the Mongolian corporate registry
	IdentifierTypeMngRegNumber IdentifierType = "mng_reg_number"
	// Registration number from the Montenegro corporate registry
	IdentifierTypeMneRegNumber IdentifierType = "mne_reg_number"
	// Kyrgyzstan company registration number
	IdentifierTypeKgzRegNumber IdentifierType = "kgz_reg_number"
	// China customs code for import and export. May include China USCC; China OC; U.S. SSN; or U.S. EIN.
	IdentifierTypeCnImportexportCode IdentifierType = "cn_importexport_code"
	// North Korea-China trade data ID code
	IdentifierTypePrkEntityId       IdentifierType = "prk_entity_id"
	IdentifierTypePrkRegistrationId IdentifierType = "prk_registration_id"
	// Former Yugoslav republic natural person ID number
	IdentifierTypeYugoslavMasterCitizenNum IdentifierType = "yugoslav_master_citizen_num"
	// Burkina Faso tax ID number
	IdentifierTypeBfaEntityId IdentifierType = "bfa_entity_id"
	// Afghanistan tax ID number
	IdentifierTypeAfghanTinNumber IdentifierType = "afghan_tin_number"
	// Afghanistan natural and legal person business license ID code
	IdentifierTypeAfgBusinessLicense IdentifierType = "afg_business_license"
	// Madagascar tax ID number
	IdentifierTypeMdgNifNumber  IdentifierType = "mdg_nif_number"
	IdentifierTypeMdgStatNumber IdentifierType = "mdg_stat_number"
	// Madagascar corporate registry ID number
	IdentifierTypeMdgRcsNumber IdentifierType = "mdg_rcs_number"
	// Latvia natural person ID number
	IdentifierTypeLvaPersonalCode IdentifierType = "lva_personal_code"
	// Unique ID number. Assigned to individual bank accounts for use in cross-border financial transactions.
	IdentifierTypeIban IdentifierType = "iban"
	// Latvia corporate registry ID number
	IdentifierTypeLvaRegNumber IdentifierType = "lva_reg_number"
	// Taiwan tax ID number
	IdentifierTypeTwnUnifiedNumber IdentifierType = "twn_unified_number"
	// Luxembourg corporate registry ID number
	IdentifierTypeLuxRcsNumber IdentifierType = "lux_rcs_number"
	// North Macedonia corporate registry ID number
	IdentifierTypeMkdEmbsNumber IdentifierType = "mkd_embs_number"
	// North Macedonia corporate registry ID number
	IdentifierTypeMkdEmbsBranchNumber IdentifierType = "mkd_embs_branch_number"
	// North Macedonia unique identifier. Assigned to every North Macedonia Corporate Registry Announcement.
	IdentifierTypeMkdArchiveNumber IdentifierType = "mkd_archive_number"
	// Moldova legal person ID number
	IdentifierTypeMdaIdnoNumber IdentifierType = "mda_idno_number"
	// Uruguay tax ID number
	IdentifierTypeUryRucNumber IdentifierType = "ury_ruc_number"
	// Switzerland business registry ID number
	IdentifierTypeCheUidNumber IdentifierType = "che_uid_number"
	// El Salvador commercial registry ID number
	IdentifierTypeSlvCommercialRegNumber IdentifierType = "slv_commercial_reg_number"
	// El Salvador natural person ID number
	IdentifierTypeSlvUidNumber      IdentifierType = "slv_uid_number"
	IdentifierTypeMatoGrossoLegalId IdentifierType = "mato_grosso_legal_id"
	// Unique global ID code. Assigned to legal entities participating in financial transactions.
	IdentifierTypeLei IdentifierType = "lei"
	// Value-added tax ID number
	IdentifierTypeVat IdentifierType = "vat"
	// Italy tax ID code
	IdentifierTypeItaFiscalCode IdentifierType = "ita_fiscal_code"
	// Italy VAT number
	IdentifierTypeItaVatNumber        IdentifierType = "ita_vat_number"
	IdentifierTypeRioDeJaneiroLegalId IdentifierType = "rio_de_janeiro_legal_id"
	// Iceland natural and legal person ID number
	IdentifierTypeIslTinNumber IdentifierType = "isl_tin_number"
	// Laos corporate registry ID number
	IdentifierTypeLaoEnterpriseNumber IdentifierType = "lao_enterprise_number"
	// Slovakia legal person ID number
	IdentifierTypeSvkIcoNumber IdentifierType = "svk_ico_number"
	// Cambodia tax ID number
	IdentifierTypeKhmTinNumber IdentifierType = "khm_tin_number"
	// Czechia legal person ID number
	IdentifierTypeCzeIcoNumber IdentifierType = "cze_ico_number"
	// Iran natural and legal person ID number
	IdentifierTypeIrnNationalId IdentifierType = "irn_national_id"
	// Ecuador tax ID number
	IdentifierTypeEcuRucNumber IdentifierType = "ecu_ruc_number"
	// Greece tax ID number
	IdentifierTypeGrcVatNumber IdentifierType = "grc_vat_number"
	// Canada federal corporate registry ID number
	IdentifierTypeCanCorporationNumber IdentifierType = "can_corporation_number"
	// Canada tax reporting ID code
	IdentifierTypeCanCraProgramAccountNumber IdentifierType = "can_cra_program_account_number"
	// Montenegro tax ID number
	IdentifierTypeMnePib IdentifierType = "mne_pib"
	// Chile tax ID Number
	IdentifierTypeChlCedulaNumber IdentifierType = "chl_cedula_number"
	// Brazil litigation case ID number
	IdentifierTypeBraCaseNumber IdentifierType = "bra_case_number"
	// India limited liability partnership ID number
	IdentifierTypeIndLlpin IdentifierType = "ind_llpin"
	// India foreign company registration number
	IdentifierTypeIndFcrn IdentifierType = "ind_fcrn"
	// Bermuda corporate registry ID number
	IdentifierTypeBmuRegistrationNumber IdentifierType = "bmu_registration_number"
	// Brazil natural person tax ID number
	IdentifierTypeBraCpfNumber IdentifierType = "bra_cpf_number"
	// Iran natural person ID number
	IdentifierTypeIrnNationalNumber IdentifierType = "irn_national_number"
	// China customs import and export registration code
	IdentifierTypeChnCustomsRegistrationCode IdentifierType = "chn_customs_registration_code"
	// Liechtenstein corporate registry ID number
	IdentifierTypeLiePublicRegNo IdentifierType = "lie_public_reg_no"
	// China tax ID number
	IdentifierTypeCnTaxIdentificationNumber IdentifierType = "cn_tax_identification_number"
	// Macao corporate registry ID number
	IdentifierTypeMacRegistrationNo IdentifierType = "mac_registration_no"
	// Mexico corporate registry internal ID number
	IdentifierTypeSigerInternalId IdentifierType = "siger_internal_id"
	// Lebanon natural person ID number
	IdentifierTypeLbnNationalId IdentifierType = "lbn_national_id"
	// Unique global ID number. Assigned to ships, registered ship owners, and management companies.
	IdentifierTypeIntMaritimeOrgId IdentifierType = "int_maritime_org_id"
	// Russia vessel registry ID number
	IdentifierTypeRuShipRegisterId IdentifierType = "ru_ship_register_id"
	// UID used to merge entities internally
	IdentifierTypeSayariInternalIdentifier IdentifierType = "sayari_internal_identifier"
	// Aruba chamber of commerce ID code
	IdentifierTypeArubaChamberOfCommerceId IdentifierType = "aruba_chamber_of_commerce_id"
	// Unique global ID number. Assigned to ships, registered ship owners, and management companies.
	IdentifierTypeImoNo IdentifierType = "imo_no"
	// British Virgin Islands corporate registry ID number
	IdentifierTypeVgbCompanyNumber IdentifierType = "vgb_company_number"
	// Yemen chamber of commerce ID number
	IdentifierTypeYemCocRegistrationNumber IdentifierType = "yem_coc_registration_number"
	// Malaysia natural person ID number
	IdentifierTypeMysIdCardNo IdentifierType = "mys_id_card_no"
	// Malaysia corporate registry ID number
	IdentifierTypeMysCompanyRegNo IdentifierType = "mys_company_reg_no"
	// Paraguay tax ID number
	IdentifierTypePryRucNumber IdentifierType = "pry_ruc_number"
	// Paraguay natural person ID number
	IdentifierTypePryCedulaNumber IdentifierType = "pry_cedula_number"
	// Paraguay tax ID number
	IdentifierTypePryOldRucNumber IdentifierType = "pry_old_ruc_number"
	// OHADA corporate registry ID number
	IdentifierTypeRccmNo IdentifierType = "rccm_no"
	// Brazil natural person ID number
	IdentifierTypeBraRgNumber IdentifierType = "bra_rg_number"
	// Senegal tax ID number
	IdentifierTypeNineaNo IdentifierType = "ninea_no"
	// Albania tax ID number
	IdentifierTypeAlbTaxId              IdentifierType = "alb_tax_id"
	IdentifierTypeAlbRegistrationNumber IdentifierType = "alb_registration_number"
	// Argentina corporate registry ID number
	IdentifierTypeArgIgjNumber IdentifierType = "arg_igj_number"
	// Argentina natural person ID number
	IdentifierTypeArgDniNumber IdentifierType = "arg_dni_number"
	// Argentina tax ID number
	IdentifierTypeArgCuitNumber IdentifierType = "arg_cuit_number"
	// Argentina social security ID number
	IdentifierTypeArgCuilNumber IdentifierType = "arg_cuil_number"
	// Argentina natural person ID number
	IdentifierTypeArgCdiNumber IdentifierType = "arg_cdi_number"
	// Bosnia and Herzegovina corporate registry ID number
	IdentifierTypeBihMbsNumber IdentifierType = "bih_mbs_number"
	// Bosnia and Herzegovina legal person ID number
	IdentifierTypeBihJibNumber     IdentifierType = "bih_jib_number"
	IdentifierTypeBihCustomsNumber IdentifierType = "bih_customs_number"
	// USA Puerto Rico corporate registry ID number
	IdentifierTypeUsaPuertoRicoRegisterNumber IdentifierType = "usa_puerto_rico_register_number"
	// Djibouti corporate registry ID number
	IdentifierTypeDjiRcsNumber IdentifierType = "dji_rcs_number"
	// Costa Rica natural person ID number
	IdentifierTypeCriCedulaNumber IdentifierType = "cri_cedula_number"
	// Mozambique natural person ID number
	IdentifierTypeMozIdNumber IdentifierType = "moz_id_number"
	// Mozambique natural person tax ID number
	IdentifierTypeMozNuitPerson IdentifierType = "moz_nuit_person"
	// Mozambique legal person tax ID number
	IdentifierTypeMozNuitCo IdentifierType = "moz_nuit_co"
	// Mozambique passport number
	IdentifierTypeMozPassport IdentifierType = "moz_passport"
	// Mozambique foreign resident ID number
	IdentifierTypeMozDireNo IdentifierType = "moz_dire_no"
	// Mozambique voter ID number
	IdentifierTypeMozVoterNo IdentifierType = "moz_voter_no"
	// Mozambique corporate registry ID number
	IdentifierTypeMozNuelNo IdentifierType = "moz_nuel_no"
	// Iraq voter ID number
	IdentifierTypeIrqVoterId IdentifierType = "irq_voter_id"
	// Jordan voter ID number
	IdentifierTypeJorVoterCardNo IdentifierType = "jor_voter_card_no"
	// Deprecated; use jo_national_institution_number
	IdentifierTypeJorIdNo IdentifierType = "jor_id_no"
	// Peru tax ID number
	IdentifierTypePerRucNo IdentifierType = "per_ruc_no"
	// Ecuador corporate registry ID number
	IdentifierTypeEcuCompanyId IdentifierType = "ecu_company_id"
	// USA New York corporate registry ID number
	IdentifierTypeUsaNyDosId IdentifierType = "usa_ny_dos_id"
	// OHADA corporate registry ID number
	IdentifierTypeBfaRccmNumber IdentifierType = "bfa_rccm_number"
	// USA Florida Broward County parcel ID number
	IdentifierTypeFlPropFolio IdentifierType = "fl_prop_folio"
	// Unique USA county land and property ID number. Assigned to every parcel and property registered with the Palm Beach County Property Appraiser’s Office.
	IdentifierTypeUsaFlPbPcn IdentifierType = "usa_fl_pb_pcn"
	// Qatar corporate registry ID number
	IdentifierTypeQatQfcNumber IdentifierType = "qat_qfc_number"
	// Greece tax ID number
	IdentifierTypeGrcAfmNumber IdentifierType = "grc_afm_number"
	// Vietnam tax ID number
	IdentifierTypeVnmEnterpriseCode IdentifierType = "vnm_enterprise_code"
	// Thailand corporate registry ID number
	IdentifierTypeThaRegistrationNo IdentifierType = "tha_registration_no"
	// Vietnam natural person ID number
	IdentifierTypeVnmCitizenshipNo IdentifierType = "vnm_citizenship_no"
	// Vietnam natural person ID number
	IdentifierTypeVnmPersonIdNo IdentifierType = "vnm_person_id_no"
	// Argentina female natural person ID number
	IdentifierTypeArgLibCivicaNumber IdentifierType = "arg_lib_civica_number"
	// Argentina male natural person ID number
	IdentifierTypeArgLibEnrolamientoNumber IdentifierType = "arg_lib_enrolamiento_number"
	// New Zealand business registry ID number
	IdentifierTypeNzlNzbn IdentifierType = "nzl_nzbn"
	// New Zealand corporate registry ID number
	IdentifierTypeNzlCoNo IdentifierType = "nzl_co_no"
	// USA Treasury sanctions list ID number
	IdentifierTypeUsaOfacSdnNumber IdentifierType = "usa_ofac_sdn_number"
	// Unique global ID code. Assigned to financial and non-financial institutions for use addressing messages, routing business transactions, and identifying business parties.
	IdentifierTypeSwiftBicCode IdentifierType = "swift_bic_code"
	// Unique global ID code. Assigned by Dun & Bradstreet.
	IdentifierTypeDunsNumber IdentifierType = "duns_number"
	// Unique digital currency address
	IdentifierTypeBitcoinAddress IdentifierType = "bitcoin_address"
	// Unique digital currency address
	IdentifierTypeLitecoinAddress IdentifierType = "litecoin_address"
	// Russia securities ID code
	IdentifierTypeRusMicexCode IdentifierType = "rus_micex_code"
	// USA Texas Bexar County property ID number
	IdentifierTypeTxPropId IdentifierType = "tx_prop_id"
	// USA Texas Bexar County property owner ID number
	IdentifierTypeTxPacsId IdentifierType = "tx_pacs_id"
	// USA Texas land segment ID number
	IdentifierTypeTxLandId IdentifierType = "tx_land_id"
	// Papua New Guinea business registry ID number
	IdentifierTypePngIpaRegId IdentifierType = "png_ipa_reg_id"
	// Guatemala tax ID number
	IdentifierTypeGtmNitNumber IdentifierType = "gtm_nit_number"
	// Guatemala natural person ID number
	IdentifierTypeGtmCuiNumber IdentifierType = "gtm_cui_number"
	// Dominican Republic tax ID number
	IdentifierTypeDomRnc IdentifierType = "dom_rnc"
	// Qatar corporate registry ID number
	IdentifierTypeQatCrNumber IdentifierType = "qat_cr_number"
	// Unique global ID code. Assigned to every security issuance for use facilitating the trading, clearing, and settlement of securities transactions.
	IdentifierTypeIsin IdentifierType = "isin"
	// USA Florida corporate registry ID code
	IdentifierTypeUsaFlDocumentNo IdentifierType = "usa_fl_document_no"
	// USA Florida corporate registry ID code
	IdentifierTypeUsaFlFicNameRegNo IdentifierType = "usa_fl_fic_name_reg_no"
	// Brazil federal public servant internal ID number
	IdentifierTypeBraServidorPortal IdentifierType = "bra_servidor_portal"
	// Brazil federal public servant agency unit ID code
	IdentifierTypeBraCodigoDaUnidadeOrganizacional IdentifierType = "bra_codigo_da_unidade_organizacional"
	// USA SEC disclosure filer ID number
	IdentifierTypeUsaSecCikNumber IdentifierType = "usa_sec_cik_number"
	// Croatia corporate registry ID number
	IdentifierTypeHrMbs IdentifierType = "hr_mbs"
	// Croatia natural and legal person ID number
	IdentifierTypeHrOib IdentifierType = "hr_oib"
	// El Salvador tax ID number
	IdentifierTypeSlvNumeroIdentificacionTributaria IdentifierType = "slv_numero_identificacion_tributaria"
	// El Salvador corporate registry ID number
	IdentifierTypeSlvMcas IdentifierType = "slv_mcas"
	// Australia corporate registry ID number
	IdentifierTypeAusCompanyNumber IdentifierType = "aus_company_number"
	// Australia business registry ID number
	IdentifierTypeAusBusinessNumber IdentifierType = "aus_business_number"
	// Germany commercial registry ID number concatenated with registry district court XJustiz ID code
	IdentifierTypeDeuRegisternummer IdentifierType = "deu_registernummer"
	// USA IRS employer ID number
	IdentifierTypeUsaIrsEin IdentifierType = "usa_irs_ein"
	// Hong Kong case ID number
	IdentifierTypeHongKongCaseNumber IdentifierType = "hong_kong_case_number"
	// Iran Tehran chamber of commerce internal ID number
	IdentifierTypeIrnCocInternalId IdentifierType = "irn_coc_internal_id"
	// Panama corporate registry ID number
	IdentifierTypePanFolioFichaId IdentifierType = "pan_folio_ficha_id"
	// Panama natural person ID number
	IdentifierTypePanCedulaNumber IdentifierType = "pan_cedula_number"
	// Cedar Rose entity internal ID number
	IdentifierTypeXxxCedarRoseUid IdentifierType = "xxx_cedar_rose_uid"
	// OHADA corporate registry ID number
	IdentifierTypeXxxRccm IdentifierType = "xxx_rccm"
	// Vietnam business registry internal ID number
	IdentifierTypeVnmDichvuthongtinInternalId IdentifierType = "vnm_dichvuthongtin_internal_id"
	// Sayari Intel entity internal ID number
	IdentifierTypeXxxIntelInternalId IdentifierType = "xxx_intel_internal_id"
	// USA Washington business registry ID number
	IdentifierTypeUsaWashingtonStateUbi IdentifierType = "usa_washington_state_ubi"
	// Nigeria corporate registry ID code
	IdentifierTypeNgaRegistrationNumber IdentifierType = "nga_registration_number"
	// NG-Check entity internal ID number
	IdentifierTypeNgCheckInternalId IdentifierType = "ng_check_internal_id"
	// USA New York City real property parcel ID number
	IdentifierTypeNycBbl IdentifierType = "nyc_bbl"
	// USA New York New York City real property registry ID number
	IdentifierTypeNycCrfn IdentifierType = "nyc_crfn"
	// USA Texas corporate registry ID number
	IdentifierTypeTxCorpFileNum IdentifierType = "tx_corp_file_num"
	// USA Texas tax ID number
	IdentifierTypeTxTaxId IdentifierType = "tx_tax_id"
	// USA Georgia business registry internal ID number
	IdentifierTypeUsaGaBusinessId IdentifierType = "usa_ga_business_id"
	// Philippines securities issuer internal ID number
	IdentifierTypePhlPseId IdentifierType = "phl_pse_id"
	// Philippines business registry ID number
	IdentifierTypePhlSecId IdentifierType = "phl_sec_id"
	// Philippines tax ID number
	IdentifierTypePhlTin IdentifierType = "phl_tin"
	// Afghanistan passport number
	IdentifierTypeAfgPassport IdentifierType = "afg_passport"
	// Iran passport number
	IdentifierTypeIrnPassport IdentifierType = "irn_passport"
	// Kuwait passport number
	IdentifierTypeKwtPassport IdentifierType = "kwt_passport"
	// Libya passport number
	IdentifierTypeLbyPassport IdentifierType = "lby_passport"
	// Pakistan passport number
	IdentifierTypePakPassport IdentifierType = "pak_passport"
	// Russia passport number
	IdentifierTypeRusPassport IdentifierType = "rus_passport"
	// Tunisia passport number
	IdentifierTypeTunPassport IdentifierType = "tun_passport"
	// Yemen passport number
	IdentifierTypeYemPassport IdentifierType = "yem_passport"
	// UN Security Council sanctions list ID code
	IdentifierTypeUnSanctionPrn IdentifierType = "un_sanction_prn"
	// EU European Commission sanctions list ID number
	IdentifierTypeEuSanctionRn IdentifierType = "eu_sanction_rn"
	// USA California business registry ID number
	IdentifierTypeCaLpFileNum IdentifierType = "ca_lp_file_num"
	// USA Texas corporate registry ID number
	IdentifierTypeTxEntityFilingNum IdentifierType = "tx_entity_filing_num"
	// USA social security ID number
	IdentifierTypeUsaSocialSecurityNumber IdentifierType = "usa_social_security_number"
	// USA Wyoming business registry ID number
	IdentifierTypeUsaWyPartyId IdentifierType = "usa_wy_party_id"
	// USA Wyoming business registry ID number
	IdentifierTypeUsaWyFilingId IdentifierType = "usa_wy_filing_id"
	// WY internal filing ID (primary key)
	IdentifierTypeUsaWyInternalFilingId IdentifierType = "usa_wy_internal_filing_id"
	// Unique USA state ID number. Assigned to every legal entity registered with Wyoming Secretary of State.
	IdentifierTypeUsaWyFilingNum IdentifierType = "usa_wy_filing_num"
	// USA Oregon business registry ID number
	IdentifierTypeUsaOrRegno IdentifierType = "usa_or_regno"
	// USA Nevada corporate registry ID code
	IdentifierTypeUsaNvCorpno IdentifierType = "usa_nv_corpno"
	// USA Nevada business registry ID code
	IdentifierTypeUsaNvBizid IdentifierType = "usa_nv_bizid"
	// North Korea-China trade internal ID number
	IdentifierTypePrkInternalTradeId IdentifierType = "prk_internal_trade_id"
	// Lesotho corporate registry ID number
	IdentifierTypeLsoCorpregId IdentifierType = "lso_corpreg_id"
	// Uzbekistan tax ID number
	IdentifierTypeUzbTinNumber IdentifierType = "uzb_tin_number"
	// USA California business registry ID number
	IdentifierTypeCaCorporateIdNum IdentifierType = "ca_corporate_id_num"
	// UK HM Treasury OFSI sanctions list ID number
	IdentifierTypeGbrHmTreasurySanctionGroupId IdentifierType = "gbr_hm_treasury_sanction_group_id"
	// Unique UK ID number. Assigned to every registered trademark.
	IdentifierTypeGbrIpoTrademarkRegNo IdentifierType = "gbr_ipo_trademark_reg_no"
	// USA Georgia business registry ID number
	IdentifierTypeUsaGaControlNo IdentifierType = "usa_ga_control_no"
	// Honduras Cortes commercial registry ID number
	IdentifierTypeHndCocCompanyRegistrationNumber IdentifierType = "hnd_coc_company_registration_number"
	// Montenegro real property registry internal ID number
	IdentifierTypeMnePropertyUid IdentifierType = "mne_property_uid"
	// Philippines business registry ID number
	IdentifierTypePhlBnn IdentifierType = "phl_bnn"
	// Romania tax ID number
	IdentifierTypeRouCompanyRegistrationCode IdentifierType = "rou_company_registration_code"
	// Romania natural person ID number
	IdentifierTypeRouIdentityCard IdentifierType = "rou_identity_card"
	// Romania natural person ID number
	IdentifierTypeRouPersonalIdNumber IdentifierType = "rou_personal_id_number"
	// Cuba corporate registry ID number
	IdentifierTypeCubCod IdentifierType = "cub_cod"
	// USA Florida Miami-Dade County real property parcel ID number
	IdentifierTypeFlPropFolioDade IdentifierType = "fl_prop_folio_dade"
	// Peru natural person ID number
	IdentifierTypePerDniNo IdentifierType = "per_dni_no"
	// Peru foreign resident ID number
	IdentifierTypePerCarneDeExtranjeria IdentifierType = "per_carne_de_extranjeria"
	// France business directory ID number
	IdentifierTypeFraSiren IdentifierType = "fra_siren"
	// France legal person establishment ID number
	IdentifierTypeFraSiret IdentifierType = "fra_siret"
	// Unique France ID number. Assigned to every legal entity registered with National Registry of Associations.
	IdentifierTypeFraRna IdentifierType = "fra_rna"
	// Skráseting Føroya Registration Number. Assigned to legal entities registered with the Company Registry of the Faroe Islands.
	IdentifierTypeFroRegNum IdentifierType = "fro_reg_num"
	// Czechia commercial registry ID number
	IdentifierTypeCzeFileNumber IdentifierType = "cze_file_number"
	// Value taken from datos registrales section used to identify companies in the Borme. Not an official identifier.
	IdentifierTypeEspBormeRegId IdentifierType = "esp_borme_reg_id"
	// Mexican trademark number
	IdentifierTypeMexTmNo IdentifierType = "mex_tm_no"
	// Mauritius Company File No.
	IdentifierTypeMusFileNo IdentifierType = "mus_file_no"
	// Colombian tax identification number
	IdentifierTypeColNitNo IdentifierType = "col_nit_no"
	// Japanese corporate number. Learn more [here](https://en.wikipedia.org/wiki/Corporate_Number).
	IdentifierTypeJpnCorporateNo IdentifierType = "jpn_corporate_no"
	// Common Government-wide Accounting Classification (CGAC) agency code assigned by the US Treasury
	IdentifierTypeUsaCgacAgencyCode IdentifierType = "usa_cgac_agency_code"
	// Identifier for a US government agency
	IdentifierTypeUsaGovtAgencyId IdentifierType = "usa_govt_agency_id"
	// Identifier for a US government agency office
	IdentifierTypeUsaGovtOfficeId IdentifierType = "usa_govt_office_id"
	// Colombian cedula number
	IdentifierTypeColCedulaNo IdentifierType = "col_cedula_no"
	// Colombian SECOP internal ID
	IdentifierTypeColSecopNo IdentifierType = "col_secop_no"
	// Deprecated; use weak identifier jordan_company_no
	IdentifierTypeJordanCompanyNo IdentifierType = "jordan_company_no"
	// Denmark business registration number; learn more [here](https://erhvervsstyrelsen.dk/cvr-numre-p-numre-og-se-numre)
	IdentifierTypeDnkCvr IdentifierType = "dnk_cvr"
	// Denmark business branch number
	IdentifierTypeDnkProductionUnitNo IdentifierType = "dnk_production_unit_no"
	// Internal ID for Denmark Virk
	IdentifierTypeDnkEntity IdentifierType = "dnk_entity"
	// Norway Organisasjonsnummer
	IdentifierTypeNorOrgNo IdentifierType = "nor_org_no"
	// Sweden Organisationsnummer. May have "-" separating last three digits.
	IdentifierTypeSweOrgNo IdentifierType = "swe_org_no"
	// USA Colorado Secretary of State registration number
	IdentifierTypeUsaCoRegNo IdentifierType = "usa_co_reg_no"
	// USA Iowa Secretary of State corporation number
	IdentifierTypeUsaIaCorpNo IdentifierType = "usa_ia_corp_no"
	// The UEN is a standard, unique identification number for a registered entity in Singapore. It is comparable to the NRIC number, which is an ID number for Singapore citizens.
	IdentifierTypeSgpUnqiueEntityNumber IdentifierType = "sgp_unqiue_entity_number"
	// USA Alaskan Secretary of State entity number
	IdentifierTypeUsaAkEntityNo IdentifierType = "usa_ak_entity_no"
	// USA Ohio business charter number
	IdentifierTypeUsaOhCharterNum IdentifierType = "usa_oh_charter_num"
	// Istanbul Chamber of Commerce registration number
	IdentifierTypeTurIstanbulCocRegNo IdentifierType = "tur_istanbul_coc_reg_no"
	// Turkish Central Registry Number System (MERSIS) number
	IdentifierTypeTurMersisNumber IdentifierType = "tur_mersis_number"
	IdentifierTypeCheChIdNumber   IdentifierType = "che_ch_id_number"
	// Dubai International Financial Centre registration number
	IdentifierTypeAreDifcRegNo IdentifierType = "are_difc_reg_no"
	// Indonesian tax ID aka NPWP Number; learn more [here](https://wiki.scn.sap.com/wiki/display/CRM/Indonesia)
	IdentifierTypeIdnTaxId IdentifierType = "idn_tax_id"
	// USA Vermont Business ID
	IdentifierTypeUsaVtBizId IdentifierType = "usa_vt_biz_id"
	// USA West Virginia Corporate Registry ID
	IdentifierTypeUsaWvRegId IdentifierType = "usa_wv_reg_id"
	// USA Mississippi Business ID
	IdentifierTypeUsaMsBizId IdentifierType = "usa_ms_biz_id"
	// USA Idaho Business Control Number
	IdentifierTypeUsaIdControlNo IdentifierType = "usa_id_control_no"
	// USA Idaho Registered Agent ID
	IdentifierTypeUsaIdPartyId           IdentifierType = "usa_id_party_id"
	IdentifierTypeIrnCocInternalIdCardno IdentifierType = "irn_coc_internal_id_cardno"
	// USA Arizona Corporate Registry Entity Number
	IdentifierTypeUsaAzCorpRegEntityNum IdentifierType = "usa_az_corp_reg_entity_num"
	// USA Oklahoma Business Filing Number
	IdentifierTypeUsaOkFilingNo IdentifierType = "usa_ok_filing_no"
	// USA Tennessee Business Control Number
	IdentifierTypeUsaTnControlNo IdentifierType = "usa_tn_control_no"
	// USA Tennessee Registered Agent ID
	IdentifierTypeUsaTnPartyId IdentifierType = "usa_tn_party_id"
	// USA Kansas Business ID
	IdentifierTypeUsaKsBizId IdentifierType = "usa_ks_biz_id"
	// Identifier made from File Number and File Suffix in Hawaii, USA, corporate registry
	IdentifierTypeUsaHiCorporateRegistryId IdentifierType = "usa_hi_corporate_registry_id"
	// Identifier for officers in Hawaii, USA, corporate registry
	IdentifierTypeUsaHiCorporateRegistryPersonId IdentifierType = "usa_hi_corporate_registry_person_id"
	// The National Court Register, or Krajowy Rejestr Sądowy (KRS), number in Poland
	IdentifierTypePolKrsNumber IdentifierType = "pol_krs_number"
	// The register REGON fulfils the function of the national official Register of National Economy Entities
	IdentifierTypePolRegonNumber IdentifierType = "pol_regon_number"
	// Tax identification number from Poland
	IdentifierTypePolNipNumber IdentifierType = "pol_nip_number"
	// Person identifier from Poland Rejestr data
	IdentifierTypePolRejestrPersonId IdentifierType = "pol_rejestr_person_id"
	// Armenian VAT ID number
	IdentifierTypeArmVatNo IdentifierType = "arm_vat_no"
	// Armenian enterprise code
	IdentifierTypeArmEnterpriseCode IdentifierType = "arm_enterprise_code"
	// Armenian regsitration number
	IdentifierTypeArmRegistrationNo IdentifierType = "arm_registration_no"
	// USA Maine corporate ID
	IdentifierTypeUsaMeCorpId IdentifierType = "usa_me_corp_id"
	// Cypriot corporate registration number. Prefix corresponds to company type code.
	IdentifierTypeCypRegNo IdentifierType = "cyp_reg_no"
	// USA North Dakota Secretary of State control ID
	IdentifierTypeUsaNdControlId IdentifierType = "usa_nd_control_id"
	// USA Michigan corporate ID
	IdentifierTypeUsaMiCorpId IdentifierType = "usa_mi_corp_id"
	// USA Michigan corporate ID (old format)
	IdentifierTypeUsaMiCorpIdOld IdentifierType = "usa_mi_corp_id_old"
	// USA Hawaii Certificate Number
	IdentifierTypeUsaHiTradeNameCert IdentifierType = "usa_hi_trade_name_cert"
	// USA Washington, D.C. CorpOnline entity number
	IdentifierTypeUsaDcEntityNo                           IdentifierType = "usa_dc_entity_no"
	IdentifierTypeUsaVaOldRegId                           IdentifierType = "usa_va_old_reg_id"
	IdentifierTypeUsaConsolidatedScreeningListSyntheticId IdentifierType = "usa_consolidated_screening_list_synthetic_id"
	// USA Arkansas Secretary of State Filing No.
	IdentifierTypeUsaArFilingNo IdentifierType = "usa_ar_filing_no"
	// USA North Carolina SOS corporations UID
	IdentifierTypeUsaNcInternalId IdentifierType = "usa_nc_internal_id"
	// USA Nebraska corporate registry account number
	IdentifierTypeUsaNeAcctNo IdentifierType = "usa_ne_acct_no"
	// USA Nebraska registered agent ID number
	IdentifierTypeUsaNeAgentId IdentifierType = "usa_ne_agent_id"
	// USA New Mexico Secretary of State business number
	IdentifierTypeUsaNmBusinessNo IdentifierType = "usa_nm_business_no"
	// USA New Mexico Secretary of State License ID
	IdentifierTypeUsaNmLicenseId IdentifierType = "usa_nm_license_id"
	// USA Washington, D.C. corporate registry file number
	IdentifierTypeUsaDcFileNo IdentifierType = "usa_dc_file_no"
	// USA Rhode Island filing entity identification number
	IdentifierTypeUsaRiFeiNo IdentifierType = "usa_ri_fei_no"
	// Hex digest of data that should be used for resolution (e.g., name=Sayari&registration_date=2000-01-01)
	IdentifierTypeInternalMd5 IdentifierType = "internal_md5"
	// Autoincrement corporation ID from the Missouri Corporate Registry
	IdentifierTypeUsaMoCorpId IdentifierType = "usa_mo_corp_id"
	// USA Wisconsin Department of Financial Institutions ID
	IdentifierTypeUsaWiDfiId IdentifierType = "usa_wi_dfi_id"
	// Identification code from Georgian MyGov companies
	IdentifierTypeGeoIdentificationCode IdentifierType = "geo_identification_code"
	// Personal number from Georgian MyGov companies
	IdentifierTypeGeoPersonalNumber IdentifierType = "geo_personal_number"
	// Georgian state registration number
	IdentifierTypeGeoStateRegistrationNumber IdentifierType = "geo_state_registration_number"
	// Identifier taken from document URL to resolve cases. Is slightly different for HTML vs PDF documents.
	IdentifierTypeMacRaemCaseUrlId IdentifierType = "mac_raem_case_url_id"
	// Romanian tax identification number for companies
	IdentifierTypeRouCompanyTin IdentifierType = "rou_company_tin"
	// USA Maryland Department of Assessments and Taxation Business ID with prefix
	IdentifierTypeUsaMdDptTax IdentifierType = "usa_md_dpt_tax"
	// USA South Dakota Corporate ID
	IdentifierTypeUsaSdCorpId IdentifierType = "usa_sd_corp_id"
	// Honduras Tegucigalpa Matricula
	IdentifierTypeHndTegucigalpaMatricula IdentifierType = "hnd_tegucigalpa_matricula"
	// Identifier for Florida, USA, property parcels. A concatenation of county code and parcel ID.
	IdentifierTypeUsaFlPropertyId IdentifierType = "usa_fl_property_id"
	// Code unique to every parcel within the real property file. Used in Florida, USA.
	IdentifierTypeUsaFlPropertyMpId IdentifierType = "usa_fl_property_mp_id"
	// Code assigned to each parcel based on a statewide parcel coding system. Used in Florida, USA.
	IdentifierTypeUsaFlPropertyStateParId IdentifierType = "usa_fl_property_state_par_id"
	// Unique Registration Code in the Federal Register of Civil Society Organizations
	IdentifierTypeMexCluni IdentifierType = "mex_cluni"
	// USA Pennsylvania Department of State Business Entity ID Number
	IdentifierTypeUsaPaCorporateRegistryId IdentifierType = "usa_pa_corporate_registry_id"
	// Unique Pakistan National Taxpayer Number for Individuals (equivalent to Computerized National Identity Card number)
	IdentifierTypePakIndNtn IdentifierType = "pak_ind_ntn"
	// Unique Pakistan National Taxpayer Number for Companies and Associations of Persons
	IdentifierTypePakCoNtn IdentifierType = "pak_co_ntn"
	// Simple 1-up identifier from the Registro Nacional de Inversiones Extranjeras
	IdentifierTypeMexRnie IdentifierType = "mex_rnie"
	// Pakistan NGO Registration Number
	IdentifierTypePakNgoRegNo IdentifierType = "pak_ngo_reg_no"
	// Iraqi Stock Exchange Symbol
	IdentifierTypeIraqiStockExchangeSymbol IdentifierType = "iraqi_stock_exchange_symbol"
	// Unique Identification Code for all legal and other entities engaged in business activities in Bulgaria
	IdentifierTypeBgrUic IdentifierType = "bgr_uic"
	// A hashed representation of a Bulgarian citizenship number
	IdentifierTypeBgrEgnHashed IdentifierType = "bgr_egn_hashed"
	// Enterprise number for South African companies
	IdentifierTypeSouthAfricaEnterpriseNumber IdentifierType = "south_africa_enterprise_number"
	// South African passport number
	IdentifierTypeSouthAfricaPassportNumber IdentifierType = "south_africa_passport_number"
	// Dutch Chamber of Commerce Number
	IdentifierTypeNldKvkNumber IdentifierType = "nld_kvk_number"
	// Dutch Chamber of Commerce Branch/Location Number
	IdentifierTypeNldKvkBranchNumber IdentifierType = "nld_kvk_branch_number"
	// Central Registration Depository (CRD) number from the Financial Industry Regulatory Authority (FINRA) in the USA. The CRD number is a company/person identifier.
	IdentifierTypeUsaCentralRegistrationDepositoryNumber IdentifierType = "usa_central_registration_depository_number"
	// One format variation of the SEC file number associated with bdSECNumber in USA/finra_barred_relats
	IdentifierTypeUsaSecFileNumberBd IdentifierType = "usa_sec_file_number_bd"
	// China CNIPA Trademark
	IdentifierTypeChnCnipaTm IdentifierType = "chn_cnipa_tm"
	// Cyprus Passport
	IdentifierTypeCypPassport IdentifierType = "cyp_passport"
	// Entity ID from Cyprus infocredit
	IdentifierTypeCypInfocreditEntityId IdentifierType = "cyp_infocredit_entity_id"
	// Cyprus ID Card
	IdentifierTypeCypIdCard IdentifierType = "cyp_id_card"
	// Cyprus SSN
	IdentifierTypeCypSsn IdentifierType = "cyp_ssn"
	// Austrian Company Register Number
	IdentifierTypeAutFirmenbuchNo IdentifierType = "aut_firmenbuch_no"
	// Swedish personal identity number (Personnummer)
	IdentifierTypeSwePerIdNo IdentifierType = "swe_per_id_no"
	// Company code from Shanghai Stock Exchange
	IdentifierTypeChnShanghaiStockExchangeCompanyCode IdentifierType = "chn_shanghai_stock_exchange_company_code"
	// One format variation of the SEC file number associated with iaSECNumber in USA/finra_barred_relats
	IdentifierTypeUsaSecFileNumberIa IdentifierType = "usa_sec_file_number_ia"
	// Company SEC code from Shenzen stock exchange
	IdentifierTypeChnShenzenSecCode IdentifierType = "chn_shenzen_sec_code"
	// USA Connecticut Business ID
	IdentifierTypeUsaCtBusinessId IdentifierType = "usa_ct_business_id"
	// [Ecuador cedula](https://www.jybaro.com/blog/cedula-de-identidad-ecuatoriana/)
	IdentifierTypeEcuCedulaNumber IdentifierType = "ecu_cedula_number"
	// Hong Kong Stock Exchange Code
	IdentifierTypeHkgStockCode IdentifierType = "hkg_stock_code"
	// Unique Canada province ID number. Assigned to every legal entity in the British Columbia Corporate Registry.
	IdentifierTypeCanBcCompanyRegistrationId IdentifierType = "can_bc_company_registration_id"
	// British Columbia Extraprovincial Company Registration ID
	IdentifierTypeCanBcExtraprovincialRegistrationId IdentifierType = "can_bc_extraprovincial_registration_id"
	// Unique Canada ID number. Assigned to every trademark application.
	IdentifierTypeCanIpoTrademarkApplicationNo IdentifierType = "can_ipo_trademark_application_no"
	// Lithuanian Company Registration Code
	IdentifierTypeLtuCompanyRegistrationCode IdentifierType = "ltu_company_registration_code"
	// SEC private fund ID
	IdentifierTypeUsaSecPrivateFund IdentifierType = "usa_sec_private_fund"
	// Latvian Insolvency Proceedings ID Number
	IdentifierTypeLvaInsolvencyProceedingId IdentifierType = "lva_insolvency_proceeding_id"
	// Internal identifier for shareholders from CHN cninfo data
	IdentifierTypeChnCninfoInternalShareholderId IdentifierType = "chn_cninfo_internal_shareholder_id"
	IdentifierTypeEuid                           IdentifierType = "euid"
	// Finnish Business ID
	IdentifierTypeFinBusinessId IdentifierType = "fin_business_id"
	// Estonian Business Registry Code
	IdentifierTypeEstBusinessRegCode IdentifierType = "est_business_reg_code"
	// Committee on Uniform Securities Identification Procedures (CUSIP) number. Identifies a North American financial security.
	IdentifierTypeUsaCusipNumber IdentifierType = "usa_cusip_number"
	// Slovenian Company Registry ID Number
	IdentifierTypeSvnCoRegNo IdentifierType = "svn_co_reg_no"
	// Israeli Registrar of Companies company number
	IdentifierTypeIsrCompanyNumber IdentifierType = "isr_company_number"
	// Unique Israel association registration number. Assigned to every association in the Israel Ministry of Justice Association and Public Benefit Company Registry.
	IdentifierTypeIsrAssociationNumber IdentifierType = "isr_association_number"
	// Unique Israel public benefit company registration number. Assigned to every public benefit company in the Israel Ministry of Justice Association and Public Benefit Company Registry.
	IdentifierTypeIsrPbcNumber      IdentifierType = "isr_pbc_number"
	IdentifierTypeRksBusinessNumber IdentifierType = "rks_business_number"
	// A fiscal number from the Kosovo company registry
	IdentifierTypeRksFiscalNumber IdentifierType = "rks_fiscal_number"
	// Company code from EDINET
	IdentifierTypeJpnEdinetCode IdentifierType = "jpn_edinet_code"
	// Belgium Enterprise Number
	IdentifierTypeBelEnterpriseNumber IdentifierType = "bel_enterprise_number"
	// Belgium Establishment Number
	IdentifierTypeBelEstablishmentNumber IdentifierType = "bel_establishment_number"
	// Australian financial services licence number
	IdentifierTypeAusAfsLicenceNumber IdentifierType = "aus_afs_licence_number"
	// Australian financial services authorized representative number
	IdentifierTypeAusAfsRepNumber IdentifierType = "aus_afs_rep_number"
	// Australian identifying number allocated to a financial adviser
	IdentifierTypeAusAdvNumber IdentifierType = "aus_adv_number"
	// Australian credit licensee number
	IdentifierTypeAusCreditLicenceNumber IdentifierType = "aus_credit_licence_number"
	// Australian identifying number allocated to a credit representative
	IdentifierTypeAusCreditRepNumber IdentifierType = "aus_credit_rep_number"
	// Korean DART Central Identity Key
	IdentifierTypeDartCik IdentifierType = "dart_cik"
	// Ticker number for the Korean Stock Exchange
	IdentifierTypeKrxTickerCode IdentifierType = "krx_ticker_code"
	// Korean corporate registration number
	IdentifierTypeKorCorporateRegistrationNumber IdentifierType = "kor_corporate_registration_number"
	// Korean TIN for businesses
	IdentifierTypeKorBusinessTin IdentifierType = "kor_business_tin"
	// Estonian Personal Identification Code
	IdentifierTypeEstPersonalId IdentifierType = "est_personal_id"
	// Belize International Corporate Affairs Registry (BICAR) registration number
	IdentifierTypeBzeBicarRegNo IdentifierType = "bze_bicar_reg_no"
	// Account number for businesses on the Chicago, Illinois, business license registry
	IdentifierTypeUsaIlChicagoAccountNumber IdentifierType = "usa_il_chicago_account_number"
	// Company number from Cayman Islands Gazette
	IdentifierTypeCymCoNo IdentifierType = "cym_co_no"
	// Guernsey Corporate Registry Number
	IdentifierTypeGgyCorporateRegNumber IdentifierType = "ggy_corporate_reg_number"
	// Unique Guernsey intellectual property ID number. Assigned to every trademark application submitted to the Guernsey Intellectual Property Office.
	IdentifierTypeGgyTrademarkSubmissionRef IdentifierType = "ggy_trademark_submission_ref"
	// Unique Guernsey intellectual property ID number. Assigned to every trademark registered with the Guernsey Intellectual Property Office.
	IdentifierTypeGgyTrademarkNo IdentifierType = "ggy_trademark_no"
	// Jersey Corporate Registry Number
	IdentifierTypeJeyCorporateRegNumber IdentifierType = "jey_corporate_reg_number"
	// Corp ID used in Cook Islands corporate registry
	IdentifierTypeCokCorpRegCorpid IdentifierType = "cok_corp_reg_corpid"
	// Corp ID used for officers in Cook Islands corporate registry
	IdentifierTypeCokCorpRegCorpofficerid IdentifierType = "cok_corp_reg_corpofficerid"
	// Registration number from Cook Islands corporate registry
	IdentifierTypeCokCorpRegNumber IdentifierType = "cok_corp_reg_number"
	// Internal ID from Mexican open contracts data
	IdentifierTypeMexOpenContractsInternalId IdentifierType = "mex_open_contracts_internal_id"
	// Gibraltar Corporate Registration Number
	IdentifierTypeGibCorpRegNumber IdentifierType = "gib_corp_reg_number"
	// Dominican Republic ONAPI registry number
	IdentifierTypeDomOnapiNum IdentifierType = "dom_onapi_num"
	// Russian Tourist Object Serial number in the Federal list
	IdentifierTypeRusTouristObj IdentifierType = "rus_tourist_obj"
	// Bill of lading number for trade data
	IdentifierTypeBillOfLading IdentifierType = "bill_of_lading"
	// Registration number for Taiwanese factories
	IdentifierTypeTwnFactoryRegistrationNumber IdentifierType = "twn_factory_registration_number"
	// Establishment permit case number for Taiwanese factories
	IdentifierTypeTwnFactoryEstablishmentPermitCaseNumber IdentifierType = "twn_factory_establishment_permit_case_number"
	// Kenya Person ID Number
	IdentifierTypeKenPersonalId IdentifierType = "ken_personal_id"
	// Unique number assigned by the DIAN for each import/export form
	IdentifierTypeColDianNumeroFormulario IdentifierType = "col_dian_numero_formulario"
	// Vanuatu Corporate Registry Number
	IdentifierTypeVutCorpRegNumber IdentifierType = "vut_corp_reg_number"
	// Legal code from Georgian MyGov companies
	IdentifierTypeGeoLegalCode IdentifierType = "geo_legal_code"
	// Myanmar corporate registry ID for companies
	IdentifierTypeMmrCorpId IdentifierType = "mmr_corp_id"
	// Myanmar Registration Number
	IdentifierTypeMmrRegNo IdentifierType = "mmr_reg_no"
	// Myanmar Prior Registration Number
	IdentifierTypeMmrPriorRegNo IdentifierType = "mmr_prior_reg_no"
	// Myanmar corporate registry ID for officers
	IdentifierTypeMmrOfficerId IdentifierType = "mmr_officer_id"
	// Armernian passport number
	IdentifierTypeArmPassportNumber IdentifierType = "arm_passport_number"
	// Ukrainian Registration Number
	IdentifierTypeUkrRegNum IdentifierType = "ukr_reg_num"
	// Validatis identification number
	IdentifierTypeValidatisNumber IdentifierType = "validatis_number"
	// Case number for Dubai land cases
	IdentifierTypeAreDubaiLandCaseNo IdentifierType = "are_dubai_land_case_no"
	// Angola company registration number
	IdentifierTypeAgoMatriculaNumber IdentifierType = "ago_matricula_number"
	// Angola taxpayer number
	IdentifierTypeAgoNifNumber IdentifierType = "ago_nif_number"
	// Myanmar Personal Identification Number
	IdentifierTypeMmrPersonalIdNo IdentifierType = "mmr_personal_id_no"
	// Belarus Registration Number
	IdentifierTypeBlrRegistrationNumber IdentifierType = "blr_registration_number"
	// Primary license number of free zone establishment in Dubai
	IdentifierTypeAerFreeZoneLicense IdentifierType = "aer_free_zone_license"
	// Registration number for Dubai free zone
	IdentifierTypeAerFreeZoneRegNo IdentifierType = "aer_free_zone_reg_no"
	// Company number for Canada NL Corporate Registry
	IdentifierTypeCanNlCorporateRegistry IdentifierType = "can_nl_corporate_registry"
	// Hex digest of Data Axle Infogroup ID
	IdentifierTypeCanDataAxleHash IdentifierType = "can_data_axle_hash"
	// ZAPST number used for shareholders and partners in Slovenia Corporate Registry
	IdentifierTypeSvnAjpesZapstNumber IdentifierType = "svn_ajpes_zapst_number"
	// CorpWatch Database ID
	IdentifierTypeUsaCorpwatchId IdentifierType = "usa_corpwatch_id"
	// USA Delaware File Number
	IdentifierTypeUsaDeFileNumber IdentifierType = "usa_de_file_number"
	// Isle of Man Company Number
	IdentifierTypeImnCompanyNumber IdentifierType = "imn_company_number"
	// Slovenian VAT number
	IdentifierTypeSvnVatNumber IdentifierType = "svn_vat_number"
	// Acuris Unique ID
	IdentifierTypeXxxAcurisId IdentifierType = "xxx_acuris_id"
	// Pakistan EGM ID
	IdentifierTypePakEgmId IdentifierType = "pak_egm_id"
	// USA Delaware Registered Agent ID
	IdentifierTypeUsaDeRegisteredAgentId IdentifierType = "usa_de_registered_agent_id"
	// ICIJ Offshore Database Internal ID
	IdentifierTypeIcijOffshoreInternalId IdentifierType = "icij_offshore_internal_id"
	// ICIJ Offshore Database Node ID
	IdentifierTypeIcijOffshoreNodeId IdentifierType = "icij_offshore_node_id"
	// Ecuador Branch ID
	IdentifierTypeEcuBranchId IdentifierType = "ecu_branch_id"
	// Palestine registration ID
	IdentifierTypePseRegistrationId IdentifierType = "pse_registration_id"
	// Serbia company registration number (matični broj)
	IdentifierTypeSrbMbNumber IdentifierType = "srb_mb_number"
	// Serbia tax ID number
	IdentifierTypeSrbPibNumber IdentifierType = "srb_pib_number"
	// Serbia branch ID
	IdentifierTypeSrbBranchId IdentifierType = "srb_branch_id"
	// Russia Bank Identification Code
	IdentifierTypeRusBikCode IdentifierType = "rus_bik_code"
	// Panadata Internal ID
	IdentifierTypePanadataInternalId IdentifierType = "panadata_internal_id"
	// San Marino Economic Operator Code
	IdentifierTypeSmrEconomicOperatorCode IdentifierType = "smr_economic_operator_code"
	// USA Connecticut Internal ID
	IdentifierTypeUsaCtInternalId IdentifierType = "usa_ct_internal_id"
	// Authoritative legal entity identifier (ALEI), a government-issued registration number that is standardized according to [ISO 8000](https://en.wikipedia.org/wiki/ISO_8000)
	IdentifierTypeAlei IdentifierType = "alei"
	// Unique Canada province ID number. Assigned to every entity in the Nova Scotia Corporate Registry.
	IdentifierTypeCanNsCorporateRegistry IdentifierType = "can_ns_corporate_registry"
	// Somalian UBI Number
	IdentifierTypeSomUbi IdentifierType = "som_ubi"
	// Bahamas Tax Identification Number
	IdentifierTypeBhsTin IdentifierType = "bhs_tin"
	// Italy Economic and Administrative Repertory Number
	IdentifierTypeItaReaNumber IdentifierType = "ita_rea_number"
	// Mexico DENUE Unique ID
	IdentifierTypeMexDenueClee IdentifierType = "mex_denue_clee"
	// IHS Owner Code
	IdentifierTypeIhsOwnerCode IdentifierType = "ihs_owner_code"
	// Australia Consolidated Sanctions Reference ID
	IdentifierTypeAusConsolidatedSanctionsReference IdentifierType = "aus_consolidated_sanctions_reference"
	// Swiss SECO Sanction Number
	IdentifierTypeCheSecoSanctionNumber IdentifierType = "che_seco_sanction_number"
	// United Kingdom VAT Number
	IdentifierTypeGbrVatNo IdentifierType = "gbr_vat_no"
	// United Kingdom Confirmation Statement Company Number
	IdentifierTypeGbrCompanyNumber IdentifierType = "gbr_company_number"
	// Spain NIF Number
	IdentifierTypeEspNif IdentifierType = "esp_nif"
	// Unique Entity Identifier (SAM)
	IdentifierTypeUsaSamUeiNumber IdentifierType = "usa_sam_uei_number"
	// Identifier for corporations and trademarks in US Virgin Islands
	IdentifierTypeUsaUsviCorpNumber IdentifierType = "usa_usvi_corp_number"
	// Nicaragua Trade Internal Shipment ID
	IdentifierTypeNicTradeInternalShipmentId IdentifierType = "nic_trade_internal_shipment_id"
	// Nicaragua RUC Number
	IdentifierTypeNicRucNumber IdentifierType = "nic_ruc_number"
	// Nicaragua Numero Unico
	IdentifierTypeNicNumeroUnico         IdentifierType = "nic_numero_unico"
	IdentifierTypeCriCedulaJuridica      IdentifierType = "cri_cedula_juridica"
	IdentifierTypeCriCedulaCitizenPerson IdentifierType = "cri_cedula_citizen_person"
	IdentifierTypeCriCedulaForeignPerson IdentifierType = "cri_cedula_foreign_person"
	// Bolivia Matricula Number
	IdentifierTypeBolMatricula IdentifierType = "bol_matricula"
	// Bolivia Matricula Number (old format)
	IdentifierTypeBolOldMatricula IdentifierType = "bol_old_matricula"
	// Nigerian Corporate Registry Internal ID
	IdentifierTypeNgaCrpRegInternalId IdentifierType = "nga_crp_reg_internal_id"
	// Nigerian Corporate Registry Registration Serial No.
	IdentifierTypeNgaRegistrationSn IdentifierType = "nga_registration_sn"
	// Nigerian National Identification Number
	IdentifierTypeNgaNin IdentifierType = "nga_nin"
	// Nigerian Driver's License No.
	IdentifierTypeNgaDrivers IdentifierType = "nga_drivers"
	// Nigerian Tax ID number
	IdentifierTypeNgaTaxId IdentifierType = "nga_tax_id"
	// Dominica Business Registry Internal ID
	IdentifierTypeDmaBusinessRegistryInternalId IdentifierType = "dma_business_registry_internal_id"
	// The Commercial and Government Entity (CAGE) code is a five-character ID assigned by the US Department of Defense's Defense Logistics Agency (DLA) to refer to a facility at a specific location (includes government suppliers, agencies, and other organizations). CAGE codes for entities outside the USA are called NATO Commercial and Government Entity (NCAGE) codes and are part of the NATO Codification System (NCS). Learn more [here](https://fawiki.fws.gov/display/SAM/Commercial+And+Government+Entity+%28CAGE%29+Code+Information).
	IdentifierTypeCage IdentifierType = "cage"
	// Antigua and Barbuda Business Registry Internal ID
	IdentifierTypeAtgBusinessRegistryInternalId IdentifierType = "atg_business_registry_internal_id"
	// St. Lucia Business Registry Internal ID
	IdentifierTypeLcaBusinessRegistryInternalId IdentifierType = "lca_business_registry_internal_id"
	// Portuguese Trust Number
	IdentifierTypePrtTrustNumber IdentifierType = "prt_trust_number"
	// Portuguese VAT Number
	IdentifierTypePrtVatNumber IdentifierType = "prt_vat_number"
	// Morocco Passport Number
	IdentifierTypeMarPassport IdentifierType = "mar_passport"
	// Democratic Republic of the Congo Passport Number
	IdentifierTypeCodPassport IdentifierType = "cod_passport"
	// North Korea Passport Number
	IdentifierTypePrkPassport IdentifierType = "prk_passport"
	// Singapore Passport Number
	IdentifierTypeSgpPassport IdentifierType = "sgp_passport"
	// China Passport Number
	IdentifierTypeChnPassport IdentifierType = "chn_passport"
	// Oman Passport Number
	IdentifierTypeOmnPassport IdentifierType = "omn_passport"
	// Central African Republic Passport Number
	IdentifierTypeCafPassport IdentifierType = "caf_passport"
	// South Sudan Passport Number
	IdentifierTypeSsdPassport IdentifierType = "ssd_passport"
	// Trinbagonian Business Number
	IdentifierTypeTtoBizNumber IdentifierType = "tto_biz_number"
	// Turkish Tax Identifier
	IdentifierTypeTurTaxId IdentifierType = "tur_tax_id"
	// Bermuda Registrar of Companies Number
	IdentifierTypeBmuRegistrarOfCompaniesNumber IdentifierType = "bmu_registrar_of_companies_number"
	// Democratic Republic of the Congo RCCM Number
	IdentifierTypeCodRccmNumber IdentifierType = "cod_rccm_number"
	// Democratic Republic of the Congo RCCM OHADA Number
	IdentifierTypeCodRccmOhadaNumber IdentifierType = "cod_rccm_ohada_number"
	// Abu Dhabi Registration Authority Number
	IdentifierTypeAreRegAuthNumber IdentifierType = "are_reg_auth_number"
	// North Korea Shipment ID
	IdentifierTypePrkShipmentId IdentifierType = "prk_shipment_id"
	// Ecuador Importer ID
	IdentifierTypeEcuImporterId IdentifierType = "ecu_importer_id"
	// Ecuador Exporter ID
	IdentifierTypeEcuExporterId IdentifierType = "ecu_exporter_id"
	// Ecuador Shipment Reference Number
	IdentifierTypeEcuShipmentRefNo IdentifierType = "ecu_shipment_ref_no"
	// Unique identifier for entities in CRB Monitor data
	IdentifierTypeXxxCrbMonitorEntityId IdentifierType = "xxx_crb_monitor_entity_id"
	// Unique identifier for issuers in EDI Global data
	IdentifierTypeXxxEdiGlobalIssuerId IdentifierType = "xxx_edi_global_issuer_id"
	// Unique identifier for securities in EDI Global data
	IdentifierTypeXxxEdiGlobalSecurityId IdentifierType = "xxx_edi_global_security_id"
	// Unique identifier for imports and exports in Chile
	IdentifierTypeChlImportExportControlId IdentifierType = "chl_import_export_control_id"
	// Unique identifier for Chilean imports
	IdentifierTypeChlImportManifestNumber IdentifierType = "chl_import_manifest_number"
	// Unique identifier for Chilean importers and exporters
	IdentifierTypeChlImporterExporterId IdentifierType = "chl_importer_exporter_id"
	// Unique identifier for Argentinian imports and exports
	IdentifierTypeArgImportExportId IdentifierType = "arg_import_export_id"
	// Single tax identification code in Argentina for any individual that initiates an economic activity (missing control digit)
	IdentifierTypeArgPartialCuit IdentifierType = "arg_partial_cuit"
	// Unique identifier for Panamanian importers and exporters
	IdentifierTypePanImporterExporterId IdentifierType = "pan_importer_exporter_id"
	// Declaration number for import and export shipments in Panama
	IdentifierTypePanDeclarationNumber IdentifierType = "pan_declaration_number"
	// Mexico Shipment Number
	IdentifierTypeMexShipmentNumber IdentifierType = "mex_shipment_number"
	// Internal ID for Costa Rica comexport data (exporter number)
	IdentifierTypeCriExp IdentifierType = "cri_exp"
	// Internal ID for Costa Rica comexport data (importer number)
	IdentifierTypeCriImp IdentifierType = "cri_imp"
	// Internal ID for Costa Rica comexport data (shipping operation number)
	IdentifierTypeCriOpNo IdentifierType = "cri_op_no"
	// Colombia Número Único de Registro
	IdentifierTypeColNur IdentifierType = "col_nur"
	// Nepali Company Registration No. from National Information Technology Center
	IdentifierTypeNplCoRegNo             IdentifierType = "npl_co_reg_no"
	IdentifierTypeUsaSamExclusionsNumber IdentifierType = "usa_sam_exclusions_number"
	// The National Provider Identifier (NPI) is a unique number for health care providers in the United States.
	IdentifierTypeUsaNpiNumber IdentifierType = "usa_npi_number"
	// A Unique Physician Identification Number (UPIN) is a unique six-character alphanumeric identifier for health care providers in the United States that was discontinued in June 2007.
	IdentifierTypeUsaUpinNumber IdentifierType = "usa_upin_number"
	// British Columbia Registration Number
	IdentifierTypeCanBcRegistrationNumber IdentifierType = "can_bc_registration_number"
	// The Canada Revenue Agency (CRA) business number is a nine-digit tax ID assigned to organizations to help them engage with federal and provincial government programs. Learn more [here](https://www.liveabout.com/what-is-the-canada-revenue-agency-cra-business-number-2947322).
	IdentifierTypeCanBusinessNumber IdentifierType = "can_business_number"
	// China Securities Regulatory Commission Code / 证券代码
	IdentifierTypeChnCsrcNo IdentifierType = "chn_csrc_no"
	// USA Minnesota Secretary of State Unique ID
	IdentifierTypeUsaMnMasterId IdentifierType = "usa_mn_master_id"
	// USA Minnesota Secretary of State Filing Number
	IdentifierTypeUsaMnFilingNumber IdentifierType = "usa_mn_filing_number"
	// Business ID from Indiana, USA, corporate registry
	IdentifierTypeUsaInBizNo IdentifierType = "usa_in_biz_no"
	// Vessel ID from Lloyd's Maritime Data
	IdentifierTypeLloydsInternalVesselId IdentifierType = "lloyds_internal_vessel_id"
	// Entity ID from Lloyd's Maritime Data
	IdentifierTypeLloydsInternalEntityId IdentifierType = "lloyds_internal_entity_id"
	// USA New Hampshire Business ID
	IdentifierTypeUsaNhBusinessId IdentifierType = "usa_nh_business_id"
	// UK Sanctions List Unique ID
	IdentifierTypeGbrUkSanctionsId IdentifierType = "gbr_uk_sanctions_id"
	// Montana Secretary of State Business Entity Number
	IdentifierTypeMontanaSosInternalEntityId IdentifierType = "montana_sos_internal_entity_id"
	// USA Massachusetts Secretary of State Company ID
	IdentifierTypeUsaMassSosCompanyId IdentifierType = "usa_mass_sos_company_id"
	// China Resident Identity Number
	IdentifierTypeChnResidentIdNumber IdentifierType = "chn_resident_id_number"
	// USA New Jersey Department of Treasury Business ID
	IdentifierTypeUsaNjBusinessId IdentifierType = "usa_nj_business_id"
	// Utah Secretary of State Business Entity Number
	IdentifierTypeUtahCorporateRegistryInternalEntityNumber IdentifierType = "utah_corporate_registry_internal_entity_number"
	// USA Louisiana Secretary of State Business Entity Number
	IdentifierTypeUsaLaSosId IdentifierType = "usa_la_sos_id"
	// USA Alabama Secretary of State Business Entity ID
	IdentifierTypeUsaAlSosId IdentifierType = "usa_al_sos_id"
	// USA South Carolina Secretary of State Corporation ID
	IdentifierTypeUsaScCorpId IdentifierType = "usa_sc_corp_id"
	// USA state of Kentucky organization number assigned to businesses
	IdentifierTypeUsaKyOrgNo IdentifierType = "usa_ky_org_no"
	// USA Illinois Secretary of State File Number
	IdentifierTypeUsaIlFileNumber IdentifierType = "usa_il_file_number"
	// Unique identifier used for companies in Indonesia UBO data
	IdentifierTypeIdnTransactionNumber IdentifierType = "idn_transaction_number"
	// Unique identifier used for owners in Indonesia UBO data
	IdentifierTypeIdnUboOwnerId IdentifierType = "idn_ubo_owner_id"
	// Swedish Organisationnummer with two-digit prefix
	IdentifierTypeSweTaxNumber IdentifierType = "swe_tax_number"
	// Panadata Internal SID
	IdentifierTypePanadataInternalSid IdentifierType = "panadata_internal_sid"
	// Paraguay Company Tax ID
	IdentifierTypePryTaxId IdentifierType = "pry_tax_id"
	// Paraguay Shipment Number
	IdentifierTypePryShipmentNumber IdentifierType = "pry_shipment_number"
	// Unique identifier for Tokyo Stock Exchange companies
	IdentifierTypeTokyoStockExchangeNo IdentifierType = "tokyo_stock_exchange_no"
	// Sweden FI Identification Number
	IdentifierTypeSweFiId IdentifierType = "swe_fi_id"
	// Germany BaFin-ID
	IdentifierTypeDeuBafinId IdentifierType = "deu_bafin_id"
	// Global Trade Internal Shipment ID
	IdentifierTypeGlobalTradeInternalShipmentId IdentifierType = "global_trade_internal_shipment_id"
	// China Vessel Inspection Registration Number
	IdentifierTypeChinaVesselInspectionRegistration IdentifierType = "china_vessel_inspection_registration"
	// China Vessel Registration Number
	IdentifierTypeChinaVesselRegistration IdentifierType = "china_vessel_registration"
	// CCS Vessel Registration Number
	IdentifierTypeCcsRegistration IdentifierType = "ccs_registration"
	// USA OTI Organization Number
	IdentifierTypeUsaOtiId IdentifierType = "usa_oti_id"
	// Stock market ticker
	IdentifierTypeStockTicker IdentifierType = "stock_ticker"
	// Unique Canada province ID number. Assigned to every legal entity registered with the Manitoba Companies Office.
	IdentifierTypeCanMbRegistry IdentifierType = "can_mb_registry"
	// Unique Canada province ID number. Assigned to every legal entity in the Quebec Enterprise Register.
	IdentifierTypeQuebecEnterpriseNumber IdentifierType = "quebec_enterprise_number"
	// Unique Canada province ID number. Assigned to every legal entity in the Ontario Business Registry.
	IdentifierTypeOntarioCorporationNumber IdentifierType = "ontario_corporation_number"
	// Unique Canada province ID number. Assigned to every legal entity in the Saskatchewan Corporate Registry.
	IdentifierTypeSaskatchewanRegistryNumber IdentifierType = "saskatchewan_registry_number"
	// Unique Canada province ID number. Assigned to every legal entity in the Alberta Corporate Registry.
	IdentifierTypeAlbertaCorporationNumber IdentifierType = "alberta_corporation_number"
	// Brazil Shipment Number
	IdentifierTypeBraShipmentNumber IdentifierType = "bra_shipment_number"
	// Ukraine NAZK sanctions company internal ID
	IdentifierTypeUkrSanctionsNazkCompanyInternalId IdentifierType = "ukr_sanctions_nazk_company_internal_id"
	// Ukraine NAZK sanctions person internal ID
	IdentifierTypeUkrSanctionsNazkPersonInternalId IdentifierType = "ukr_sanctions_nazk_person_internal_id"
	// Ethereum address
	IdentifierTypeEthereumAddress IdentifierType = "ethereum_address"
	// Dash address
	IdentifierTypeDashAddress IdentifierType = "dash_address"
	// Zcash address
	IdentifierTypeZcashAddress IdentifierType = "zcash_address"
	// Unique USA ID number. Assigned to every trademark application.
	IdentifierTypeUsaUsptoSerialNumber IdentifierType = "usa_uspto_serial_number"
	// Unique USA ID number. Assigned to every registered trademark.
	IdentifierTypeUsaUsptoRegNo IdentifierType = "usa_uspto_reg_no"
	// Unique USA ID number. Assigned to every foreign trademark application.
	IdentifierTypeUsaUsptoForeignApplicationNo IdentifierType = "usa_uspto_foreign_application_no"
	// Unique USA ID number. Assigned to every registered foreign trademark.
	IdentifierTypeUsaUsptoForeignRegNo IdentifierType = "usa_uspto_foreign_reg_no"
	// Unique USA ID number. Assigned to every registered foreign trademark.
	IdentifierTypeWipoIntlRegNo IdentifierType = "wipo_intl_reg_no"
	// Unique USA ID number. Assigned to every foreign trademark application.
	IdentifierTypeWipoIntlRefNo IdentifierType = "wipo_intl_ref_no"
	// Unique UK charity ID number. Assigned to every charity registered with the Charity Commission for England and Wales.
	IdentifierTypeGbrCharityNo IdentifierType = "gbr_charity_no"
	// Unique UK internal ID number. Assigned to every trustee registered with the Charity Commission for England and Wales.
	IdentifierTypeGbrTrusteeId IdentifierType = "gbr_trustee_id"
	// Unique UK government organization ID number. Assigned to government organizations in the UK.
	IdentifierTypeGbrGoNo IdentifierType = "gbr_go_no"
	// Unique Ireland ID number. Assigned to every legal entity registered with Ireland Companies Registration Office.
	IdentifierTypeIrlRegistrationNo IdentifierType = "irl_registration_no"
	// Registered Charity Number (RCN). Unique Identifier issued by the Charities Regulator to the registered charitable organizations awarded with charitable status.
	IdentifierTypeIrlRcn IdentifierType = "irl_rcn"
	// Belize Companies & Corporate Affairs Registry (BCCAR) registration number
	IdentifierTypeBlzBccarRegNo IdentifierType = "blz_bccar_reg_no"
	// Unique customs registration number. Assigned to all entities registered with China General Administration of Customs.
	IdentifierTypeChnCustomsRegistrationNo IdentifierType = "chn_customs_registration_no"
	// Iceland VAT identification number. Assigned to legal entities registered with Tax Administration.
	IdentifierTypeIslVatNum IdentifierType = "isl_vat_num"
	// Unique Canada ID number. Assigned to every registered trademark.
	IdentifierTypeCanTmRegistrationNo IdentifierType = "can_tm_registration_no"
	// Azerbaijan TIN. Unique number assigned to taxpayers registered with Azerbaijan State Tax Service.
	IdentifierTypeAzeTinNumber IdentifierType = "aze_tin_number"
	// Tajikistan TIN. Unique number assigned to taxpayers registered with Tajikistan Tax Authorities.
	IdentifierTypeTjkTinNumber IdentifierType = "tjk_tin_number"
	// Tajikistan EIN (RYIAM) number. Unique number assigned to taxpayers in Tajikistan.
	IdentifierTypeTjkEinNumber IdentifierType = "tjk_ein_number"
	// Monaco RCI Trade Register Number. Unique number assigned to entities with activities in Monaco registered with the Directory of Trade and Industry Directory.
	IdentifierTypeMcoRciNumber IdentifierType = "mco_rci_number"
	// Monaco Statistical Identification Number. Unique identifier assigned by the Institute of Statistics and Economic Studies (Monaco Statistics) for entities with economic activity in Monaco.
	IdentifierTypeMcoNis IdentifierType = "mco_nis"
	// Unique Canada provincial ID number. Assigned to every business registered with Ontario Ministry of Consumer and Business Services.
	IdentifierTypeOnBusinessIdNumber IdentifierType = "on_business_id_number"
	// Unique Syria ID number. Assigned to every legal entity registered with the Syria Ministry of Economy and Foreign Trade.
	IdentifierTypeSyriaCommercialRegisterNumber IdentifierType = "syria_commercial_register_number"
	// Unique internal company ID number. Assigned to every company in China Xinjiang Department of Housing and Urban-Rural Development Company Database
	IdentifierTypeCnHurdInternalCompanyId IdentifierType = "cn_hurd_internal_company_id"
	// Unique Hungary Tax ID. Issued to companies registered in Hungary.
	IdentifierTypeHunTaxNumber IdentifierType = "hun_tax_number"
	// Statistical Number for Hungarian companies issued by the Hungarian Central Statistical Office
	IdentifierTypeHunKrsNumber IdentifierType = "hun_krs_number"
	// Unique HUN registration number. Assigned to every legal entity registered with the Ministry of Justice of Hungary.
	IdentifierTypeHunCompanyRegisterNumber IdentifierType = "hun_company_register_number"
	// Unique TIN. Issued for individuals by Hungarian Tax Authorities.
	IdentifierTypeHunPersonTaxId IdentifierType = "hun_person_tax_id"
	// Malawi Tax Payer Identification Number. Unique number assigned to taxpayers in Malawi and issued by the Malawi Revenue Authority.
	IdentifierTypeMwTpinTaxRegNum IdentifierType = "mw_tpin_tax_reg_num"
	// Liberia Tax Identification Number. Unique number assigned to taxpayers in Liberia and issued by the Liberia Revenue Authority.
	IdentifierTypeLrTin IdentifierType = "lr_tin"
	// Cameroon Tax Registration Number. Unique number assigned to taxpayers in Cameroon and issued by the Directorate General of Tax.
	IdentifierTypeCmNuiTaxRegNum IdentifierType = "cm_nui_tax_reg_num"
	// Unique EU Financial Sanctions Database ID number. Assigned to every entity in the EU Financial Sanctions Database.
	IdentifierTypeEuFsdId IdentifierType = "eu_fsd_id"
	// Unique Hong Kong tax ID number. Assigned to every company registered with the Hong Kong Business Registration Office.
	IdentifierTypeCnHkBrNumber IdentifierType = "cn_hk_br_number"
	// Unique Identification Number. Registration number assigned to companies by the Companies and Intellectual Property Authority.
	IdentifierTypeBwaUinRegNumber IdentifierType = "bwa_uin_reg_number"
	// Unique Canada ID number. Assigned to every entity registered with Canadian Securities Administrators National Registration Database.
	IdentifierTypeCanNrd IdentifierType = "can_nrd"
	// Global Intermediary Identification Number (GIIN). Unique Identifier issued by the IRS to financial institutions, branches, direct reporting non-financial foreign entities, and sponsored entities.
	IdentifierTypeUsaIrsGiin IdentifierType = "usa_irs_giin"
	// Unique internal ID number assigned to individuals. Assigned to every individual registered with Canadian Securities Administrators National Registration Database.
	IdentifierTypeCanNrdIndividualId IdentifierType = "can_nrd_individual_id"
	// Unique Jamaica company registration number. Assigned to every company in the Jamaica Corporate Registry.
	IdentifierTypeJamCompanyId IdentifierType = "jam_company_id"
	// Spain Internal Employee Number
	IdentifierTypeEspInternalEmployeeNumber IdentifierType = "esp_internal_employee_number"
	// Unique identifier assigned to every entity in the New Zealand Russia Sanctions Register.
	IdentifierTypeNzlRussiaSanctionsUid IdentifierType = "nzl_russia_sanctions_uid"
	// Unique Canada province ID number. Assigned to every legal entity registered with the New Brunswick Corporate Affairs Registry.
	IdentifierTypeCanNewBrunswickReferenceNumber IdentifierType = "can_new_brunswick_reference_number"
	// Unique reference number assigned to every entity in the France National Asset Freeze Register.
	IdentifierTypeFraAssetFreezeId IdentifierType = "fra_asset_freeze_id"
	// Unique Serbia ID number. Assigned to every entity registered with the Serbia Business Register Agency's Register of Beneficial Owners.
	IdentifierTypeSrbBeneficialOwnerId IdentifierType = "srb_beneficial_owner_id"
	// Unique Canada province ID number. Assigned to every entity registered with the Prince Edward Island Corporate Registry.
	IdentifierTypeCanPeRegistrationNumber IdentifierType = "can_pe_registration_number"
	// Hex digest of FSMA entity name
	IdentifierTypeBelFsmaNameHash IdentifierType = "bel_fsma_name_hash"
	// Curacao Registry Number. Unique Identifier issued by the Curacao Chamber of Commerce & Industry to the registered companies.
	IdentifierTypeCuwRegNumber IdentifierType = "cuw_reg_number"
	// A unique concatenation of bill of lading number, date of customs declaration and Russia customs sequence number.
	IdentifierTypeRusDeclarationNumber IdentifierType = "rus_declaration_number"
	// Russia Trade Internal Shipment ID
	IdentifierTypeRuTradeInternalShipmentId IdentifierType = "ru_trade_internal_shipment_id"
	// Unique concatenation of bill of lading number and item number for shipments in Turkey.
	IdentifierTypeTurShipmentId IdentifierType = "tur_shipment_id"
	// Unique business Identification number. Assigned to every registered business in Bangladesh.
	IdentifierTypeBdBin IdentifierType = "bd_bin"
	// Unique registration number. Assigned to every company registered with the UAE National Economic Register.
	IdentifierTypeAerNerNumber IdentifierType = "aer_ner_number"
	// Taiwan Passport Number
	IdentifierTypeTwnPassportNumber IdentifierType = "twn_passport_number"
	// Belgium unique natural person ID number.
	IdentifierTypeBelNationalRegisterNo IdentifierType = "bel_national_register_no"
	// Afghanistan Trade Internal Shipment ID
	IdentifierTypeAfgTradeInternalShipmentId IdentifierType = "afg_trade_internal_shipment_id"
	// Ukraine SFMS List Identifier. Reference number assigned to all entities listed under Ukraine SFMS List for Terrorism.
	IdentifierTypeUkrFiuListNumber IdentifierType = "ukr_fiu_list_number"
	// Unique identification number assigned to every entity registered with the Bank of Spain.
	IdentifierTypeEspBeCode IdentifierType = "esp_be_code"
	// Spain TR Number
	IdentifierTypeEspTrNumber IdentifierType = "esp_tr_number"
	// Unique Jersey ID number. Assigned to every registered trademark.
	IdentifierTypeJeyTrademarkRegNo IdentifierType = "jey_trademark_reg_no"
	// Action number assigned by the Environment Agency to each enforcement action against offender pursuant to relevant legislation.
	IdentifierTypeGbrEnforcementActionNum IdentifierType = "gbr_enforcement_action_num"
	// Tanzania Registration Number. Unique identifier issued by the Tanzania Business Registration and Licensing Agency and assigned to the registered entities.
	IdentifierTypeTzaBrelaRegNum IdentifierType = "tza_brela_reg_num"
	// Unique India identifier code. Assigned to all entities listed on the India National Stock Exchange.
	IdentifierTypeIndNseTickerCode IdentifierType = "ind_nse_ticker_code"
	// Unique Florida county land and property ID number. Assigned to every parcel registered with the Saint Lucie County Property Appraiser’s Office.
	IdentifierTypeUsaFlSlPid IdentifierType = "usa_fl_sl_pid"
	// Penalty number assigned by the Quebec Ministry of the Environment, the Fight against Climate Change, Wildlife and Parks to each entity listed as offender in the Register of Administrative Monetary Penalties for non-compliance with environmental laws and regulations.
	IdentifierTypeCanQcSapRegistryRefNum IdentifierType = "can_qc_sap_registry_ref_num"
)

func NewIdentifierTypeFromString(s string) (IdentifierType, error) {
	switch s {
	case "cn_tianyancha_company_id":
		return IdentifierTypeCnTianyanchaCompanyId, nil
	case "cn_tianyancha_human_id":
		return IdentifierTypeCnTianyanchaHumanId, nil
	case "cn_unified_social_credit_code":
		return IdentifierTypeCnUnifiedSocialCreditCode, nil
	case "cn_registration_number":
		return IdentifierTypeCnRegistrationNumber, nil
	case "cn_organization_code":
		return IdentifierTypeCnOrganizationCode, nil
	case "cn_qichacha_internal_id":
		return IdentifierTypeCnQichachaInternalId, nil
	case "cn_hk_cr_number":
		return IdentifierTypeCnHkCrNumber, nil
	case "cn_hk_filing_number":
		return IdentifierTypeCnHkFilingNumber, nil
	case "bh_cr_number":
		return IdentifierTypeBhCrNumber, nil
	case "bh_cr_number_and_branch":
		return IdentifierTypeBhCrNumberAndBranch, nil
	case "jo_internal_id":
		return IdentifierTypeJoInternalId, nil
	case "jo_national_institution_number":
		return IdentifierTypeJoNationalInstitutionNumber, nil
	case "jo_institution_number":
		return IdentifierTypeJoInstitutionNumber, nil
	case "malta_company_number":
		return IdentifierTypeMaltaCompanyNumber, nil
	case "malta_national_id":
		return IdentifierTypeMaltaNationalId, nil
	case "malta_accountancy_registration_id":
		return IdentifierTypeMaltaAccountancyRegistrationId, nil
	case "uk_company_number":
		return IdentifierTypeUkCompanyNumber, nil
	case "uk_firm_reference_number":
		return IdentifierTypeUkFirmReferenceNumber, nil
	case "uk_person_number":
		return IdentifierTypeUkPersonNumber, nil
	case "mx_rfc_person":
		return IdentifierTypeMxRfcPerson, nil
	case "mx_curp":
		return IdentifierTypeMxCurp, nil
	case "mx_rfc_company":
		return IdentifierTypeMxRfcCompany, nil
	case "mx_office_fme":
		return IdentifierTypeMxOfficeFme, nil
	case "ru_inn":
		return IdentifierTypeRuInn, nil
	case "ru_ogrn":
		return IdentifierTypeRuOgrn, nil
	case "ven_saren_internal_employer_number":
		return IdentifierTypeVenSarenInternalEmployerNumber, nil
	case "bra_cnpj":
		return IdentifierTypeBraCnpj, nil
	case "ven_rif":
		return IdentifierTypeVenRif, nil
	case "ven_cedula_number":
		return IdentifierTypeVenCedulaNumber, nil
	case "mdv_registration_number":
		return IdentifierTypeMdvRegistrationNumber, nil
	case "ind_director_id_number":
		return IdentifierTypeIndDirectorIdNumber, nil
	case "ind_permanent_account_number":
		return IdentifierTypeIndPermanentAccountNumber, nil
	case "ind_corporate_id_number":
		return IdentifierTypeIndCorporateIdNumber, nil
	case "kaz_tin":
		return IdentifierTypeKazTin, nil
	case "kaz_bin":
		return IdentifierTypeKazBin, nil
	case "kaz_state_reg_num":
		return IdentifierTypeKazStateRegNum, nil
	case "kaz_okpo_num":
		return IdentifierTypeKazOkpoNum, nil
	case "kaz_identifier":
		return IdentifierTypeKazIdentifier, nil
	case "rks_registration_number":
		return IdentifierTypeRksRegistrationNumber, nil
	case "grc_gemi_number":
		return IdentifierTypeGrcGemiNumber, nil
	case "ven_rnc_number":
		return IdentifierTypeVenRncNumber, nil
	case "usa_va_reg_id":
		return IdentifierTypeUsaVaRegId, nil
	case "usa_ny_reg_id":
		return IdentifierTypeUsaNyRegId, nil
	case "usa_fei_number":
		return IdentifierTypeUsaFeiNumber, nil
	case "ukr_moj_id":
		return IdentifierTypeUkrMojId, nil
	case "mus_reg_id":
		return IdentifierTypeMusRegId, nil
	case "uk_title_number":
		return IdentifierTypeUkTitleNumber, nil
	case "mng_reg_number":
		return IdentifierTypeMngRegNumber, nil
	case "mne_reg_number":
		return IdentifierTypeMneRegNumber, nil
	case "kgz_reg_number":
		return IdentifierTypeKgzRegNumber, nil
	case "cn_importexport_code":
		return IdentifierTypeCnImportexportCode, nil
	case "prk_entity_id":
		return IdentifierTypePrkEntityId, nil
	case "prk_registration_id":
		return IdentifierTypePrkRegistrationId, nil
	case "yugoslav_master_citizen_num":
		return IdentifierTypeYugoslavMasterCitizenNum, nil
	case "bfa_entity_id":
		return IdentifierTypeBfaEntityId, nil
	case "afghan_tin_number":
		return IdentifierTypeAfghanTinNumber, nil
	case "afg_business_license":
		return IdentifierTypeAfgBusinessLicense, nil
	case "mdg_nif_number":
		return IdentifierTypeMdgNifNumber, nil
	case "mdg_stat_number":
		return IdentifierTypeMdgStatNumber, nil
	case "mdg_rcs_number":
		return IdentifierTypeMdgRcsNumber, nil
	case "lva_personal_code":
		return IdentifierTypeLvaPersonalCode, nil
	case "iban":
		return IdentifierTypeIban, nil
	case "lva_reg_number":
		return IdentifierTypeLvaRegNumber, nil
	case "twn_unified_number":
		return IdentifierTypeTwnUnifiedNumber, nil
	case "lux_rcs_number":
		return IdentifierTypeLuxRcsNumber, nil
	case "mkd_embs_number":
		return IdentifierTypeMkdEmbsNumber, nil
	case "mkd_embs_branch_number":
		return IdentifierTypeMkdEmbsBranchNumber, nil
	case "mkd_archive_number":
		return IdentifierTypeMkdArchiveNumber, nil
	case "mda_idno_number":
		return IdentifierTypeMdaIdnoNumber, nil
	case "ury_ruc_number":
		return IdentifierTypeUryRucNumber, nil
	case "che_uid_number":
		return IdentifierTypeCheUidNumber, nil
	case "slv_commercial_reg_number":
		return IdentifierTypeSlvCommercialRegNumber, nil
	case "slv_uid_number":
		return IdentifierTypeSlvUidNumber, nil
	case "mato_grosso_legal_id":
		return IdentifierTypeMatoGrossoLegalId, nil
	case "lei":
		return IdentifierTypeLei, nil
	case "vat":
		return IdentifierTypeVat, nil
	case "ita_fiscal_code":
		return IdentifierTypeItaFiscalCode, nil
	case "ita_vat_number":
		return IdentifierTypeItaVatNumber, nil
	case "rio_de_janeiro_legal_id":
		return IdentifierTypeRioDeJaneiroLegalId, nil
	case "isl_tin_number":
		return IdentifierTypeIslTinNumber, nil
	case "lao_enterprise_number":
		return IdentifierTypeLaoEnterpriseNumber, nil
	case "svk_ico_number":
		return IdentifierTypeSvkIcoNumber, nil
	case "khm_tin_number":
		return IdentifierTypeKhmTinNumber, nil
	case "cze_ico_number":
		return IdentifierTypeCzeIcoNumber, nil
	case "irn_national_id":
		return IdentifierTypeIrnNationalId, nil
	case "ecu_ruc_number":
		return IdentifierTypeEcuRucNumber, nil
	case "grc_vat_number":
		return IdentifierTypeGrcVatNumber, nil
	case "can_corporation_number":
		return IdentifierTypeCanCorporationNumber, nil
	case "can_cra_program_account_number":
		return IdentifierTypeCanCraProgramAccountNumber, nil
	case "mne_pib":
		return IdentifierTypeMnePib, nil
	case "chl_cedula_number":
		return IdentifierTypeChlCedulaNumber, nil
	case "bra_case_number":
		return IdentifierTypeBraCaseNumber, nil
	case "ind_llpin":
		return IdentifierTypeIndLlpin, nil
	case "ind_fcrn":
		return IdentifierTypeIndFcrn, nil
	case "bmu_registration_number":
		return IdentifierTypeBmuRegistrationNumber, nil
	case "bra_cpf_number":
		return IdentifierTypeBraCpfNumber, nil
	case "irn_national_number":
		return IdentifierTypeIrnNationalNumber, nil
	case "chn_customs_registration_code":
		return IdentifierTypeChnCustomsRegistrationCode, nil
	case "lie_public_reg_no":
		return IdentifierTypeLiePublicRegNo, nil
	case "cn_tax_identification_number":
		return IdentifierTypeCnTaxIdentificationNumber, nil
	case "mac_registration_no":
		return IdentifierTypeMacRegistrationNo, nil
	case "siger_internal_id":
		return IdentifierTypeSigerInternalId, nil
	case "lbn_national_id":
		return IdentifierTypeLbnNationalId, nil
	case "int_maritime_org_id":
		return IdentifierTypeIntMaritimeOrgId, nil
	case "ru_ship_register_id":
		return IdentifierTypeRuShipRegisterId, nil
	case "sayari_internal_identifier":
		return IdentifierTypeSayariInternalIdentifier, nil
	case "aruba_chamber_of_commerce_id":
		return IdentifierTypeArubaChamberOfCommerceId, nil
	case "imo_no":
		return IdentifierTypeImoNo, nil
	case "vgb_company_number":
		return IdentifierTypeVgbCompanyNumber, nil
	case "yem_coc_registration_number":
		return IdentifierTypeYemCocRegistrationNumber, nil
	case "mys_id_card_no":
		return IdentifierTypeMysIdCardNo, nil
	case "mys_company_reg_no":
		return IdentifierTypeMysCompanyRegNo, nil
	case "pry_ruc_number":
		return IdentifierTypePryRucNumber, nil
	case "pry_cedula_number":
		return IdentifierTypePryCedulaNumber, nil
	case "pry_old_ruc_number":
		return IdentifierTypePryOldRucNumber, nil
	case "rccm_no":
		return IdentifierTypeRccmNo, nil
	case "bra_rg_number":
		return IdentifierTypeBraRgNumber, nil
	case "ninea_no":
		return IdentifierTypeNineaNo, nil
	case "alb_tax_id":
		return IdentifierTypeAlbTaxId, nil
	case "alb_registration_number":
		return IdentifierTypeAlbRegistrationNumber, nil
	case "arg_igj_number":
		return IdentifierTypeArgIgjNumber, nil
	case "arg_dni_number":
		return IdentifierTypeArgDniNumber, nil
	case "arg_cuit_number":
		return IdentifierTypeArgCuitNumber, nil
	case "arg_cuil_number":
		return IdentifierTypeArgCuilNumber, nil
	case "arg_cdi_number":
		return IdentifierTypeArgCdiNumber, nil
	case "bih_mbs_number":
		return IdentifierTypeBihMbsNumber, nil
	case "bih_jib_number":
		return IdentifierTypeBihJibNumber, nil
	case "bih_customs_number":
		return IdentifierTypeBihCustomsNumber, nil
	case "usa_puerto_rico_register_number":
		return IdentifierTypeUsaPuertoRicoRegisterNumber, nil
	case "dji_rcs_number":
		return IdentifierTypeDjiRcsNumber, nil
	case "cri_cedula_number":
		return IdentifierTypeCriCedulaNumber, nil
	case "moz_id_number":
		return IdentifierTypeMozIdNumber, nil
	case "moz_nuit_person":
		return IdentifierTypeMozNuitPerson, nil
	case "moz_nuit_co":
		return IdentifierTypeMozNuitCo, nil
	case "moz_passport":
		return IdentifierTypeMozPassport, nil
	case "moz_dire_no":
		return IdentifierTypeMozDireNo, nil
	case "moz_voter_no":
		return IdentifierTypeMozVoterNo, nil
	case "moz_nuel_no":
		return IdentifierTypeMozNuelNo, nil
	case "irq_voter_id":
		return IdentifierTypeIrqVoterId, nil
	case "jor_voter_card_no":
		return IdentifierTypeJorVoterCardNo, nil
	case "jor_id_no":
		return IdentifierTypeJorIdNo, nil
	case "per_ruc_no":
		return IdentifierTypePerRucNo, nil
	case "ecu_company_id":
		return IdentifierTypeEcuCompanyId, nil
	case "usa_ny_dos_id":
		return IdentifierTypeUsaNyDosId, nil
	case "bfa_rccm_number":
		return IdentifierTypeBfaRccmNumber, nil
	case "fl_prop_folio":
		return IdentifierTypeFlPropFolio, nil
	case "usa_fl_pb_pcn":
		return IdentifierTypeUsaFlPbPcn, nil
	case "qat_qfc_number":
		return IdentifierTypeQatQfcNumber, nil
	case "grc_afm_number":
		return IdentifierTypeGrcAfmNumber, nil
	case "vnm_enterprise_code":
		return IdentifierTypeVnmEnterpriseCode, nil
	case "tha_registration_no":
		return IdentifierTypeThaRegistrationNo, nil
	case "vnm_citizenship_no":
		return IdentifierTypeVnmCitizenshipNo, nil
	case "vnm_person_id_no":
		return IdentifierTypeVnmPersonIdNo, nil
	case "arg_lib_civica_number":
		return IdentifierTypeArgLibCivicaNumber, nil
	case "arg_lib_enrolamiento_number":
		return IdentifierTypeArgLibEnrolamientoNumber, nil
	case "nzl_nzbn":
		return IdentifierTypeNzlNzbn, nil
	case "nzl_co_no":
		return IdentifierTypeNzlCoNo, nil
	case "usa_ofac_sdn_number":
		return IdentifierTypeUsaOfacSdnNumber, nil
	case "swift_bic_code":
		return IdentifierTypeSwiftBicCode, nil
	case "duns_number":
		return IdentifierTypeDunsNumber, nil
	case "bitcoin_address":
		return IdentifierTypeBitcoinAddress, nil
	case "litecoin_address":
		return IdentifierTypeLitecoinAddress, nil
	case "rus_micex_code":
		return IdentifierTypeRusMicexCode, nil
	case "tx_prop_id":
		return IdentifierTypeTxPropId, nil
	case "tx_pacs_id":
		return IdentifierTypeTxPacsId, nil
	case "tx_land_id":
		return IdentifierTypeTxLandId, nil
	case "png_ipa_reg_id":
		return IdentifierTypePngIpaRegId, nil
	case "gtm_nit_number":
		return IdentifierTypeGtmNitNumber, nil
	case "gtm_cui_number":
		return IdentifierTypeGtmCuiNumber, nil
	case "dom_rnc":
		return IdentifierTypeDomRnc, nil
	case "qat_cr_number":
		return IdentifierTypeQatCrNumber, nil
	case "isin":
		return IdentifierTypeIsin, nil
	case "usa_fl_document_no":
		return IdentifierTypeUsaFlDocumentNo, nil
	case "usa_fl_fic_name_reg_no":
		return IdentifierTypeUsaFlFicNameRegNo, nil
	case "bra_servidor_portal":
		return IdentifierTypeBraServidorPortal, nil
	case "bra_codigo_da_unidade_organizacional":
		return IdentifierTypeBraCodigoDaUnidadeOrganizacional, nil
	case "usa_sec_cik_number":
		return IdentifierTypeUsaSecCikNumber, nil
	case "hr_mbs":
		return IdentifierTypeHrMbs, nil
	case "hr_oib":
		return IdentifierTypeHrOib, nil
	case "slv_numero_identificacion_tributaria":
		return IdentifierTypeSlvNumeroIdentificacionTributaria, nil
	case "slv_mcas":
		return IdentifierTypeSlvMcas, nil
	case "aus_company_number":
		return IdentifierTypeAusCompanyNumber, nil
	case "aus_business_number":
		return IdentifierTypeAusBusinessNumber, nil
	case "deu_registernummer":
		return IdentifierTypeDeuRegisternummer, nil
	case "usa_irs_ein":
		return IdentifierTypeUsaIrsEin, nil
	case "hong_kong_case_number":
		return IdentifierTypeHongKongCaseNumber, nil
	case "irn_coc_internal_id":
		return IdentifierTypeIrnCocInternalId, nil
	case "pan_folio_ficha_id":
		return IdentifierTypePanFolioFichaId, nil
	case "pan_cedula_number":
		return IdentifierTypePanCedulaNumber, nil
	case "xxx_cedar_rose_uid":
		return IdentifierTypeXxxCedarRoseUid, nil
	case "xxx_rccm":
		return IdentifierTypeXxxRccm, nil
	case "vnm_dichvuthongtin_internal_id":
		return IdentifierTypeVnmDichvuthongtinInternalId, nil
	case "xxx_intel_internal_id":
		return IdentifierTypeXxxIntelInternalId, nil
	case "usa_washington_state_ubi":
		return IdentifierTypeUsaWashingtonStateUbi, nil
	case "nga_registration_number":
		return IdentifierTypeNgaRegistrationNumber, nil
	case "ng_check_internal_id":
		return IdentifierTypeNgCheckInternalId, nil
	case "nyc_bbl":
		return IdentifierTypeNycBbl, nil
	case "nyc_crfn":
		return IdentifierTypeNycCrfn, nil
	case "tx_corp_file_num":
		return IdentifierTypeTxCorpFileNum, nil
	case "tx_tax_id":
		return IdentifierTypeTxTaxId, nil
	case "usa_ga_business_id":
		return IdentifierTypeUsaGaBusinessId, nil
	case "phl_pse_id":
		return IdentifierTypePhlPseId, nil
	case "phl_sec_id":
		return IdentifierTypePhlSecId, nil
	case "phl_tin":
		return IdentifierTypePhlTin, nil
	case "afg_passport":
		return IdentifierTypeAfgPassport, nil
	case "irn_passport":
		return IdentifierTypeIrnPassport, nil
	case "kwt_passport":
		return IdentifierTypeKwtPassport, nil
	case "lby_passport":
		return IdentifierTypeLbyPassport, nil
	case "pak_passport":
		return IdentifierTypePakPassport, nil
	case "rus_passport":
		return IdentifierTypeRusPassport, nil
	case "tun_passport":
		return IdentifierTypeTunPassport, nil
	case "yem_passport":
		return IdentifierTypeYemPassport, nil
	case "un_sanction_prn":
		return IdentifierTypeUnSanctionPrn, nil
	case "eu_sanction_rn":
		return IdentifierTypeEuSanctionRn, nil
	case "ca_lp_file_num":
		return IdentifierTypeCaLpFileNum, nil
	case "tx_entity_filing_num":
		return IdentifierTypeTxEntityFilingNum, nil
	case "usa_social_security_number":
		return IdentifierTypeUsaSocialSecurityNumber, nil
	case "usa_wy_party_id":
		return IdentifierTypeUsaWyPartyId, nil
	case "usa_wy_filing_id":
		return IdentifierTypeUsaWyFilingId, nil
	case "usa_wy_internal_filing_id":
		return IdentifierTypeUsaWyInternalFilingId, nil
	case "usa_wy_filing_num":
		return IdentifierTypeUsaWyFilingNum, nil
	case "usa_or_regno":
		return IdentifierTypeUsaOrRegno, nil
	case "usa_nv_corpno":
		return IdentifierTypeUsaNvCorpno, nil
	case "usa_nv_bizid":
		return IdentifierTypeUsaNvBizid, nil
	case "prk_internal_trade_id":
		return IdentifierTypePrkInternalTradeId, nil
	case "lso_corpreg_id":
		return IdentifierTypeLsoCorpregId, nil
	case "uzb_tin_number":
		return IdentifierTypeUzbTinNumber, nil
	case "ca_corporate_id_num":
		return IdentifierTypeCaCorporateIdNum, nil
	case "gbr_hm_treasury_sanction_group_id":
		return IdentifierTypeGbrHmTreasurySanctionGroupId, nil
	case "gbr_ipo_trademark_reg_no":
		return IdentifierTypeGbrIpoTrademarkRegNo, nil
	case "usa_ga_control_no":
		return IdentifierTypeUsaGaControlNo, nil
	case "hnd_coc_company_registration_number":
		return IdentifierTypeHndCocCompanyRegistrationNumber, nil
	case "mne_property_uid":
		return IdentifierTypeMnePropertyUid, nil
	case "phl_bnn":
		return IdentifierTypePhlBnn, nil
	case "rou_company_registration_code":
		return IdentifierTypeRouCompanyRegistrationCode, nil
	case "rou_identity_card":
		return IdentifierTypeRouIdentityCard, nil
	case "rou_personal_id_number":
		return IdentifierTypeRouPersonalIdNumber, nil
	case "cub_cod":
		return IdentifierTypeCubCod, nil
	case "fl_prop_folio_dade":
		return IdentifierTypeFlPropFolioDade, nil
	case "per_dni_no":
		return IdentifierTypePerDniNo, nil
	case "per_carne_de_extranjeria":
		return IdentifierTypePerCarneDeExtranjeria, nil
	case "fra_siren":
		return IdentifierTypeFraSiren, nil
	case "fra_siret":
		return IdentifierTypeFraSiret, nil
	case "fra_rna":
		return IdentifierTypeFraRna, nil
	case "fro_reg_num":
		return IdentifierTypeFroRegNum, nil
	case "cze_file_number":
		return IdentifierTypeCzeFileNumber, nil
	case "esp_borme_reg_id":
		return IdentifierTypeEspBormeRegId, nil
	case "mex_tm_no":
		return IdentifierTypeMexTmNo, nil
	case "mus_file_no":
		return IdentifierTypeMusFileNo, nil
	case "col_nit_no":
		return IdentifierTypeColNitNo, nil
	case "jpn_corporate_no":
		return IdentifierTypeJpnCorporateNo, nil
	case "usa_cgac_agency_code":
		return IdentifierTypeUsaCgacAgencyCode, nil
	case "usa_govt_agency_id":
		return IdentifierTypeUsaGovtAgencyId, nil
	case "usa_govt_office_id":
		return IdentifierTypeUsaGovtOfficeId, nil
	case "col_cedula_no":
		return IdentifierTypeColCedulaNo, nil
	case "col_secop_no":
		return IdentifierTypeColSecopNo, nil
	case "jordan_company_no":
		return IdentifierTypeJordanCompanyNo, nil
	case "dnk_cvr":
		return IdentifierTypeDnkCvr, nil
	case "dnk_production_unit_no":
		return IdentifierTypeDnkProductionUnitNo, nil
	case "dnk_entity":
		return IdentifierTypeDnkEntity, nil
	case "nor_org_no":
		return IdentifierTypeNorOrgNo, nil
	case "swe_org_no":
		return IdentifierTypeSweOrgNo, nil
	case "usa_co_reg_no":
		return IdentifierTypeUsaCoRegNo, nil
	case "usa_ia_corp_no":
		return IdentifierTypeUsaIaCorpNo, nil
	case "sgp_unqiue_entity_number":
		return IdentifierTypeSgpUnqiueEntityNumber, nil
	case "usa_ak_entity_no":
		return IdentifierTypeUsaAkEntityNo, nil
	case "usa_oh_charter_num":
		return IdentifierTypeUsaOhCharterNum, nil
	case "tur_istanbul_coc_reg_no":
		return IdentifierTypeTurIstanbulCocRegNo, nil
	case "tur_mersis_number":
		return IdentifierTypeTurMersisNumber, nil
	case "che_ch_id_number":
		return IdentifierTypeCheChIdNumber, nil
	case "are_difc_reg_no":
		return IdentifierTypeAreDifcRegNo, nil
	case "idn_tax_id":
		return IdentifierTypeIdnTaxId, nil
	case "usa_vt_biz_id":
		return IdentifierTypeUsaVtBizId, nil
	case "usa_wv_reg_id":
		return IdentifierTypeUsaWvRegId, nil
	case "usa_ms_biz_id":
		return IdentifierTypeUsaMsBizId, nil
	case "usa_id_control_no":
		return IdentifierTypeUsaIdControlNo, nil
	case "usa_id_party_id":
		return IdentifierTypeUsaIdPartyId, nil
	case "irn_coc_internal_id_cardno":
		return IdentifierTypeIrnCocInternalIdCardno, nil
	case "usa_az_corp_reg_entity_num":
		return IdentifierTypeUsaAzCorpRegEntityNum, nil
	case "usa_ok_filing_no":
		return IdentifierTypeUsaOkFilingNo, nil
	case "usa_tn_control_no":
		return IdentifierTypeUsaTnControlNo, nil
	case "usa_tn_party_id":
		return IdentifierTypeUsaTnPartyId, nil
	case "usa_ks_biz_id":
		return IdentifierTypeUsaKsBizId, nil
	case "usa_hi_corporate_registry_id":
		return IdentifierTypeUsaHiCorporateRegistryId, nil
	case "usa_hi_corporate_registry_person_id":
		return IdentifierTypeUsaHiCorporateRegistryPersonId, nil
	case "pol_krs_number":
		return IdentifierTypePolKrsNumber, nil
	case "pol_regon_number":
		return IdentifierTypePolRegonNumber, nil
	case "pol_nip_number":
		return IdentifierTypePolNipNumber, nil
	case "pol_rejestr_person_id":
		return IdentifierTypePolRejestrPersonId, nil
	case "arm_vat_no":
		return IdentifierTypeArmVatNo, nil
	case "arm_enterprise_code":
		return IdentifierTypeArmEnterpriseCode, nil
	case "arm_registration_no":
		return IdentifierTypeArmRegistrationNo, nil
	case "usa_me_corp_id":
		return IdentifierTypeUsaMeCorpId, nil
	case "cyp_reg_no":
		return IdentifierTypeCypRegNo, nil
	case "usa_nd_control_id":
		return IdentifierTypeUsaNdControlId, nil
	case "usa_mi_corp_id":
		return IdentifierTypeUsaMiCorpId, nil
	case "usa_mi_corp_id_old":
		return IdentifierTypeUsaMiCorpIdOld, nil
	case "usa_hi_trade_name_cert":
		return IdentifierTypeUsaHiTradeNameCert, nil
	case "usa_dc_entity_no":
		return IdentifierTypeUsaDcEntityNo, nil
	case "usa_va_old_reg_id":
		return IdentifierTypeUsaVaOldRegId, nil
	case "usa_consolidated_screening_list_synthetic_id":
		return IdentifierTypeUsaConsolidatedScreeningListSyntheticId, nil
	case "usa_ar_filing_no":
		return IdentifierTypeUsaArFilingNo, nil
	case "usa_nc_internal_id":
		return IdentifierTypeUsaNcInternalId, nil
	case "usa_ne_acct_no":
		return IdentifierTypeUsaNeAcctNo, nil
	case "usa_ne_agent_id":
		return IdentifierTypeUsaNeAgentId, nil
	case "usa_nm_business_no":
		return IdentifierTypeUsaNmBusinessNo, nil
	case "usa_nm_license_id":
		return IdentifierTypeUsaNmLicenseId, nil
	case "usa_dc_file_no":
		return IdentifierTypeUsaDcFileNo, nil
	case "usa_ri_fei_no":
		return IdentifierTypeUsaRiFeiNo, nil
	case "internal_md5":
		return IdentifierTypeInternalMd5, nil
	case "usa_mo_corp_id":
		return IdentifierTypeUsaMoCorpId, nil
	case "usa_wi_dfi_id":
		return IdentifierTypeUsaWiDfiId, nil
	case "geo_identification_code":
		return IdentifierTypeGeoIdentificationCode, nil
	case "geo_personal_number":
		return IdentifierTypeGeoPersonalNumber, nil
	case "geo_state_registration_number":
		return IdentifierTypeGeoStateRegistrationNumber, nil
	case "mac_raem_case_url_id":
		return IdentifierTypeMacRaemCaseUrlId, nil
	case "rou_company_tin":
		return IdentifierTypeRouCompanyTin, nil
	case "usa_md_dpt_tax":
		return IdentifierTypeUsaMdDptTax, nil
	case "usa_sd_corp_id":
		return IdentifierTypeUsaSdCorpId, nil
	case "hnd_tegucigalpa_matricula":
		return IdentifierTypeHndTegucigalpaMatricula, nil
	case "usa_fl_property_id":
		return IdentifierTypeUsaFlPropertyId, nil
	case "usa_fl_property_mp_id":
		return IdentifierTypeUsaFlPropertyMpId, nil
	case "usa_fl_property_state_par_id":
		return IdentifierTypeUsaFlPropertyStateParId, nil
	case "mex_cluni":
		return IdentifierTypeMexCluni, nil
	case "usa_pa_corporate_registry_id":
		return IdentifierTypeUsaPaCorporateRegistryId, nil
	case "pak_ind_ntn":
		return IdentifierTypePakIndNtn, nil
	case "pak_co_ntn":
		return IdentifierTypePakCoNtn, nil
	case "mex_rnie":
		return IdentifierTypeMexRnie, nil
	case "pak_ngo_reg_no":
		return IdentifierTypePakNgoRegNo, nil
	case "iraqi_stock_exchange_symbol":
		return IdentifierTypeIraqiStockExchangeSymbol, nil
	case "bgr_uic":
		return IdentifierTypeBgrUic, nil
	case "bgr_egn_hashed":
		return IdentifierTypeBgrEgnHashed, nil
	case "south_africa_enterprise_number":
		return IdentifierTypeSouthAfricaEnterpriseNumber, nil
	case "south_africa_passport_number":
		return IdentifierTypeSouthAfricaPassportNumber, nil
	case "nld_kvk_number":
		return IdentifierTypeNldKvkNumber, nil
	case "nld_kvk_branch_number":
		return IdentifierTypeNldKvkBranchNumber, nil
	case "usa_central_registration_depository_number":
		return IdentifierTypeUsaCentralRegistrationDepositoryNumber, nil
	case "usa_sec_file_number_bd":
		return IdentifierTypeUsaSecFileNumberBd, nil
	case "chn_cnipa_tm":
		return IdentifierTypeChnCnipaTm, nil
	case "cyp_passport":
		return IdentifierTypeCypPassport, nil
	case "cyp_infocredit_entity_id":
		return IdentifierTypeCypInfocreditEntityId, nil
	case "cyp_id_card":
		return IdentifierTypeCypIdCard, nil
	case "cyp_ssn":
		return IdentifierTypeCypSsn, nil
	case "aut_firmenbuch_no":
		return IdentifierTypeAutFirmenbuchNo, nil
	case "swe_per_id_no":
		return IdentifierTypeSwePerIdNo, nil
	case "chn_shanghai_stock_exchange_company_code":
		return IdentifierTypeChnShanghaiStockExchangeCompanyCode, nil
	case "usa_sec_file_number_ia":
		return IdentifierTypeUsaSecFileNumberIa, nil
	case "chn_shenzen_sec_code":
		return IdentifierTypeChnShenzenSecCode, nil
	case "usa_ct_business_id":
		return IdentifierTypeUsaCtBusinessId, nil
	case "ecu_cedula_number":
		return IdentifierTypeEcuCedulaNumber, nil
	case "hkg_stock_code":
		return IdentifierTypeHkgStockCode, nil
	case "can_bc_company_registration_id":
		return IdentifierTypeCanBcCompanyRegistrationId, nil
	case "can_bc_extraprovincial_registration_id":
		return IdentifierTypeCanBcExtraprovincialRegistrationId, nil
	case "can_ipo_trademark_application_no":
		return IdentifierTypeCanIpoTrademarkApplicationNo, nil
	case "ltu_company_registration_code":
		return IdentifierTypeLtuCompanyRegistrationCode, nil
	case "usa_sec_private_fund":
		return IdentifierTypeUsaSecPrivateFund, nil
	case "lva_insolvency_proceeding_id":
		return IdentifierTypeLvaInsolvencyProceedingId, nil
	case "chn_cninfo_internal_shareholder_id":
		return IdentifierTypeChnCninfoInternalShareholderId, nil
	case "euid":
		return IdentifierTypeEuid, nil
	case "fin_business_id":
		return IdentifierTypeFinBusinessId, nil
	case "est_business_reg_code":
		return IdentifierTypeEstBusinessRegCode, nil
	case "usa_cusip_number":
		return IdentifierTypeUsaCusipNumber, nil
	case "svn_co_reg_no":
		return IdentifierTypeSvnCoRegNo, nil
	case "isr_company_number":
		return IdentifierTypeIsrCompanyNumber, nil
	case "isr_association_number":
		return IdentifierTypeIsrAssociationNumber, nil
	case "isr_pbc_number":
		return IdentifierTypeIsrPbcNumber, nil
	case "rks_business_number":
		return IdentifierTypeRksBusinessNumber, nil
	case "rks_fiscal_number":
		return IdentifierTypeRksFiscalNumber, nil
	case "jpn_edinet_code":
		return IdentifierTypeJpnEdinetCode, nil
	case "bel_enterprise_number":
		return IdentifierTypeBelEnterpriseNumber, nil
	case "bel_establishment_number":
		return IdentifierTypeBelEstablishmentNumber, nil
	case "aus_afs_licence_number":
		return IdentifierTypeAusAfsLicenceNumber, nil
	case "aus_afs_rep_number":
		return IdentifierTypeAusAfsRepNumber, nil
	case "aus_adv_number":
		return IdentifierTypeAusAdvNumber, nil
	case "aus_credit_licence_number":
		return IdentifierTypeAusCreditLicenceNumber, nil
	case "aus_credit_rep_number":
		return IdentifierTypeAusCreditRepNumber, nil
	case "dart_cik":
		return IdentifierTypeDartCik, nil
	case "krx_ticker_code":
		return IdentifierTypeKrxTickerCode, nil
	case "kor_corporate_registration_number":
		return IdentifierTypeKorCorporateRegistrationNumber, nil
	case "kor_business_tin":
		return IdentifierTypeKorBusinessTin, nil
	case "est_personal_id":
		return IdentifierTypeEstPersonalId, nil
	case "bze_bicar_reg_no":
		return IdentifierTypeBzeBicarRegNo, nil
	case "usa_il_chicago_account_number":
		return IdentifierTypeUsaIlChicagoAccountNumber, nil
	case "cym_co_no":
		return IdentifierTypeCymCoNo, nil
	case "ggy_corporate_reg_number":
		return IdentifierTypeGgyCorporateRegNumber, nil
	case "ggy_trademark_submission_ref":
		return IdentifierTypeGgyTrademarkSubmissionRef, nil
	case "ggy_trademark_no":
		return IdentifierTypeGgyTrademarkNo, nil
	case "jey_corporate_reg_number":
		return IdentifierTypeJeyCorporateRegNumber, nil
	case "cok_corp_reg_corpid":
		return IdentifierTypeCokCorpRegCorpid, nil
	case "cok_corp_reg_corpofficerid":
		return IdentifierTypeCokCorpRegCorpofficerid, nil
	case "cok_corp_reg_number":
		return IdentifierTypeCokCorpRegNumber, nil
	case "mex_open_contracts_internal_id":
		return IdentifierTypeMexOpenContractsInternalId, nil
	case "gib_corp_reg_number":
		return IdentifierTypeGibCorpRegNumber, nil
	case "dom_onapi_num":
		return IdentifierTypeDomOnapiNum, nil
	case "rus_tourist_obj":
		return IdentifierTypeRusTouristObj, nil
	case "bill_of_lading":
		return IdentifierTypeBillOfLading, nil
	case "twn_factory_registration_number":
		return IdentifierTypeTwnFactoryRegistrationNumber, nil
	case "twn_factory_establishment_permit_case_number":
		return IdentifierTypeTwnFactoryEstablishmentPermitCaseNumber, nil
	case "ken_personal_id":
		return IdentifierTypeKenPersonalId, nil
	case "col_dian_numero_formulario":
		return IdentifierTypeColDianNumeroFormulario, nil
	case "vut_corp_reg_number":
		return IdentifierTypeVutCorpRegNumber, nil
	case "geo_legal_code":
		return IdentifierTypeGeoLegalCode, nil
	case "mmr_corp_id":
		return IdentifierTypeMmrCorpId, nil
	case "mmr_reg_no":
		return IdentifierTypeMmrRegNo, nil
	case "mmr_prior_reg_no":
		return IdentifierTypeMmrPriorRegNo, nil
	case "mmr_officer_id":
		return IdentifierTypeMmrOfficerId, nil
	case "arm_passport_number":
		return IdentifierTypeArmPassportNumber, nil
	case "ukr_reg_num":
		return IdentifierTypeUkrRegNum, nil
	case "validatis_number":
		return IdentifierTypeValidatisNumber, nil
	case "are_dubai_land_case_no":
		return IdentifierTypeAreDubaiLandCaseNo, nil
	case "ago_matricula_number":
		return IdentifierTypeAgoMatriculaNumber, nil
	case "ago_nif_number":
		return IdentifierTypeAgoNifNumber, nil
	case "mmr_personal_id_no":
		return IdentifierTypeMmrPersonalIdNo, nil
	case "blr_registration_number":
		return IdentifierTypeBlrRegistrationNumber, nil
	case "aer_free_zone_license":
		return IdentifierTypeAerFreeZoneLicense, nil
	case "aer_free_zone_reg_no":
		return IdentifierTypeAerFreeZoneRegNo, nil
	case "can_nl_corporate_registry":
		return IdentifierTypeCanNlCorporateRegistry, nil
	case "can_data_axle_hash":
		return IdentifierTypeCanDataAxleHash, nil
	case "svn_ajpes_zapst_number":
		return IdentifierTypeSvnAjpesZapstNumber, nil
	case "usa_corpwatch_id":
		return IdentifierTypeUsaCorpwatchId, nil
	case "usa_de_file_number":
		return IdentifierTypeUsaDeFileNumber, nil
	case "imn_company_number":
		return IdentifierTypeImnCompanyNumber, nil
	case "svn_vat_number":
		return IdentifierTypeSvnVatNumber, nil
	case "xxx_acuris_id":
		return IdentifierTypeXxxAcurisId, nil
	case "pak_egm_id":
		return IdentifierTypePakEgmId, nil
	case "usa_de_registered_agent_id":
		return IdentifierTypeUsaDeRegisteredAgentId, nil
	case "icij_offshore_internal_id":
		return IdentifierTypeIcijOffshoreInternalId, nil
	case "icij_offshore_node_id":
		return IdentifierTypeIcijOffshoreNodeId, nil
	case "ecu_branch_id":
		return IdentifierTypeEcuBranchId, nil
	case "pse_registration_id":
		return IdentifierTypePseRegistrationId, nil
	case "srb_mb_number":
		return IdentifierTypeSrbMbNumber, nil
	case "srb_pib_number":
		return IdentifierTypeSrbPibNumber, nil
	case "srb_branch_id":
		return IdentifierTypeSrbBranchId, nil
	case "rus_bik_code":
		return IdentifierTypeRusBikCode, nil
	case "panadata_internal_id":
		return IdentifierTypePanadataInternalId, nil
	case "smr_economic_operator_code":
		return IdentifierTypeSmrEconomicOperatorCode, nil
	case "usa_ct_internal_id":
		return IdentifierTypeUsaCtInternalId, nil
	case "alei":
		return IdentifierTypeAlei, nil
	case "can_ns_corporate_registry":
		return IdentifierTypeCanNsCorporateRegistry, nil
	case "som_ubi":
		return IdentifierTypeSomUbi, nil
	case "bhs_tin":
		return IdentifierTypeBhsTin, nil
	case "ita_rea_number":
		return IdentifierTypeItaReaNumber, nil
	case "mex_denue_clee":
		return IdentifierTypeMexDenueClee, nil
	case "ihs_owner_code":
		return IdentifierTypeIhsOwnerCode, nil
	case "aus_consolidated_sanctions_reference":
		return IdentifierTypeAusConsolidatedSanctionsReference, nil
	case "che_seco_sanction_number":
		return IdentifierTypeCheSecoSanctionNumber, nil
	case "gbr_vat_no":
		return IdentifierTypeGbrVatNo, nil
	case "gbr_company_number":
		return IdentifierTypeGbrCompanyNumber, nil
	case "esp_nif":
		return IdentifierTypeEspNif, nil
	case "usa_sam_uei_number":
		return IdentifierTypeUsaSamUeiNumber, nil
	case "usa_usvi_corp_number":
		return IdentifierTypeUsaUsviCorpNumber, nil
	case "nic_trade_internal_shipment_id":
		return IdentifierTypeNicTradeInternalShipmentId, nil
	case "nic_ruc_number":
		return IdentifierTypeNicRucNumber, nil
	case "nic_numero_unico":
		return IdentifierTypeNicNumeroUnico, nil
	case "cri_cedula_juridica":
		return IdentifierTypeCriCedulaJuridica, nil
	case "cri_cedula_citizen_person":
		return IdentifierTypeCriCedulaCitizenPerson, nil
	case "cri_cedula_foreign_person":
		return IdentifierTypeCriCedulaForeignPerson, nil
	case "bol_matricula":
		return IdentifierTypeBolMatricula, nil
	case "bol_old_matricula":
		return IdentifierTypeBolOldMatricula, nil
	case "nga_crp_reg_internal_id":
		return IdentifierTypeNgaCrpRegInternalId, nil
	case "nga_registration_sn":
		return IdentifierTypeNgaRegistrationSn, nil
	case "nga_nin":
		return IdentifierTypeNgaNin, nil
	case "nga_drivers":
		return IdentifierTypeNgaDrivers, nil
	case "nga_tax_id":
		return IdentifierTypeNgaTaxId, nil
	case "dma_business_registry_internal_id":
		return IdentifierTypeDmaBusinessRegistryInternalId, nil
	case "cage":
		return IdentifierTypeCage, nil
	case "atg_business_registry_internal_id":
		return IdentifierTypeAtgBusinessRegistryInternalId, nil
	case "lca_business_registry_internal_id":
		return IdentifierTypeLcaBusinessRegistryInternalId, nil
	case "prt_trust_number":
		return IdentifierTypePrtTrustNumber, nil
	case "prt_vat_number":
		return IdentifierTypePrtVatNumber, nil
	case "mar_passport":
		return IdentifierTypeMarPassport, nil
	case "cod_passport":
		return IdentifierTypeCodPassport, nil
	case "prk_passport":
		return IdentifierTypePrkPassport, nil
	case "sgp_passport":
		return IdentifierTypeSgpPassport, nil
	case "chn_passport":
		return IdentifierTypeChnPassport, nil
	case "omn_passport":
		return IdentifierTypeOmnPassport, nil
	case "caf_passport":
		return IdentifierTypeCafPassport, nil
	case "ssd_passport":
		return IdentifierTypeSsdPassport, nil
	case "tto_biz_number":
		return IdentifierTypeTtoBizNumber, nil
	case "tur_tax_id":
		return IdentifierTypeTurTaxId, nil
	case "bmu_registrar_of_companies_number":
		return IdentifierTypeBmuRegistrarOfCompaniesNumber, nil
	case "cod_rccm_number":
		return IdentifierTypeCodRccmNumber, nil
	case "cod_rccm_ohada_number":
		return IdentifierTypeCodRccmOhadaNumber, nil
	case "are_reg_auth_number":
		return IdentifierTypeAreRegAuthNumber, nil
	case "prk_shipment_id":
		return IdentifierTypePrkShipmentId, nil
	case "ecu_importer_id":
		return IdentifierTypeEcuImporterId, nil
	case "ecu_exporter_id":
		return IdentifierTypeEcuExporterId, nil
	case "ecu_shipment_ref_no":
		return IdentifierTypeEcuShipmentRefNo, nil
	case "xxx_crb_monitor_entity_id":
		return IdentifierTypeXxxCrbMonitorEntityId, nil
	case "xxx_edi_global_issuer_id":
		return IdentifierTypeXxxEdiGlobalIssuerId, nil
	case "xxx_edi_global_security_id":
		return IdentifierTypeXxxEdiGlobalSecurityId, nil
	case "chl_import_export_control_id":
		return IdentifierTypeChlImportExportControlId, nil
	case "chl_import_manifest_number":
		return IdentifierTypeChlImportManifestNumber, nil
	case "chl_importer_exporter_id":
		return IdentifierTypeChlImporterExporterId, nil
	case "arg_import_export_id":
		return IdentifierTypeArgImportExportId, nil
	case "arg_partial_cuit":
		return IdentifierTypeArgPartialCuit, nil
	case "pan_importer_exporter_id":
		return IdentifierTypePanImporterExporterId, nil
	case "pan_declaration_number":
		return IdentifierTypePanDeclarationNumber, nil
	case "mex_shipment_number":
		return IdentifierTypeMexShipmentNumber, nil
	case "cri_exp":
		return IdentifierTypeCriExp, nil
	case "cri_imp":
		return IdentifierTypeCriImp, nil
	case "cri_op_no":
		return IdentifierTypeCriOpNo, nil
	case "col_nur":
		return IdentifierTypeColNur, nil
	case "npl_co_reg_no":
		return IdentifierTypeNplCoRegNo, nil
	case "usa_sam_exclusions_number":
		return IdentifierTypeUsaSamExclusionsNumber, nil
	case "usa_npi_number":
		return IdentifierTypeUsaNpiNumber, nil
	case "usa_upin_number":
		return IdentifierTypeUsaUpinNumber, nil
	case "can_bc_registration_number":
		return IdentifierTypeCanBcRegistrationNumber, nil
	case "can_business_number":
		return IdentifierTypeCanBusinessNumber, nil
	case "chn_csrc_no":
		return IdentifierTypeChnCsrcNo, nil
	case "usa_mn_master_id":
		return IdentifierTypeUsaMnMasterId, nil
	case "usa_mn_filing_number":
		return IdentifierTypeUsaMnFilingNumber, nil
	case "usa_in_biz_no":
		return IdentifierTypeUsaInBizNo, nil
	case "lloyds_internal_vessel_id":
		return IdentifierTypeLloydsInternalVesselId, nil
	case "lloyds_internal_entity_id":
		return IdentifierTypeLloydsInternalEntityId, nil
	case "usa_nh_business_id":
		return IdentifierTypeUsaNhBusinessId, nil
	case "gbr_uk_sanctions_id":
		return IdentifierTypeGbrUkSanctionsId, nil
	case "montana_sos_internal_entity_id":
		return IdentifierTypeMontanaSosInternalEntityId, nil
	case "usa_mass_sos_company_id":
		return IdentifierTypeUsaMassSosCompanyId, nil
	case "chn_resident_id_number":
		return IdentifierTypeChnResidentIdNumber, nil
	case "usa_nj_business_id":
		return IdentifierTypeUsaNjBusinessId, nil
	case "utah_corporate_registry_internal_entity_number":
		return IdentifierTypeUtahCorporateRegistryInternalEntityNumber, nil
	case "usa_la_sos_id":
		return IdentifierTypeUsaLaSosId, nil
	case "usa_al_sos_id":
		return IdentifierTypeUsaAlSosId, nil
	case "usa_sc_corp_id":
		return IdentifierTypeUsaScCorpId, nil
	case "usa_ky_org_no":
		return IdentifierTypeUsaKyOrgNo, nil
	case "usa_il_file_number":
		return IdentifierTypeUsaIlFileNumber, nil
	case "idn_transaction_number":
		return IdentifierTypeIdnTransactionNumber, nil
	case "idn_ubo_owner_id":
		return IdentifierTypeIdnUboOwnerId, nil
	case "swe_tax_number":
		return IdentifierTypeSweTaxNumber, nil
	case "panadata_internal_sid":
		return IdentifierTypePanadataInternalSid, nil
	case "pry_tax_id":
		return IdentifierTypePryTaxId, nil
	case "pry_shipment_number":
		return IdentifierTypePryShipmentNumber, nil
	case "tokyo_stock_exchange_no":
		return IdentifierTypeTokyoStockExchangeNo, nil
	case "swe_fi_id":
		return IdentifierTypeSweFiId, nil
	case "deu_bafin_id":
		return IdentifierTypeDeuBafinId, nil
	case "global_trade_internal_shipment_id":
		return IdentifierTypeGlobalTradeInternalShipmentId, nil
	case "china_vessel_inspection_registration":
		return IdentifierTypeChinaVesselInspectionRegistration, nil
	case "china_vessel_registration":
		return IdentifierTypeChinaVesselRegistration, nil
	case "ccs_registration":
		return IdentifierTypeCcsRegistration, nil
	case "usa_oti_id":
		return IdentifierTypeUsaOtiId, nil
	case "stock_ticker":
		return IdentifierTypeStockTicker, nil
	case "can_mb_registry":
		return IdentifierTypeCanMbRegistry, nil
	case "quebec_enterprise_number":
		return IdentifierTypeQuebecEnterpriseNumber, nil
	case "ontario_corporation_number":
		return IdentifierTypeOntarioCorporationNumber, nil
	case "saskatchewan_registry_number":
		return IdentifierTypeSaskatchewanRegistryNumber, nil
	case "alberta_corporation_number":
		return IdentifierTypeAlbertaCorporationNumber, nil
	case "bra_shipment_number":
		return IdentifierTypeBraShipmentNumber, nil
	case "ukr_sanctions_nazk_company_internal_id":
		return IdentifierTypeUkrSanctionsNazkCompanyInternalId, nil
	case "ukr_sanctions_nazk_person_internal_id":
		return IdentifierTypeUkrSanctionsNazkPersonInternalId, nil
	case "ethereum_address":
		return IdentifierTypeEthereumAddress, nil
	case "dash_address":
		return IdentifierTypeDashAddress, nil
	case "zcash_address":
		return IdentifierTypeZcashAddress, nil
	case "usa_uspto_serial_number":
		return IdentifierTypeUsaUsptoSerialNumber, nil
	case "usa_uspto_reg_no":
		return IdentifierTypeUsaUsptoRegNo, nil
	case "usa_uspto_foreign_application_no":
		return IdentifierTypeUsaUsptoForeignApplicationNo, nil
	case "usa_uspto_foreign_reg_no":
		return IdentifierTypeUsaUsptoForeignRegNo, nil
	case "wipo_intl_reg_no":
		return IdentifierTypeWipoIntlRegNo, nil
	case "wipo_intl_ref_no":
		return IdentifierTypeWipoIntlRefNo, nil
	case "gbr_charity_no":
		return IdentifierTypeGbrCharityNo, nil
	case "gbr_trustee_id":
		return IdentifierTypeGbrTrusteeId, nil
	case "gbr_go_no":
		return IdentifierTypeGbrGoNo, nil
	case "irl_registration_no":
		return IdentifierTypeIrlRegistrationNo, nil
	case "irl_rcn":
		return IdentifierTypeIrlRcn, nil
	case "blz_bccar_reg_no":
		return IdentifierTypeBlzBccarRegNo, nil
	case "chn_customs_registration_no":
		return IdentifierTypeChnCustomsRegistrationNo, nil
	case "isl_vat_num":
		return IdentifierTypeIslVatNum, nil
	case "can_tm_registration_no":
		return IdentifierTypeCanTmRegistrationNo, nil
	case "aze_tin_number":
		return IdentifierTypeAzeTinNumber, nil
	case "tjk_tin_number":
		return IdentifierTypeTjkTinNumber, nil
	case "tjk_ein_number":
		return IdentifierTypeTjkEinNumber, nil
	case "mco_rci_number":
		return IdentifierTypeMcoRciNumber, nil
	case "mco_nis":
		return IdentifierTypeMcoNis, nil
	case "on_business_id_number":
		return IdentifierTypeOnBusinessIdNumber, nil
	case "syria_commercial_register_number":
		return IdentifierTypeSyriaCommercialRegisterNumber, nil
	case "cn_hurd_internal_company_id":
		return IdentifierTypeCnHurdInternalCompanyId, nil
	case "hun_tax_number":
		return IdentifierTypeHunTaxNumber, nil
	case "hun_krs_number":
		return IdentifierTypeHunKrsNumber, nil
	case "hun_company_register_number":
		return IdentifierTypeHunCompanyRegisterNumber, nil
	case "hun_person_tax_id":
		return IdentifierTypeHunPersonTaxId, nil
	case "mw_tpin_tax_reg_num":
		return IdentifierTypeMwTpinTaxRegNum, nil
	case "lr_tin":
		return IdentifierTypeLrTin, nil
	case "cm_nui_tax_reg_num":
		return IdentifierTypeCmNuiTaxRegNum, nil
	case "eu_fsd_id":
		return IdentifierTypeEuFsdId, nil
	case "cn_hk_br_number":
		return IdentifierTypeCnHkBrNumber, nil
	case "bwa_uin_reg_number":
		return IdentifierTypeBwaUinRegNumber, nil
	case "can_nrd":
		return IdentifierTypeCanNrd, nil
	case "usa_irs_giin":
		return IdentifierTypeUsaIrsGiin, nil
	case "can_nrd_individual_id":
		return IdentifierTypeCanNrdIndividualId, nil
	case "jam_company_id":
		return IdentifierTypeJamCompanyId, nil
	case "esp_internal_employee_number":
		return IdentifierTypeEspInternalEmployeeNumber, nil
	case "nzl_russia_sanctions_uid":
		return IdentifierTypeNzlRussiaSanctionsUid, nil
	case "can_new_brunswick_reference_number":
		return IdentifierTypeCanNewBrunswickReferenceNumber, nil
	case "fra_asset_freeze_id":
		return IdentifierTypeFraAssetFreezeId, nil
	case "srb_beneficial_owner_id":
		return IdentifierTypeSrbBeneficialOwnerId, nil
	case "can_pe_registration_number":
		return IdentifierTypeCanPeRegistrationNumber, nil
	case "bel_fsma_name_hash":
		return IdentifierTypeBelFsmaNameHash, nil
	case "cuw_reg_number":
		return IdentifierTypeCuwRegNumber, nil
	case "rus_declaration_number":
		return IdentifierTypeRusDeclarationNumber, nil
	case "ru_trade_internal_shipment_id":
		return IdentifierTypeRuTradeInternalShipmentId, nil
	case "tur_shipment_id":
		return IdentifierTypeTurShipmentId, nil
	case "bd_bin":
		return IdentifierTypeBdBin, nil
	case "aer_ner_number":
		return IdentifierTypeAerNerNumber, nil
	case "twn_passport_number":
		return IdentifierTypeTwnPassportNumber, nil
	case "bel_national_register_no":
		return IdentifierTypeBelNationalRegisterNo, nil
	case "afg_trade_internal_shipment_id":
		return IdentifierTypeAfgTradeInternalShipmentId, nil
	case "ukr_fiu_list_number":
		return IdentifierTypeUkrFiuListNumber, nil
	case "esp_be_code":
		return IdentifierTypeEspBeCode, nil
	case "esp_tr_number":
		return IdentifierTypeEspTrNumber, nil
	case "jey_trademark_reg_no":
		return IdentifierTypeJeyTrademarkRegNo, nil
	case "gbr_enforcement_action_num":
		return IdentifierTypeGbrEnforcementActionNum, nil
	case "tza_brela_reg_num":
		return IdentifierTypeTzaBrelaRegNum, nil
	case "ind_nse_ticker_code":
		return IdentifierTypeIndNseTickerCode, nil
	case "usa_fl_sl_pid":
		return IdentifierTypeUsaFlSlPid, nil
	case "can_qc_sap_registry_ref_num":
		return IdentifierTypeCanQcSapRegistryRefNum, nil
	}
	var t IdentifierType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (i IdentifierType) Ptr() *IdentifierType {
	return &i
}

// Language enums are normalized representations of languages. [Source](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).
type Language string

const (
	// Afar
	LanguageAa Language = "aa"
	// Abkhazian
	LanguageAb Language = "ab"
	// Afrikaans
	LanguageAf Language = "af"
	// Akan
	LanguageAk Language = "ak"
	// Albanian
	LanguageSq Language = "sq"
	// Amharic
	LanguageAm Language = "am"
	// Arabic
	LanguageAr Language = "ar"
	// Aragonese
	LanguageAn Language = "an"
	// Armenian
	LanguageHy Language = "hy"
	// Assamese
	LanguageAs Language = "as"
	// Avaric
	LanguageAv Language = "av"
	// Avestan
	LanguageAe Language = "ae"
	// Aymara
	LanguageAy Language = "ay"
	// Azerbaijani
	LanguageAz Language = "az"
	// Bashkir
	LanguageBa Language = "ba"
	// Bambara
	LanguageBm Language = "bm"
	// Basque
	LanguageEu Language = "eu"
	// Belarusian
	LanguageBe Language = "be"
	// Bengali
	LanguageBn Language = "bn"
	// Bihari languages
	LanguageBh Language = "bh"
	// Bislama
	LanguageBi Language = "bi"
	// Bosnian
	LanguageBs Language = "bs"
	// Breton
	LanguageBr Language = "br"
	// Bulgarian
	LanguageBg Language = "bg"
	// Burmese
	LanguageMy Language = "my"
	// Catalan; Valencian
	LanguageCa Language = "ca"
	// Chamorro
	LanguageCh Language = "ch"
	// Chechen
	LanguageCe Language = "ce"
	// Chinese
	LanguageZh Language = "zh"
	// Church Slavic; Old Slavonic; Church Slavonic; Old Bulgarian; Old Church Slavonic
	LanguageCu Language = "cu"
	// Chuvash
	LanguageCv Language = "cv"
	// Cornish
	LanguageKw Language = "kw"
	// Corsican
	LanguageCo Language = "co"
	// Cree
	LanguageCr Language = "cr"
	// Czech
	LanguageCs Language = "cs"
	// Danish
	LanguageDa Language = "da"
	// Divehi; Dhivehi; Maldivian
	LanguageDv Language = "dv"
	// Dutch; Flemish
	LanguageNl Language = "nl"
	// Dzongkha
	LanguageDz Language = "dz"
	// English
	LanguageEn Language = "en"
	// Esperanto
	LanguageEo Language = "eo"
	// Estonian
	LanguageEt Language = "et"
	// Ewe
	LanguageEe Language = "ee"
	// Faroese
	LanguageFo Language = "fo"
	// Fijian
	LanguageFj Language = "fj"
	// Finnish
	LanguageFi Language = "fi"
	// French
	LanguageFr Language = "fr"
	// Western Frisian
	LanguageFy Language = "fy"
	// Fulah
	LanguageFf Language = "ff"
	// Georgian
	LanguageKa Language = "ka"
	// German
	LanguageDe Language = "de"
	// Gaelic; Scottish Gaelic
	LanguageGd Language = "gd"
	// Irish
	LanguageGa Language = "ga"
	// Galician
	LanguageGl Language = "gl"
	// Manx
	LanguageGv Language = "gv"
	// Greek, Modern (1453-)
	LanguageEl Language = "el"
	// Guarani
	LanguageGn Language = "gn"
	// Gujarati
	LanguageGu Language = "gu"
	// Haitian; Haitian Creole
	LanguageHt Language = "ht"
	// Hausa
	LanguageHa Language = "ha"
	// Hebrew
	LanguageHe Language = "he"
	// Herero
	LanguageHz Language = "hz"
	// Hindi
	LanguageHi Language = "hi"
	// Hiri Motu
	LanguageHo Language = "ho"
	// Croatian
	LanguageHr Language = "hr"
	// Hungarian
	LanguageHu Language = "hu"
	// Igbo
	LanguageIg Language = "ig"
	// Icelandic
	LanguageIs Language = "is"
	// Ido
	LanguageIo Language = "io"
	// Sichuan Yi; Nuosu
	LanguageIi Language = "ii"
	// Inuktitut
	LanguageIu Language = "iu"
	// Interlingue; Occidental
	LanguageIe Language = "ie"
	// Interlingua (International Auxiliary Language Association)
	LanguageIa Language = "ia"
	// Indonesian
	LanguageId Language = "id"
	// Inupiaq
	LanguageIk Language = "ik"
	// Italian
	LanguageIt Language = "it"
	// Javanese
	LanguageJv Language = "jv"
	// Japanese
	LanguageJa Language = "ja"
	// Kalaallisut; Greenlandic
	LanguageKl Language = "kl"
	// Kannada
	LanguageKn Language = "kn"
	// Kashmiri
	LanguageKs Language = "ks"
	// Kanuri
	LanguageKr Language = "kr"
	// Kazakh
	LanguageKk Language = "kk"
	// Central Khmer
	LanguageKm Language = "km"
	// Kikuyu; Gikuyu
	LanguageKi Language = "ki"
	// Kinyarwanda
	LanguageRw Language = "rw"
	// Kirghiz; Kyrgyz
	LanguageKy Language = "ky"
	// Komi
	LanguageKv Language = "kv"
	// Kongo
	LanguageKg Language = "kg"
	// Korean
	LanguageKo Language = "ko"
	// Kuanyama; Kwanyama
	LanguageKj Language = "kj"
	// Kurdish
	LanguageKu Language = "ku"
	// Lao
	LanguageLo Language = "lo"
	// Latin
	LanguageLa Language = "la"
	// Latvian
	LanguageLv Language = "lv"
	// Limburgan; Limburger; Limburgish
	LanguageLi Language = "li"
	// Lingala
	LanguageLn Language = "ln"
	// Lithuanian
	LanguageLt Language = "lt"
	// Luxembourgish; Letzeburgesch
	LanguageLb Language = "lb"
	// Luba-Katanga
	LanguageLu Language = "lu"
	// Ganda
	LanguageLg Language = "lg"
	// Macedonian
	LanguageMk Language = "mk"
	// Marshallese
	LanguageMh Language = "mh"
	// Malayalam
	LanguageMl Language = "ml"
	// Maori
	LanguageMi Language = "mi"
	// Marathi
	LanguageMr Language = "mr"
	// Malay
	LanguageMs Language = "ms"
	// Malagasy
	LanguageMg Language = "mg"
	// Maltese
	LanguageMt Language = "mt"
	// Mongolian
	LanguageMn Language = "mn"
	// Nauru
	LanguageNa Language = "na"
	// Navajo; Navaho
	LanguageNv Language = "nv"
	// Ndebele, South; South Ndebele
	LanguageNr Language = "nr"
	// Ndebele, North; North Ndebele
	LanguageNd Language = "nd"
	// Ndonga
	LanguageNg Language = "ng"
	// Nepali
	LanguageNe Language = "ne"
	// Norwegian Nynorsk; Nynorsk, Norwegian
	LanguageNn Language = "nn"
	// Bokmål, Norwegian; Norwegian Bokmål
	LanguageNb Language = "nb"
	// Norwegian
	LanguageNo Language = "no"
	// Chichewa; Chewa; Nyanja
	LanguageNy Language = "ny"
	// Occitan (post 1500); Provençal
	LanguageOc Language = "oc"
	// Ojibwa
	LanguageOj Language = "oj"
	// Oriya
	LanguageOr Language = "or"
	// Oromo
	LanguageOm Language = "om"
	// Ossetian; Ossetic
	LanguageOs Language = "os"
	// Panjabi; Punjabi
	LanguagePa Language = "pa"
	// Persian
	LanguageFa Language = "fa"
	// Pali
	LanguagePi Language = "pi"
	// Polish
	LanguagePl Language = "pl"
	// Portuguese
	LanguagePt Language = "pt"
	// Pushto; Pashto
	LanguagePs Language = "ps"
	// Quechua
	LanguageQu Language = "qu"
	// Romansh
	LanguageRm Language = "rm"
	// Romanian; Moldavian; Moldovan
	LanguageRo Language = "ro"
	// Rundi
	LanguageRn Language = "rn"
	// Russian
	LanguageRu Language = "ru"
	// Sango
	LanguageSg Language = "sg"
	// Sanskrit
	LanguageSa Language = "sa"
	// Sinhala; Sinhalese
	LanguageSi Language = "si"
	// Slovak
	LanguageSk Language = "sk"
	// Slovenian
	LanguageSl Language = "sl"
	// Northern Sami
	LanguageSe Language = "se"
	// Samoan
	LanguageSm Language = "sm"
	// Shona
	LanguageSn Language = "sn"
	// Sindhi
	LanguageSd Language = "sd"
	// Somali
	LanguageSo Language = "so"
	// Sotho, Southern
	LanguageSt Language = "st"
	// Spanish; Castilian
	LanguageEs Language = "es"
	// Sardinian
	LanguageSc Language = "sc"
	// Serbian
	LanguageSr Language = "sr"
	// Swati
	LanguageSs Language = "ss"
	// Sundanese
	LanguageSu Language = "su"
	// Swahili
	LanguageSw Language = "sw"
	// Swedish
	LanguageSv Language = "sv"
	// Tahitian
	LanguageTy Language = "ty"
	// Tamil
	LanguageTa Language = "ta"
	// Tatar
	LanguageTt Language = "tt"
	// Telugu
	LanguageTe Language = "te"
	// Tajik
	LanguageTg Language = "tg"
	// Tagalog
	LanguageTl Language = "tl"
	// Thai
	LanguageTh Language = "th"
	// Tibetan
	LanguageBo Language = "bo"
	// Tigrinya
	LanguageTi Language = "ti"
	// Tonga (Tonga Islands)
	LanguageTo Language = "to"
	// Tswana
	LanguageTn Language = "tn"
	// Tsonga
	LanguageTs Language = "ts"
	// Turkmen
	LanguageTk Language = "tk"
	// Turkish
	LanguageTr Language = "tr"
	// Twi
	LanguageTw Language = "tw"
	// Uighur; Uyghur
	LanguageUg Language = "ug"
	// Ukrainian
	LanguageUk Language = "uk"
	// Urdu
	LanguageUr Language = "ur"
	// Uzbek
	LanguageUz Language = "uz"
	// Venda
	LanguageVe Language = "ve"
	// Vietnamese
	LanguageVi Language = "vi"
	// Volapük
	LanguageVo Language = "vo"
	// Welsh
	LanguageCy Language = "cy"
	// Walloon
	LanguageWa Language = "wa"
	// Wolof
	LanguageWo Language = "wo"
	// Xhosa
	LanguageXh Language = "xh"
	// Yiddish
	LanguageYi Language = "yi"
	// Yoruba
	LanguageYo Language = "yo"
	// Zhuang; Chuang
	LanguageZa Language = "za"
	// Zulu
	LanguageZu Language = "zu"
)

func NewLanguageFromString(s string) (Language, error) {
	switch s {
	case "aa":
		return LanguageAa, nil
	case "ab":
		return LanguageAb, nil
	case "af":
		return LanguageAf, nil
	case "ak":
		return LanguageAk, nil
	case "sq":
		return LanguageSq, nil
	case "am":
		return LanguageAm, nil
	case "ar":
		return LanguageAr, nil
	case "an":
		return LanguageAn, nil
	case "hy":
		return LanguageHy, nil
	case "as":
		return LanguageAs, nil
	case "av":
		return LanguageAv, nil
	case "ae":
		return LanguageAe, nil
	case "ay":
		return LanguageAy, nil
	case "az":
		return LanguageAz, nil
	case "ba":
		return LanguageBa, nil
	case "bm":
		return LanguageBm, nil
	case "eu":
		return LanguageEu, nil
	case "be":
		return LanguageBe, nil
	case "bn":
		return LanguageBn, nil
	case "bh":
		return LanguageBh, nil
	case "bi":
		return LanguageBi, nil
	case "bs":
		return LanguageBs, nil
	case "br":
		return LanguageBr, nil
	case "bg":
		return LanguageBg, nil
	case "my":
		return LanguageMy, nil
	case "ca":
		return LanguageCa, nil
	case "ch":
		return LanguageCh, nil
	case "ce":
		return LanguageCe, nil
	case "zh":
		return LanguageZh, nil
	case "cu":
		return LanguageCu, nil
	case "cv":
		return LanguageCv, nil
	case "kw":
		return LanguageKw, nil
	case "co":
		return LanguageCo, nil
	case "cr":
		return LanguageCr, nil
	case "cs":
		return LanguageCs, nil
	case "da":
		return LanguageDa, nil
	case "dv":
		return LanguageDv, nil
	case "nl":
		return LanguageNl, nil
	case "dz":
		return LanguageDz, nil
	case "en":
		return LanguageEn, nil
	case "eo":
		return LanguageEo, nil
	case "et":
		return LanguageEt, nil
	case "ee":
		return LanguageEe, nil
	case "fo":
		return LanguageFo, nil
	case "fj":
		return LanguageFj, nil
	case "fi":
		return LanguageFi, nil
	case "fr":
		return LanguageFr, nil
	case "fy":
		return LanguageFy, nil
	case "ff":
		return LanguageFf, nil
	case "ka":
		return LanguageKa, nil
	case "de":
		return LanguageDe, nil
	case "gd":
		return LanguageGd, nil
	case "ga":
		return LanguageGa, nil
	case "gl":
		return LanguageGl, nil
	case "gv":
		return LanguageGv, nil
	case "el":
		return LanguageEl, nil
	case "gn":
		return LanguageGn, nil
	case "gu":
		return LanguageGu, nil
	case "ht":
		return LanguageHt, nil
	case "ha":
		return LanguageHa, nil
	case "he":
		return LanguageHe, nil
	case "hz":
		return LanguageHz, nil
	case "hi":
		return LanguageHi, nil
	case "ho":
		return LanguageHo, nil
	case "hr":
		return LanguageHr, nil
	case "hu":
		return LanguageHu, nil
	case "ig":
		return LanguageIg, nil
	case "is":
		return LanguageIs, nil
	case "io":
		return LanguageIo, nil
	case "ii":
		return LanguageIi, nil
	case "iu":
		return LanguageIu, nil
	case "ie":
		return LanguageIe, nil
	case "ia":
		return LanguageIa, nil
	case "id":
		return LanguageId, nil
	case "ik":
		return LanguageIk, nil
	case "it":
		return LanguageIt, nil
	case "jv":
		return LanguageJv, nil
	case "ja":
		return LanguageJa, nil
	case "kl":
		return LanguageKl, nil
	case "kn":
		return LanguageKn, nil
	case "ks":
		return LanguageKs, nil
	case "kr":
		return LanguageKr, nil
	case "kk":
		return LanguageKk, nil
	case "km":
		return LanguageKm, nil
	case "ki":
		return LanguageKi, nil
	case "rw":
		return LanguageRw, nil
	case "ky":
		return LanguageKy, nil
	case "kv":
		return LanguageKv, nil
	case "kg":
		return LanguageKg, nil
	case "ko":
		return LanguageKo, nil
	case "kj":
		return LanguageKj, nil
	case "ku":
		return LanguageKu, nil
	case "lo":
		return LanguageLo, nil
	case "la":
		return LanguageLa, nil
	case "lv":
		return LanguageLv, nil
	case "li":
		return LanguageLi, nil
	case "ln":
		return LanguageLn, nil
	case "lt":
		return LanguageLt, nil
	case "lb":
		return LanguageLb, nil
	case "lu":
		return LanguageLu, nil
	case "lg":
		return LanguageLg, nil
	case "mk":
		return LanguageMk, nil
	case "mh":
		return LanguageMh, nil
	case "ml":
		return LanguageMl, nil
	case "mi":
		return LanguageMi, nil
	case "mr":
		return LanguageMr, nil
	case "ms":
		return LanguageMs, nil
	case "mg":
		return LanguageMg, nil
	case "mt":
		return LanguageMt, nil
	case "mn":
		return LanguageMn, nil
	case "na":
		return LanguageNa, nil
	case "nv":
		return LanguageNv, nil
	case "nr":
		return LanguageNr, nil
	case "nd":
		return LanguageNd, nil
	case "ng":
		return LanguageNg, nil
	case "ne":
		return LanguageNe, nil
	case "nn":
		return LanguageNn, nil
	case "nb":
		return LanguageNb, nil
	case "no":
		return LanguageNo, nil
	case "ny":
		return LanguageNy, nil
	case "oc":
		return LanguageOc, nil
	case "oj":
		return LanguageOj, nil
	case "or":
		return LanguageOr, nil
	case "om":
		return LanguageOm, nil
	case "os":
		return LanguageOs, nil
	case "pa":
		return LanguagePa, nil
	case "fa":
		return LanguageFa, nil
	case "pi":
		return LanguagePi, nil
	case "pl":
		return LanguagePl, nil
	case "pt":
		return LanguagePt, nil
	case "ps":
		return LanguagePs, nil
	case "qu":
		return LanguageQu, nil
	case "rm":
		return LanguageRm, nil
	case "ro":
		return LanguageRo, nil
	case "rn":
		return LanguageRn, nil
	case "ru":
		return LanguageRu, nil
	case "sg":
		return LanguageSg, nil
	case "sa":
		return LanguageSa, nil
	case "si":
		return LanguageSi, nil
	case "sk":
		return LanguageSk, nil
	case "sl":
		return LanguageSl, nil
	case "se":
		return LanguageSe, nil
	case "sm":
		return LanguageSm, nil
	case "sn":
		return LanguageSn, nil
	case "sd":
		return LanguageSd, nil
	case "so":
		return LanguageSo, nil
	case "st":
		return LanguageSt, nil
	case "es":
		return LanguageEs, nil
	case "sc":
		return LanguageSc, nil
	case "sr":
		return LanguageSr, nil
	case "ss":
		return LanguageSs, nil
	case "su":
		return LanguageSu, nil
	case "sw":
		return LanguageSw, nil
	case "sv":
		return LanguageSv, nil
	case "ty":
		return LanguageTy, nil
	case "ta":
		return LanguageTa, nil
	case "tt":
		return LanguageTt, nil
	case "te":
		return LanguageTe, nil
	case "tg":
		return LanguageTg, nil
	case "tl":
		return LanguageTl, nil
	case "th":
		return LanguageTh, nil
	case "bo":
		return LanguageBo, nil
	case "ti":
		return LanguageTi, nil
	case "to":
		return LanguageTo, nil
	case "tn":
		return LanguageTn, nil
	case "ts":
		return LanguageTs, nil
	case "tk":
		return LanguageTk, nil
	case "tr":
		return LanguageTr, nil
	case "tw":
		return LanguageTw, nil
	case "ug":
		return LanguageUg, nil
	case "uk":
		return LanguageUk, nil
	case "ur":
		return LanguageUr, nil
	case "uz":
		return LanguageUz, nil
	case "ve":
		return LanguageVe, nil
	case "vi":
		return LanguageVi, nil
	case "vo":
		return LanguageVo, nil
	case "cy":
		return LanguageCy, nil
	case "wa":
		return LanguageWa, nil
	case "wo":
		return LanguageWo, nil
	case "xh":
		return LanguageXh, nil
	case "yi":
		return LanguageYi, nil
	case "yo":
		return LanguageYo, nil
	case "za":
		return LanguageZa, nil
	case "zu":
		return LanguageZu, nil
	}
	var t Language
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (l Language) Ptr() *Language {
	return &l
}

type MeasurementData struct {
	Editable    *bool                  `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string               `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                    `json:"record_count" url:"record_count"`
	Properties  *MeasurementProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MeasurementData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MeasurementData) UnmarshalJSON(data []byte) error {
	type unmarshaler MeasurementData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MeasurementData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MeasurementData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// A numerical measurement of a dimension of an entity (e.g., weight) using a standard unit
type MeasurementInfo struct {
	Limit  int                `json:"limit" url:"limit"`
	Size   *QualifiedCount    `json:"size,omitempty" url:"size,omitempty"`
	Data   []*MeasurementData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}        `json:"next,omitempty" url:"next,omitempty"`
	Offset *int               `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MeasurementInfo) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MeasurementInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler MeasurementInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MeasurementInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MeasurementInfo) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MeasurementProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// Type of the measurement
	Type MeasurementType `json:"type" url:"type"`
	// The unit of the measurement
	Unit Unit `json:"unit" url:"unit"`
	// The value of the measurement
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MeasurementProperties) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MeasurementProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler MeasurementProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MeasurementProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MeasurementProperties) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Measurement type enums refer to the type of measurement applied to the entity, e.g., net weight.
type MeasurementType string

const (
	// Total weight including the weight of goods, packaging, and any additional accessories used for shipping
	MeasurementTypeGrossWeight MeasurementType = "gross_weight"
	// Weight of raw goods only
	MeasurementTypeNetWeight MeasurementType = "net_weight"
	// Describes the number of units of product
	MeasurementTypeQuantity MeasurementType = "quantity"
)

func NewMeasurementTypeFromString(s string) (MeasurementType, error) {
	switch s {
	case "gross_weight":
		return MeasurementTypeGrossWeight, nil
	case "net_weight":
		return MeasurementTypeNetWeight, nil
	case "quantity":
		return MeasurementTypeQuantity, nil
	}
	var t MeasurementType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MeasurementType) Ptr() *MeasurementType {
	return &m
}

// Monetary value context enums describe the types of financial values an asset can have.
type MonetaryValueContext string

const (
	// Indicates cost, insurance, and freight (CIF) arrangement
	MonetaryValueContextCostInsuranceAndFreight MonetaryValueContext = "cost_insurance_and_freight"
	// Indicates free on board (FOB) arrangement
	MonetaryValueContextFreeOnBoard MonetaryValueContext = "free_on_board"
	// Indicates value determined by customs authorities
	MonetaryValueContextAssessedValue MonetaryValueContext = "assessed_value"
)

func NewMonetaryValueContextFromString(s string) (MonetaryValueContext, error) {
	switch s {
	case "cost_insurance_and_freight":
		return MonetaryValueContextCostInsuranceAndFreight, nil
	case "free_on_board":
		return MonetaryValueContextFreeOnBoard, nil
	case "assessed_value":
		return MonetaryValueContextAssessedValue, nil
	}
	var t MonetaryValueContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MonetaryValueContext) Ptr() *MonetaryValueContext {
	return &m
}

type MonetaryValueData struct {
	Editable    *bool                    `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                 `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                      `json:"record_count" url:"record_count"`
	Properties  *MonetaryValueProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MonetaryValueData) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MonetaryValueData) UnmarshalJSON(data []byte) error {
	type unmarshaler MonetaryValueData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MonetaryValueData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MonetaryValueData) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// The financial value of an asset (e.g., FOB, CIF)
type MonetaryValueInfo struct {
	Limit  int                  `json:"limit" url:"limit"`
	Size   *QualifiedCount      `json:"size,omitempty" url:"size,omitempty"`
	Data   []*MonetaryValueData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}          `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                 `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MonetaryValueInfo) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MonetaryValueInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler MonetaryValueInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MonetaryValueInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MonetaryValueInfo) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MonetaryValueProperties struct {
	// The type of value
	Context MonetaryValueContext `json:"context" url:"context"`
	// The ISO 4217 currency code
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The financial value of the asset
	Value float64 `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MonetaryValueProperties) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MonetaryValueProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler MonetaryValueProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MonetaryValueProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MonetaryValueProperties) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Name context enums describe different ways in which a name can belong to an entity.
type NameContext string

const (
	// The main name, full name, or "best name" for an entity
	NameContextPrimary NameContext = "primary"
	// A given name (i.e., first name, middle name)
	NameContextGiven NameContext = "given"
	// A family name (i.e., last name)
	NameContextFamily NameContext = "family"
	// An alternative, former, or otherwise non-primary name
	NameContextAlias NameContext = "alias"
	// A machine translation of a name
	NameContextMachineTranslation NameContext = "machine_translation"
	// A machine transliteration of a name using a specific system (e.g., Pinyin, ISO, UNGEGN)
	NameContextTransliteration NameContext = "transliteration"
	// A discretely registered name used by a person or company not operating under its legal name
	NameContextTradeName NameContext = "trade_name"
)

func NewNameContextFromString(s string) (NameContext, error) {
	switch s {
	case "primary":
		return NameContextPrimary, nil
	case "given":
		return NameContextGiven, nil
	case "family":
		return NameContextFamily, nil
	case "alias":
		return NameContextAlias, nil
	case "machine_translation":
		return NameContextMachineTranslation, nil
	case "transliteration":
		return NameContextTransliteration, nil
	case "trade_name":
		return NameContextTradeName, nil
	}
	var t NameContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NameContext) Ptr() *NameContext {
	return &n
}

type NameData struct {
	Editable    *bool           `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string        `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int             `json:"record_count" url:"record_count"`
	Properties  *NameProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NameData) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NameData) UnmarshalJSON(data []byte) error {
	type unmarshaler NameData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NameData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NameData) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// An entity's name. The value may be straightforward (e.g., "Acme LLC", "John Doe") or context specific (e.g., "Jones v. Smith" as a legal matter name).
type NameInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*NameData     `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NameInfo) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NameInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler NameInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NameInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NameInfo) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NameProperties struct {
	Context *string `json:"context,omitempty" url:"context,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// The language that the name is in
	Language *Language `json:"language,omitempty" url:"language,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The name value translated to English
	Translated *string `json:"translated,omitempty" url:"translated,omitempty"`
	// The name value transliterated to English
	Transliterated *string `json:"transliterated,omitempty" url:"transliterated,omitempty"`
	// The name, as text
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NameProperties) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NameProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler NameProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NameProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NameProperties) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Person status enums describe different life events.
type PersonStatus string

const (
	// Indicates a person was born
	PersonStatusBorn PersonStatus = "born"
	// Indicates a person died
	PersonStatusDied PersonStatus = "died"
	// Indicates a marriage
	PersonStatusMarried PersonStatus = "married"
)

func NewPersonStatusFromString(s string) (PersonStatus, error) {
	switch s {
	case "born":
		return PersonStatusBorn, nil
	case "died":
		return PersonStatusDied, nil
	case "married":
		return PersonStatusMarried, nil
	}
	var t PersonStatus
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (p PersonStatus) Ptr() *PersonStatus {
	return &p
}

type PersonStatusData struct {
	Editable    *bool                   `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                     `json:"record_count" url:"record_count"`
	Properties  *PersonStatusProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PersonStatusData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonStatusData) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonStatusData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonStatusData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonStatusData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// A key event occurring in a person's life, usually temporal
type PersonStatusInfo struct {
	Limit  int                 `json:"limit" url:"limit"`
	Size   *QualifiedCount     `json:"size,omitempty" url:"size,omitempty"`
	Data   []*PersonStatusData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}         `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PersonStatusInfo) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonStatusInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonStatusInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonStatusInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonStatusInfo) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PersonStatusProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The event
	Value PersonStatus `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PersonStatusProperties) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PersonStatusProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler PersonStatusProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PersonStatusProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PersonStatusProperties) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PositionData struct {
	Editable    *bool               `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string            `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                 `json:"record_count" url:"record_count"`
	Properties  *PositionProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PositionData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PositionData) UnmarshalJSON(data []byte) error {
	type unmarshaler PositionData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PositionData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PositionData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// An attribute used for many different relationship types that allows for the inclusion of a title or designation (e.g., member_of_the_board_of, Position: "Secretary of the Board" or shareholder_of, Position: "Minority shareholder")
type PositionInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*PositionData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PositionInfo) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PositionInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler PositionInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PositionInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PositionInfo) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PositionProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The position as text
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PositionProperties) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PositionProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler PositionProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PositionProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PositionProperties) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Relationships string

const (
	// Partnerships or similar types of companies of which this entity is a business partner with an ownership stake
	RelationshipsPartnerOf Relationships = "partner_of"
	// Business partners with an ownership stake in this company
	RelationshipsHasPartner Relationships = "has_partner"
	// Entities of which this entity is reported to be a Registered Agent, corporate secretary, or similar
	RelationshipsRegisteredAgentOf Relationships = "registered_agent_of"
	// Entities acting in a Registered Agent, corporate secretary, or similar role for this entity
	RelationshipsHasRegisteredAgent Relationships = "has_registered_agent"
	// Securities this entity has issued
	RelationshipsIssuerOf Relationships = "issuer_of"
	// Companies that issued this security
	RelationshipsHasIssuer Relationships = "has_issuer"
	// Companies of which this entity is a direct owner
	RelationshipsShareholderOf Relationships = "shareholder_of"
	// Direct owners of this company
	RelationshipsHasShareholder Relationships = "has_shareholder"
	// Deprecated and converted to officer_of
	RelationshipsExecutiveOf Relationships = "executive_of"
	// Deprecated and converted to officer_of
	RelationshipsHasExecutive Relationships = "has_executive"
	// Family members of this entity
	RelationshipsFamilyOf Relationships = "family_of"
	// Companies audited by this entity
	RelationshipsAuditorOf Relationships = "auditor_of"
	// Auditors of this company
	RelationshipsHasAuditor Relationships = "has_auditor"
	// The entity in charge of the transportation of goods
	RelationshipsCarrierOf Relationships = "carrier_of"
	// The shipment carrying the goods
	RelationshipsHasCarrier Relationships = "has_carrier"
	// Deprecated and converted to legal_representative_of
	RelationshipsJudidicalRepresentativeOf Relationships = "judidical_representative_of"
	// Deprecated and converted to legal_representative_of
	RelationshipsHasJudicialRepresentative Relationships = "has_judicial_representative"
	// A placeholder relationship. Rarely used.
	RelationshipsGeneric Relationships = "generic"
	// Entities from which this entity inherited legal personality
	RelationshipsLegalSuccessorOf Relationships = "legal_successor_of"
	// Successor entities to which this entity granted legal personality
	RelationshipsHasLegalSuccessor Relationships = "has_legal_successor"
	// Deprecated and converted to linked_to
	RelationshipsAssociateOf Relationships = "associate_of"
	// Deprecated and converted to linked_to
	RelationshipsHasAssociate Relationships = "has_associate"
	// Deprecated and converted to linked_to
	RelationshipsClientOf Relationships = "client_of"
	// Deprecated and converted to linked_to
	RelationshipsHasClient Relationships = "has_client"
	// Entities connected to this entity via a type of relationship that does not exist in the Graph ontology
	RelationshipsLinkedTo Relationships = "linked_to"
	// Entities created by or legally derived from this entity
	RelationshipsLegalPredecessorOf Relationships = "legal_predecessor_of"
	// Entities from which this entity was created or legally derived
	RelationshipsHasLegalPredecessor Relationships = "has_legal_predecessor"
	// Deprecated and converted to legal_representative_of
	RelationshipsJudicialRepresentativeOf Relationships = "judicial_representative_of"
	// Entities with a corporate or statutory body of oversight/control of which this entity is a member
	RelationshipsMemberOfTheBoardOf Relationships = "member_of_the_board_of"
	// Entities that are members of this entity's corporate or statutory body of oversight/control
	RelationshipsHasMemberOfTheBoard Relationships = "has_member_of_the_board"
	// Legal Matters in which this entity is a litigant
	RelationshipsPartyTo Relationships = "party_to"
	// Litigants in this Legal Matter
	RelationshipsHasParty Relationships = "has_party"
	// Shipments that this entity were notified of upon their arrival at their destinations
	RelationshipsNotifyPartyOf Relationships = "notify_party_of"
	// Entity to be notified when this shipment arrives
	RelationshipsHasNotifyParty Relationships = "has_notify_party"
	// Companies that indirectly own this company and/or report it as a subsidiary
	RelationshipsSubsidiaryOf Relationships = "subsidiary_of"
	// Companies reported to be subsidiaries or indirectly owned by this company
	RelationshipsHasSubsidiary Relationships = "has_subsidiary"
	// Shipments this entity received
	RelationshipsReceiverOf Relationships = "receiver_of"
	// The entity that received this shipment
	RelationshipsReceivedBy Relationships = "received_by"
	// Deprecated and converted to shareholder_of
	RelationshipsSoleProprietorOf Relationships = "sole_proprietor_of"
	// Deprecated and converted to shareholder_of
	RelationshipsHasSoleProprietor Relationships = "has_sole_proprietor"
	// Deprecated and converted to officer_of (in jurisdictions where the secretary is a fairly important control figure) or registered_agent_of (in jurisdictions where the secretary is more of a clerical role)
	RelationshipsSecretaryOf Relationships = "secretary_of"
	// Deprecated and converted to officer_of (in jurisdictions where the secretary is a fairly important control figure) or registered_agent_of (in jurisdictions where the secretary is more of a clerical role)
	RelationshipsHasSecretary Relationships = "has_secretary"
	// Companies of which this entity is an employee
	RelationshipsEmployeeOf Relationships = "employee_of"
	// Employees of this company
	RelationshipsHasEmployee Relationships = "has_employee"
	// Companies of which this entity is a CEO, Treasurer, etc.
	RelationshipsOfficerOf Relationships = "officer_of"
	// CEOs, Treasurers, etc. of this company
	RelationshipsHasOfficer Relationships = "has_officer"
	// Companies of which this entity is a Manager
	RelationshipsManagerOf Relationships = "manager_of"
	// Managers of this company
	RelationshipsHasManager Relationships = "has_manager"
	// Entities of which this entity is reported to be (or have acted as) a legal representative
	RelationshipsLegalRepresentativeOf Relationships = "legal_representative_of"
	// Entities reported to be (or have acted as) legal representatives of this entity
	RelationshipsHasLegalRepresentative Relationships = "has_legal_representative"
	// Companies of which this entity is a liquidator
	RelationshipsLiquidatorOf Relationships = "liquidator_of"
	// Liquidators of this company
	RelationshipsHasLiquidator Relationships = "has_liquidator"
	// Parent companies of which this company is a branch
	RelationshipsBranchOf Relationships = "branch_of"
	// Branches of this company
	RelationshipsHasBranch Relationships = "has_branch"
	// Entities for which this entity works as a lawyer in a professional capacity
	RelationshipsLawyerOf Relationships = "lawyer_of"
	// Lawyers reported to work for this entity in a professional capacity
	RelationshipsHasLawyer Relationships = "has_lawyer"
	// The entity who has sent a shipment
	RelationshipsShipsTo Relationships = "ships_to"
	// The entity that has received a shipment
	RelationshipsReceivesFrom Relationships = "receives_from"
	// Entities of which this entity is reported to be a supervisor, typically in East Asia
	RelationshipsSupervisorOf Relationships = "supervisor_of"
	// Supervisors of this company, typically in East Asia
	RelationshipsHasSupervisor Relationships = "has_supervisor"
	// Non-corporate entities (trade name, security, intellectual property, etc.) directly owned by this entity
	RelationshipsOwnerOf Relationships = "owner_of"
	// Direct owners of this entity
	RelationshipsHasOwner Relationships = "has_owner"
	// Shipments this entity sent
	RelationshipsShipperOf Relationships = "shipper_of"
	// The entity that sent this shipment
	RelationshipsShippedBy Relationships = "shipped_by"
	// Legal Matters to which this entity is tied in a professional capacity
	RelationshipsLawyerIn Relationships = "lawyer_in"
	// Entities that legally founded this company
	RelationshipsFounderOf Relationships = "founder_of"
	// The source entity is reported to be the founder of a company
	RelationshipsHasFounder Relationships = "has_founder"
	// Entities reported to be beneficially or indirectly owned by this entity
	RelationshipsBeneficialOwnerOf Relationships = "beneficial_owner_of"
	// Entities reported to beneficially or indirectly own this entity
	RelationshipsHasBeneficialOwner Relationships = "has_beneficial_owner"
	// Companies of which this entity is a Director
	RelationshipsDirectorOf Relationships = "director_of"
	// Directors of this company
	RelationshipsHasDirector    Relationships = "has_director"
	RelationshipsPossiblySameAs Relationships = "possibly_same_as"
)

func NewRelationshipsFromString(s string) (Relationships, error) {
	switch s {
	case "partner_of":
		return RelationshipsPartnerOf, nil
	case "has_partner":
		return RelationshipsHasPartner, nil
	case "registered_agent_of":
		return RelationshipsRegisteredAgentOf, nil
	case "has_registered_agent":
		return RelationshipsHasRegisteredAgent, nil
	case "issuer_of":
		return RelationshipsIssuerOf, nil
	case "has_issuer":
		return RelationshipsHasIssuer, nil
	case "shareholder_of":
		return RelationshipsShareholderOf, nil
	case "has_shareholder":
		return RelationshipsHasShareholder, nil
	case "executive_of":
		return RelationshipsExecutiveOf, nil
	case "has_executive":
		return RelationshipsHasExecutive, nil
	case "family_of":
		return RelationshipsFamilyOf, nil
	case "auditor_of":
		return RelationshipsAuditorOf, nil
	case "has_auditor":
		return RelationshipsHasAuditor, nil
	case "carrier_of":
		return RelationshipsCarrierOf, nil
	case "has_carrier":
		return RelationshipsHasCarrier, nil
	case "judidical_representative_of":
		return RelationshipsJudidicalRepresentativeOf, nil
	case "has_judicial_representative":
		return RelationshipsHasJudicialRepresentative, nil
	case "generic":
		return RelationshipsGeneric, nil
	case "legal_successor_of":
		return RelationshipsLegalSuccessorOf, nil
	case "has_legal_successor":
		return RelationshipsHasLegalSuccessor, nil
	case "associate_of":
		return RelationshipsAssociateOf, nil
	case "has_associate":
		return RelationshipsHasAssociate, nil
	case "client_of":
		return RelationshipsClientOf, nil
	case "has_client":
		return RelationshipsHasClient, nil
	case "linked_to":
		return RelationshipsLinkedTo, nil
	case "legal_predecessor_of":
		return RelationshipsLegalPredecessorOf, nil
	case "has_legal_predecessor":
		return RelationshipsHasLegalPredecessor, nil
	case "judicial_representative_of":
		return RelationshipsJudicialRepresentativeOf, nil
	case "member_of_the_board_of":
		return RelationshipsMemberOfTheBoardOf, nil
	case "has_member_of_the_board":
		return RelationshipsHasMemberOfTheBoard, nil
	case "party_to":
		return RelationshipsPartyTo, nil
	case "has_party":
		return RelationshipsHasParty, nil
	case "notify_party_of":
		return RelationshipsNotifyPartyOf, nil
	case "has_notify_party":
		return RelationshipsHasNotifyParty, nil
	case "subsidiary_of":
		return RelationshipsSubsidiaryOf, nil
	case "has_subsidiary":
		return RelationshipsHasSubsidiary, nil
	case "receiver_of":
		return RelationshipsReceiverOf, nil
	case "received_by":
		return RelationshipsReceivedBy, nil
	case "sole_proprietor_of":
		return RelationshipsSoleProprietorOf, nil
	case "has_sole_proprietor":
		return RelationshipsHasSoleProprietor, nil
	case "secretary_of":
		return RelationshipsSecretaryOf, nil
	case "has_secretary":
		return RelationshipsHasSecretary, nil
	case "employee_of":
		return RelationshipsEmployeeOf, nil
	case "has_employee":
		return RelationshipsHasEmployee, nil
	case "officer_of":
		return RelationshipsOfficerOf, nil
	case "has_officer":
		return RelationshipsHasOfficer, nil
	case "manager_of":
		return RelationshipsManagerOf, nil
	case "has_manager":
		return RelationshipsHasManager, nil
	case "legal_representative_of":
		return RelationshipsLegalRepresentativeOf, nil
	case "has_legal_representative":
		return RelationshipsHasLegalRepresentative, nil
	case "liquidator_of":
		return RelationshipsLiquidatorOf, nil
	case "has_liquidator":
		return RelationshipsHasLiquidator, nil
	case "branch_of":
		return RelationshipsBranchOf, nil
	case "has_branch":
		return RelationshipsHasBranch, nil
	case "lawyer_of":
		return RelationshipsLawyerOf, nil
	case "has_lawyer":
		return RelationshipsHasLawyer, nil
	case "ships_to":
		return RelationshipsShipsTo, nil
	case "receives_from":
		return RelationshipsReceivesFrom, nil
	case "supervisor_of":
		return RelationshipsSupervisorOf, nil
	case "has_supervisor":
		return RelationshipsHasSupervisor, nil
	case "owner_of":
		return RelationshipsOwnerOf, nil
	case "has_owner":
		return RelationshipsHasOwner, nil
	case "shipper_of":
		return RelationshipsShipperOf, nil
	case "shipped_by":
		return RelationshipsShippedBy, nil
	case "lawyer_in":
		return RelationshipsLawyerIn, nil
	case "founder_of":
		return RelationshipsFounderOf, nil
	case "has_founder":
		return RelationshipsHasFounder, nil
	case "beneficial_owner_of":
		return RelationshipsBeneficialOwnerOf, nil
	case "has_beneficial_owner":
		return RelationshipsHasBeneficialOwner, nil
	case "director_of":
		return RelationshipsDirectorOf, nil
	case "has_director":
		return RelationshipsHasDirector, nil
	case "possibly_same_as":
		return RelationshipsPossiblySameAs, nil
	}
	var t Relationships
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Relationships) Ptr() *Relationships {
	return &r
}

type Risk string

const (
	RiskSheffieldHallamUniversityForcedLaborEntity                               Risk = "sheffield_hallam_university_forced_labor_entity"
	RiskForcedLaborXinjiangOriginDirect                                          Risk = "forced_labor_xinjiang_origin_direct"
	RiskRegulatoryAction                                                         Risk = "regulatory_action"
	RiskForcedLaborUflpaOriginSubtierProductBlueprint                            Risk = "forced_labor_uflpa_origin_subtier_product_blueprint"
	RiskForcedLaborXinjiangGeospatial                                            Risk = "forced_labor_xinjiang_geospatial"
	RiskEuHighRiskThird                                                          Risk = "eu_high_risk_third"
	RiskUkSanctioned                                                             Risk = "uk_sanctioned"
	RiskSheffieldHallamUniversityUsefulResources                                 Risk = "sheffield_hallam_university_useful_resources"
	RiskExportsToEntityLicensedWithFsbRf                                         Risk = "exports_to_entity_licensed_with_fsb_rf"
	RiskOwnerOfAspiForcedLaborEntity                                             Risk = "owner_of_aspi_forced_labor_entity"
	RiskSanctioned                                                               Risk = "sanctioned"
	RiskReputationalRiskFinancialCrime                                           Risk = "reputational_risk_financial_crime"
	RiskCmicEntity                                                               Risk = "cmic_entity"
	RiskPsaPep                                                                   Risk = "psa_pep"
	RiskExportControls                                                           Risk = "export_controls"
	RiskWroEntity                                                                Risk = "wro_entity"
	RiskImportsBisHighPriorityItems                                              Risk = "imports_bis_high_priority_items"
	RiskReputationalRiskBriberyAndCorruption                                     Risk = "reputational_risk_bribery_and_corruption"
	RiskSanctionedAdjacent                                                       Risk = "sanctioned_adjacent"
	RiskPsaExportControls                                                        Risk = "psa_export_controls"
	RiskOwnerOfSanctionedEntity                                                  Risk = "owner_of_sanctioned_entity"
	RiskPsaRegulatoryAction                                                      Risk = "psa_regulatory_action"
	RiskForcedLaborXinjiangContractors                                           Risk = "forced_labor_xinjiang_contractors"
	RiskUk50PercentRule                                                          Risk = "uk_50_percent_rule"
	RiskOwnedByXinjiangEntity                                                    Risk = "owned_by_xinjiang_entity"
	RiskForcedLaborXinjiangOriginSubtier                                         Risk = "forced_labor_xinjiang_origin_subtier"
	RiskPsaForcedLaborXinjiangName                                               Risk = "psa_forced_labor_xinjiang_name"
	RiskBaselAml                                                                 Risk = "basel_aml"
	RiskAspiUyghurForcedLaborReportEntityAdjacent                                Risk = "aspi_uyghur_forced_labor_report_entity_adjacent"
	RiskOwnedByCmicEntity                                                        Risk = "owned_by_cmic_entity"
	RiskOfacSdn                                                                  Risk = "ofac_sdn"
	RiskOwnedByBisMeuEntity                                                      Risk = "owned_by_bis_meu_entity"
	RiskForcedLaborAspiOriginSubtierProductBlueprint                             Risk = "forced_labor_aspi_origin_subtier_product_blueprint"
	RiskOwnedByForcedLaborXinjiangUflpa                                          Risk = "owned_by_forced_labor_xinjiang_uflpa"
	RiskForcedLaborXinjiangUflpaAdjacent                                         Risk = "forced_labor_xinjiang_uflpa_adjacent"
	RiskOwnedByWroEntity                                                         Risk = "owned_by_wro_entity"
	RiskPsaMilitaryCivilFusion                                                   Risk = "psa_military_civil_fusion"
	RiskForcedLaborAspiOriginSubtier                                             Risk = "forced_labor_aspi_origin_subtier"
	RiskFormerWroEntity                                                          Risk = "former_wro_entity"
	RiskForcedLaborWroOriginDirect                                               Risk = "forced_labor_wro_origin_direct"
	RiskOwnedBySheffieldHallamUniversityReportsForcedLaborEntity                 Risk = "owned_by_sheffield_hallam_university_reports_forced_labor_entity"
	RiskEuSanctioned                                                             Risk = "eu_sanctioned"
	RiskAspiUyghurForcedLaborReportEntity                                        Risk = "aspi_uyghur_forced_labor_report_entity"
	RiskForcedLaborChinaKeywords                                                 Risk = "forced_labor_china_keywords"
	RiskExportsBisHighPriorityItemsCriticalComponents                            Risk = "exports_bis_high_priority_items_critical_components"
	RiskSoeAdjacent                                                              Risk = "soe_adjacent"
	RiskForcedLaborSheffieldHallamUniversityReportsOriginSubtierProductBlueprint Risk = "forced_labor_sheffield_hallam_university_reports_origin_subtier_product_blueprint"
	RiskStateOwned                                                               Risk = "state_owned"
	RiskPsaSheffieldHallamUniversityForcedLaborEntity                            Risk = "psa_sheffield_hallam_university_forced_labor_entity"
	RiskExportControlsAdjacent                                                   Risk = "export_controls_adjacent"
	RiskExportToSoe                                                              Risk = "export_to_soe"
	RiskPsaSanctioned                                                            Risk = "psa_sanctioned"
	RiskOfac50PercentRule                                                        Risk = "ofac_50_percent_rule"
	RiskOwnerOfExportControlsEntity                                              Risk = "owner_of_export_controls_entity"
	RiskForcedLaborSheffieldHallamUniversityReportsOriginSubtier                 Risk = "forced_labor_sheffield_hallam_university_reports_origin_subtier"
	RiskMeuListContractors                                                       Risk = "meu_list_contractors"
	RiskForcedLaborXinjiangCottonEntity                                          Risk = "forced_labor_xinjiang_cotton_entity"
	RiskOwnerOfForcedLaborXinjiangUflpa                                          Risk = "owner_of_forced_labor_xinjiang_uflpa"
	RiskPep                                                                      Risk = "pep"
	RiskOwnedByEntityInExportControls                                            Risk = "owned_by_entity_in_export_controls"
	RiskPsaForcedLaborAspiUyghur                                                 Risk = "psa_forced_labor_aspi_uyghur"
	RiskBisBoycottRequesterList                                                  Risk = "bis_boycott_requester_list"
	RiskEu50PercentRule                                                          Risk = "eu_50_percent_rule"
	RiskForcedLaborXinjiangOperations                                            Risk = "forced_labor_xinjiang_operations"
	RiskForcedLaborWroOriginSubtier                                              Risk = "forced_labor_wro_origin_subtier"
	RiskPsaForcedLaborXinjiangCottonEntity                                       Risk = "psa_forced_labor_xinjiang_cotton_entity"
	RiskReputationalRiskOther                                                    Risk = "reputational_risk_other"
	RiskExportToSanctioned                                                       Risk = "export_to_sanctioned"
	RiskSheffieldHallamUniversityForcedLaborReportsEntityAdjacent                Risk = "sheffield_hallam_university_forced_labor_reports_entity_adjacent"
	RiskFormerSoe                                                                Risk = "former_soe"
	RiskReputationalRiskOrganizedCrime                                           Risk = "reputational_risk_organized_crime"
	RiskReputationalRiskForcedLabor                                              Risk = "reputational_risk_forced_labor"
	RiskImportsBisHighPriorityItemsCriticalComponents                            Risk = "imports_bis_high_priority_items_critical_components"
	RiskOwnerOfSheffieldHallamUniversityReportsForcedLaborEntity                 Risk = "owner_of_sheffield_hallam_university_reports_forced_labor_entity"
	RiskCpiScore                                                                 Risk = "cpi_score"
	RiskPsaSheffieldHallamUniversityUsefulResources                              Risk = "psa_sheffield_hallam_university_useful_resources"
	RiskPsaWroEntity                                                             Risk = "psa_wro_entity"
	RiskPsaEntityLicensedWithFsbRf                                               Risk = "psa_entity_licensed_with_fsb_rf"
	RiskForcedLaborWroOriginSubtierProductBlueprint                              Risk = "forced_labor_wro_origin_subtier_product_blueprint"
	RiskPsaForcedLaborXinjiangUflpa                                              Risk = "psa_forced_labor_xinjiang_uflpa"
	RiskOwnerOfWroEntity                                                         Risk = "owner_of_wro_entity"
	RiskMilitaryCivilFusion                                                      Risk = "military_civil_fusion"
	RiskForcedLaborXinjiangRegistration                                          Risk = "forced_labor_xinjiang_registration"
	RiskForcedLaborXinjiangName                                                  Risk = "forced_labor_xinjiang_name"
	RiskOwnedByAspiForcedLaborEntity                                             Risk = "owned_by_aspi_forced_labor_entity"
	RiskReputationalRiskTerrorism                                                Risk = "reputational_risk_terrorism"
	RiskFormerlySanctioned                                                       Risk = "formerly_sanctioned"
	RiskOwnedBySection1260HEntity                                                Risk = "owned_by_section_1260h_entity"
	RiskSheffieldHallamUniversityForcedLaborReportsIntermediaryEntity            Risk = "sheffield_hallam_university_forced_labor_reports_intermediary_entity"
	RiskPepAdjacent                                                              Risk = "pep_adjacent"
	RiskOwnerOfForcedLaborXinjiangEntity                                         Risk = "owner_of_forced_labor_xinjiang_entity"
	RiskLawEnforcementAction                                                     Risk = "law_enforcement_action"
	RiskOwnedBySoe                                                               Risk = "owned_by_soe"
	RiskOwnedByMilitaryCivilFusion                                               Risk = "owned_by_military_civil_fusion"
	RiskEntityLicensedWithFsbRf                                                  Risk = "entity_licensed_with_fsb_rf"
	RiskPsaForcedLaborXinjiangRegistration                                       Risk = "psa_forced_labor_xinjiang_registration"
	RiskForcedLaborSheffieldHallamUniversityReportsOriginDirect                  Risk = "forced_labor_sheffield_hallam_university_reports_origin_direct"
	RiskPsaForcedLaborXinjiangGeospatial                                         Risk = "psa_forced_labor_xinjiang_geospatial"
	RiskWroEntityAdjacent                                                        Risk = "wro_entity_adjacent"
	RiskReputationalRiskCybercrime                                               Risk = "reputational_risk_cybercrime"
	RiskPsaForcedLaborXinjiangOperations                                         Risk = "psa_forced_labor_xinjiang_operations"
	RiskOwnerOfSoe                                                               Risk = "owner_of_soe"
	RiskPsaBisBoycottRequesterList                                               Risk = "psa_bis_boycott_requester_list"
	RiskForcedLaborAspiOriginDirect                                              Risk = "forced_labor_aspi_origin_direct"
	RiskExportsBisHighPriorityItems                                              Risk = "exports_bis_high_priority_items"
	RiskForcedLaborUflpaOriginSubtier                                            Risk = "forced_labor_uflpa_origin_subtier"
	RiskOwnerOfRegulatoryActionEntity                                            Risk = "owner_of_regulatory_action_entity"
	RiskPsaSheffieldHallamUniversityIntermediaryEntity                           Risk = "psa_sheffield_hallam_university_intermediary_entity"
	RiskForcedLaborXinjiangUflpa                                                 Risk = "forced_labor_xinjiang_uflpa"
	RiskPsaStateOwned                                                            Risk = "psa_state_owned"
	RiskForcedLaborUflpaOriginDirect                                             Risk = "forced_labor_uflpa_origin_direct"
	RiskForcedLaborXinjiangOriginSubtierProductBlueprint                         Risk = "forced_labor_xinjiang_origin_subtier_product_blueprint"
	RiskOwnedBySanctionedEntity                                                  Risk = "owned_by_sanctioned_entity"
)

func NewRiskFromString(s string) (Risk, error) {
	switch s {
	case "sheffield_hallam_university_forced_labor_entity":
		return RiskSheffieldHallamUniversityForcedLaborEntity, nil
	case "forced_labor_xinjiang_origin_direct":
		return RiskForcedLaborXinjiangOriginDirect, nil
	case "regulatory_action":
		return RiskRegulatoryAction, nil
	case "forced_labor_uflpa_origin_subtier_product_blueprint":
		return RiskForcedLaborUflpaOriginSubtierProductBlueprint, nil
	case "forced_labor_xinjiang_geospatial":
		return RiskForcedLaborXinjiangGeospatial, nil
	case "eu_high_risk_third":
		return RiskEuHighRiskThird, nil
	case "uk_sanctioned":
		return RiskUkSanctioned, nil
	case "sheffield_hallam_university_useful_resources":
		return RiskSheffieldHallamUniversityUsefulResources, nil
	case "exports_to_entity_licensed_with_fsb_rf":
		return RiskExportsToEntityLicensedWithFsbRf, nil
	case "owner_of_aspi_forced_labor_entity":
		return RiskOwnerOfAspiForcedLaborEntity, nil
	case "sanctioned":
		return RiskSanctioned, nil
	case "reputational_risk_financial_crime":
		return RiskReputationalRiskFinancialCrime, nil
	case "cmic_entity":
		return RiskCmicEntity, nil
	case "psa_pep":
		return RiskPsaPep, nil
	case "export_controls":
		return RiskExportControls, nil
	case "wro_entity":
		return RiskWroEntity, nil
	case "imports_bis_high_priority_items":
		return RiskImportsBisHighPriorityItems, nil
	case "reputational_risk_bribery_and_corruption":
		return RiskReputationalRiskBriberyAndCorruption, nil
	case "sanctioned_adjacent":
		return RiskSanctionedAdjacent, nil
	case "psa_export_controls":
		return RiskPsaExportControls, nil
	case "owner_of_sanctioned_entity":
		return RiskOwnerOfSanctionedEntity, nil
	case "psa_regulatory_action":
		return RiskPsaRegulatoryAction, nil
	case "forced_labor_xinjiang_contractors":
		return RiskForcedLaborXinjiangContractors, nil
	case "uk_50_percent_rule":
		return RiskUk50PercentRule, nil
	case "owned_by_xinjiang_entity":
		return RiskOwnedByXinjiangEntity, nil
	case "forced_labor_xinjiang_origin_subtier":
		return RiskForcedLaborXinjiangOriginSubtier, nil
	case "psa_forced_labor_xinjiang_name":
		return RiskPsaForcedLaborXinjiangName, nil
	case "basel_aml":
		return RiskBaselAml, nil
	case "aspi_uyghur_forced_labor_report_entity_adjacent":
		return RiskAspiUyghurForcedLaborReportEntityAdjacent, nil
	case "owned_by_cmic_entity":
		return RiskOwnedByCmicEntity, nil
	case "ofac_sdn":
		return RiskOfacSdn, nil
	case "owned_by_bis_meu_entity":
		return RiskOwnedByBisMeuEntity, nil
	case "forced_labor_aspi_origin_subtier_product_blueprint":
		return RiskForcedLaborAspiOriginSubtierProductBlueprint, nil
	case "owned_by_forced_labor_xinjiang_uflpa":
		return RiskOwnedByForcedLaborXinjiangUflpa, nil
	case "forced_labor_xinjiang_uflpa_adjacent":
		return RiskForcedLaborXinjiangUflpaAdjacent, nil
	case "owned_by_wro_entity":
		return RiskOwnedByWroEntity, nil
	case "psa_military_civil_fusion":
		return RiskPsaMilitaryCivilFusion, nil
	case "forced_labor_aspi_origin_subtier":
		return RiskForcedLaborAspiOriginSubtier, nil
	case "former_wro_entity":
		return RiskFormerWroEntity, nil
	case "forced_labor_wro_origin_direct":
		return RiskForcedLaborWroOriginDirect, nil
	case "owned_by_sheffield_hallam_university_reports_forced_labor_entity":
		return RiskOwnedBySheffieldHallamUniversityReportsForcedLaborEntity, nil
	case "eu_sanctioned":
		return RiskEuSanctioned, nil
	case "aspi_uyghur_forced_labor_report_entity":
		return RiskAspiUyghurForcedLaborReportEntity, nil
	case "forced_labor_china_keywords":
		return RiskForcedLaborChinaKeywords, nil
	case "exports_bis_high_priority_items_critical_components":
		return RiskExportsBisHighPriorityItemsCriticalComponents, nil
	case "soe_adjacent":
		return RiskSoeAdjacent, nil
	case "forced_labor_sheffield_hallam_university_reports_origin_subtier_product_blueprint":
		return RiskForcedLaborSheffieldHallamUniversityReportsOriginSubtierProductBlueprint, nil
	case "state_owned":
		return RiskStateOwned, nil
	case "psa_sheffield_hallam_university_forced_labor_entity":
		return RiskPsaSheffieldHallamUniversityForcedLaborEntity, nil
	case "export_controls_adjacent":
		return RiskExportControlsAdjacent, nil
	case "export_to_soe":
		return RiskExportToSoe, nil
	case "psa_sanctioned":
		return RiskPsaSanctioned, nil
	case "ofac_50_percent_rule":
		return RiskOfac50PercentRule, nil
	case "owner_of_export_controls_entity":
		return RiskOwnerOfExportControlsEntity, nil
	case "forced_labor_sheffield_hallam_university_reports_origin_subtier":
		return RiskForcedLaborSheffieldHallamUniversityReportsOriginSubtier, nil
	case "meu_list_contractors":
		return RiskMeuListContractors, nil
	case "forced_labor_xinjiang_cotton_entity":
		return RiskForcedLaborXinjiangCottonEntity, nil
	case "owner_of_forced_labor_xinjiang_uflpa":
		return RiskOwnerOfForcedLaborXinjiangUflpa, nil
	case "pep":
		return RiskPep, nil
	case "owned_by_entity_in_export_controls":
		return RiskOwnedByEntityInExportControls, nil
	case "psa_forced_labor_aspi_uyghur":
		return RiskPsaForcedLaborAspiUyghur, nil
	case "bis_boycott_requester_list":
		return RiskBisBoycottRequesterList, nil
	case "eu_50_percent_rule":
		return RiskEu50PercentRule, nil
	case "forced_labor_xinjiang_operations":
		return RiskForcedLaborXinjiangOperations, nil
	case "forced_labor_wro_origin_subtier":
		return RiskForcedLaborWroOriginSubtier, nil
	case "psa_forced_labor_xinjiang_cotton_entity":
		return RiskPsaForcedLaborXinjiangCottonEntity, nil
	case "reputational_risk_other":
		return RiskReputationalRiskOther, nil
	case "export_to_sanctioned":
		return RiskExportToSanctioned, nil
	case "sheffield_hallam_university_forced_labor_reports_entity_adjacent":
		return RiskSheffieldHallamUniversityForcedLaborReportsEntityAdjacent, nil
	case "former_soe":
		return RiskFormerSoe, nil
	case "reputational_risk_organized_crime":
		return RiskReputationalRiskOrganizedCrime, nil
	case "reputational_risk_forced_labor":
		return RiskReputationalRiskForcedLabor, nil
	case "imports_bis_high_priority_items_critical_components":
		return RiskImportsBisHighPriorityItemsCriticalComponents, nil
	case "owner_of_sheffield_hallam_university_reports_forced_labor_entity":
		return RiskOwnerOfSheffieldHallamUniversityReportsForcedLaborEntity, nil
	case "cpi_score":
		return RiskCpiScore, nil
	case "psa_sheffield_hallam_university_useful_resources":
		return RiskPsaSheffieldHallamUniversityUsefulResources, nil
	case "psa_wro_entity":
		return RiskPsaWroEntity, nil
	case "psa_entity_licensed_with_fsb_rf":
		return RiskPsaEntityLicensedWithFsbRf, nil
	case "forced_labor_wro_origin_subtier_product_blueprint":
		return RiskForcedLaborWroOriginSubtierProductBlueprint, nil
	case "psa_forced_labor_xinjiang_uflpa":
		return RiskPsaForcedLaborXinjiangUflpa, nil
	case "owner_of_wro_entity":
		return RiskOwnerOfWroEntity, nil
	case "military_civil_fusion":
		return RiskMilitaryCivilFusion, nil
	case "forced_labor_xinjiang_registration":
		return RiskForcedLaborXinjiangRegistration, nil
	case "forced_labor_xinjiang_name":
		return RiskForcedLaborXinjiangName, nil
	case "owned_by_aspi_forced_labor_entity":
		return RiskOwnedByAspiForcedLaborEntity, nil
	case "reputational_risk_terrorism":
		return RiskReputationalRiskTerrorism, nil
	case "formerly_sanctioned":
		return RiskFormerlySanctioned, nil
	case "owned_by_section_1260h_entity":
		return RiskOwnedBySection1260HEntity, nil
	case "sheffield_hallam_university_forced_labor_reports_intermediary_entity":
		return RiskSheffieldHallamUniversityForcedLaborReportsIntermediaryEntity, nil
	case "pep_adjacent":
		return RiskPepAdjacent, nil
	case "owner_of_forced_labor_xinjiang_entity":
		return RiskOwnerOfForcedLaborXinjiangEntity, nil
	case "law_enforcement_action":
		return RiskLawEnforcementAction, nil
	case "owned_by_soe":
		return RiskOwnedBySoe, nil
	case "owned_by_military_civil_fusion":
		return RiskOwnedByMilitaryCivilFusion, nil
	case "entity_licensed_with_fsb_rf":
		return RiskEntityLicensedWithFsbRf, nil
	case "psa_forced_labor_xinjiang_registration":
		return RiskPsaForcedLaborXinjiangRegistration, nil
	case "forced_labor_sheffield_hallam_university_reports_origin_direct":
		return RiskForcedLaborSheffieldHallamUniversityReportsOriginDirect, nil
	case "psa_forced_labor_xinjiang_geospatial":
		return RiskPsaForcedLaborXinjiangGeospatial, nil
	case "wro_entity_adjacent":
		return RiskWroEntityAdjacent, nil
	case "reputational_risk_cybercrime":
		return RiskReputationalRiskCybercrime, nil
	case "psa_forced_labor_xinjiang_operations":
		return RiskPsaForcedLaborXinjiangOperations, nil
	case "owner_of_soe":
		return RiskOwnerOfSoe, nil
	case "psa_bis_boycott_requester_list":
		return RiskPsaBisBoycottRequesterList, nil
	case "forced_labor_aspi_origin_direct":
		return RiskForcedLaborAspiOriginDirect, nil
	case "exports_bis_high_priority_items":
		return RiskExportsBisHighPriorityItems, nil
	case "forced_labor_uflpa_origin_subtier":
		return RiskForcedLaborUflpaOriginSubtier, nil
	case "owner_of_regulatory_action_entity":
		return RiskOwnerOfRegulatoryActionEntity, nil
	case "psa_sheffield_hallam_university_intermediary_entity":
		return RiskPsaSheffieldHallamUniversityIntermediaryEntity, nil
	case "forced_labor_xinjiang_uflpa":
		return RiskForcedLaborXinjiangUflpa, nil
	case "psa_state_owned":
		return RiskPsaStateOwned, nil
	case "forced_labor_uflpa_origin_direct":
		return RiskForcedLaborUflpaOriginDirect, nil
	case "forced_labor_xinjiang_origin_subtier_product_blueprint":
		return RiskForcedLaborXinjiangOriginSubtierProductBlueprint, nil
	case "owned_by_sanctioned_entity":
		return RiskOwnedBySanctionedEntity, nil
	}
	var t Risk
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Risk) Ptr() *Risk {
	return &r
}

type RiskIntelligenceData struct {
	Editable    *bool                       `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                    `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                         `json:"record_count" url:"record_count"`
	Properties  *RiskIntelligenceProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RiskIntelligenceData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskIntelligenceData) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskIntelligenceData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskIntelligenceData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskIntelligenceData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// An attribute for risk intelligence metadata
type RiskIntelligenceInfo struct {
	Limit  int                     `json:"limit" url:"limit"`
	Size   *QualifiedCount         `json:"size,omitempty" url:"size,omitempty"`
	Data   []*RiskIntelligenceData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}             `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                    `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RiskIntelligenceInfo) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskIntelligenceInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskIntelligenceInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskIntelligenceInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskIntelligenceInfo) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RiskIntelligenceProperties struct {
	// Government authority issuing the enforcement or risk intelligence action
	Authority *string `json:"authority,omitempty" url:"authority,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// Official list where the entity's risk information or enforcement action is recorded
	List *string `json:"list,omitempty" url:"list,omitempty"`
	// Specific to sanctions risk. Sanctions program under which the entity is designated.
	Program *string `json:"program,omitempty" url:"program,omitempty"`
	// Explanation or legal basis for the risk intelligence
	Reason *string `json:"reason,omitempty" url:"reason,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// Type of risk intelligence
	Type Tag `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RiskIntelligenceProperties) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskIntelligenceProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskIntelligenceProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskIntelligenceProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskIntelligenceProperties) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SharesData struct {
	Editable    *bool             `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string          `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int               `json:"record_count" url:"record_count"`
	Properties  *SharesProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SharesData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SharesData) UnmarshalJSON(data []byte) error {
	type unmarshaler SharesData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SharesData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SharesData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Shares associated with an entity (e.g., number of shares issued by a company or number of shares held by a shareholder)
type SharesInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*SharesData   `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SharesInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SharesInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler SharesInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SharesInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SharesInfo) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SharesProperties struct {
	// The currency of the monetary_value
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// The total monetary value of the shares
	MonetaryValue *float64 `json:"monetary_value,omitempty" url:"monetary_value,omitempty"`
	// The number of shares held, issued, etc.
	NumShares *float64 `json:"num_shares,omitempty" url:"num_shares,omitempty"`
	// The percentage of shares owned
	Percentage *float64 `json:"percentage,omitempty" url:"percentage,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// A string describing the type of shares (e.g., "Class B", "Protected cell shares")
	Type *string `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SharesProperties) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SharesProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler SharesProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SharesProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SharesProperties) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Status context enums describe the different types of statuses that can be represented in a status attribute.
type StatusContext string

const (
	// e.g., "Broker", "Intermediary". An individual who acts as an intermediary for trading, lending, and investing purposes.
	StatusContextBrokerLicense StatusContext = "broker_license"
	// e.g., "Investment Advisor". An individual who provides investment advice and/or securities analysis services for a fee.
	StatusContextInvestmentAdvisorLicense StatusContext = "investment_advisor_license"
	// e.g., "Sole proprietor", "Sole proprietorship", "Individual entrepreneurship", "Sole trader".
	StatusContextSoleProprietorshipStatus StatusContext = "sole_proprietorship_status"
	// e.g., "Partnership". A basic form of partnership under common law. A company entity, typically unincorporated, comprised of two or more partners who agree to share in all assets, profits, and liabilities of a business.
	StatusContextGeneralPartnershipStatus StatusContext = "general_partnership_status"
	// e.g., "LLP", "Limited-Liability Limited Partnership". A partnership in which some or all partners have limited liabilities. Each partner's liabilities are limited to the amount they contribute to the business.
	StatusContextLimitedLiabilityPartnershipStatus StatusContext = "limited_liability_partnership_status"
)

func NewStatusContextFromString(s string) (StatusContext, error) {
	switch s {
	case "broker_license":
		return StatusContextBrokerLicense, nil
	case "investment_advisor_license":
		return StatusContextInvestmentAdvisorLicense, nil
	case "sole_proprietorship_status":
		return StatusContextSoleProprietorshipStatus, nil
	case "general_partnership_status":
		return StatusContextGeneralPartnershipStatus, nil
	case "limited_liability_partnership_status":
		return StatusContextLimitedLiabilityPartnershipStatus, nil
	}
	var t StatusContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s StatusContext) Ptr() *StatusContext {
	return &s
}

type StatusData struct {
	Editable    *bool             `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string          `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int               `json:"record_count" url:"record_count"`
	Properties  *StatusProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StatusData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StatusData) UnmarshalJSON(data []byte) error {
	type unmarshaler StatusData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StatusData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StatusData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The status of an entity. This attribute is used to indicate details such as registration, operating, or liquidation status as well as an entity's license or sole proprietorship status.
type StatusInfo struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Data   []*StatusData   `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}     `json:"next,omitempty" url:"next,omitempty"`
	Offset *int            `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StatusInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StatusInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler StatusInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StatusInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StatusInfo) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StatusProperties struct {
	// The type of status, such as license or partnership type
	Context *StatusContext `json:"context,omitempty" url:"context,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// The raw status text
	Text *string `json:"text,omitempty" url:"text,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The status, normalized to one of the status enums
	Value *CompanyStatus `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *StatusProperties) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *StatusProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler StatusProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = StatusProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *StatusProperties) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Risk tags describe risk associated with an entity.
type Tag string

const (
	TagPep                                        Tag = "pep"
	TagStateOwned                                 Tag = "state_owned"
	TagFormerSoe                                  Tag = "former_soe"
	TagSanctioned                                 Tag = "sanctioned"
	TagFormerlySanctioned                         Tag = "formerly_sanctioned"
	TagReputationalRiskTerrorism                  Tag = "reputational_risk_terrorism"
	TagReputationalRiskOrganizedCrime             Tag = "reputational_risk_organized_crime"
	TagReputationalRiskFinancialCrime             Tag = "reputational_risk_financial_crime"
	TagReputationalRiskBriberyAndCorruption       Tag = "reputational_risk_bribery_and_corruption"
	TagReputationalRiskOther                      Tag = "reputational_risk_other"
	TagReputationalRiskCybercrime                 Tag = "reputational_risk_cybercrime"
	TagReputationalRiskModernSlavery              Tag = "reputational_risk_modern_slavery"
	TagRegulatoryAction                           Tag = "regulatory_action"
	TagLawEnforcementAction                       Tag = "law_enforcement_action"
	TagExportControls                             Tag = "export_controls"
	TagForcedLaborXinjiangContractors             Tag = "forced_labor_xinjiang_contractors"
	TagWroEntity                                  Tag = "wro_entity"
	TagUflpaEntity                                Tag = "uflpa_entity"
	TagSheffieldHallamUniversityForcedLaborEntity Tag = "sheffield_hallam_university_forced_labor_entity"
	TagAspiUyghurForcedLaborReportEntity          Tag = "aspi_uyghur_forced_labor_report_entity"
	TagBisBoycottRequesterList                    Tag = "bis_boycott_requester_list"
)

func NewTagFromString(s string) (Tag, error) {
	switch s {
	case "pep":
		return TagPep, nil
	case "state_owned":
		return TagStateOwned, nil
	case "former_soe":
		return TagFormerSoe, nil
	case "sanctioned":
		return TagSanctioned, nil
	case "formerly_sanctioned":
		return TagFormerlySanctioned, nil
	case "reputational_risk_terrorism":
		return TagReputationalRiskTerrorism, nil
	case "reputational_risk_organized_crime":
		return TagReputationalRiskOrganizedCrime, nil
	case "reputational_risk_financial_crime":
		return TagReputationalRiskFinancialCrime, nil
	case "reputational_risk_bribery_and_corruption":
		return TagReputationalRiskBriberyAndCorruption, nil
	case "reputational_risk_other":
		return TagReputationalRiskOther, nil
	case "reputational_risk_cybercrime":
		return TagReputationalRiskCybercrime, nil
	case "reputational_risk_modern_slavery":
		return TagReputationalRiskModernSlavery, nil
	case "regulatory_action":
		return TagRegulatoryAction, nil
	case "law_enforcement_action":
		return TagLawEnforcementAction, nil
	case "export_controls":
		return TagExportControls, nil
	case "forced_labor_xinjiang_contractors":
		return TagForcedLaborXinjiangContractors, nil
	case "wro_entity":
		return TagWroEntity, nil
	case "uflpa_entity":
		return TagUflpaEntity, nil
	case "sheffield_hallam_university_forced_labor_entity":
		return TagSheffieldHallamUniversityForcedLaborEntity, nil
	case "aspi_uyghur_forced_labor_report_entity":
		return TagAspiUyghurForcedLaborReportEntity, nil
	case "bis_boycott_requester_list":
		return TagBisBoycottRequesterList, nil
	}
	var t Tag
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t Tag) Ptr() *Tag {
	return &t
}

type TranslatedNameData struct {
	Editable    *bool                     `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                  `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                       `json:"record_count" url:"record_count"`
	Properties  *TranslatedNameProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TranslatedNameData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TranslatedNameData) UnmarshalJSON(data []byte) error {
	type unmarshaler TranslatedNameData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TranslatedNameData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TranslatedNameData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// A name that has been translated to English
type TranslatedNameInfo struct {
	Limit  int                   `json:"limit" url:"limit"`
	Size   *QualifiedCount       `json:"size,omitempty" url:"size,omitempty"`
	Data   []*TranslatedNameData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}           `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                  `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TranslatedNameInfo) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TranslatedNameInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler TranslatedNameInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TranslatedNameInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TranslatedNameInfo) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TranslatedNameProperties struct {
	// The type of translation
	Context *TranslationContext `json:"context,omitempty" url:"context,omitempty"`
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// The original name
	Original *string `json:"original,omitempty" url:"original,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The name, as text
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TranslatedNameProperties) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TranslatedNameProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler TranslatedNameProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TranslatedNameProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TranslatedNameProperties) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

// Translation context enums describe different types of translations.
type TranslationContext string

const (
	// A translation made using a Sayari machine learning model
	TranslationContextSayariMachineTranslation TranslationContext = "sayari_machine_translation"
	// A Pinyin transliteration
	TranslationContextPinyin TranslationContext = "pinyin"
	// A translation made using Google Translate API
	TranslationContextGoogleTranslate TranslationContext = "google_translate"
)

func NewTranslationContextFromString(s string) (TranslationContext, error) {
	switch s {
	case "sayari_machine_translation":
		return TranslationContextSayariMachineTranslation, nil
	case "pinyin":
		return TranslationContextPinyin, nil
	case "google_translate":
		return TranslationContextGoogleTranslate, nil
	}
	var t TranslationContext
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t TranslationContext) Ptr() *TranslationContext {
	return &t
}

// These enums describe the unit of measurement (i.e., using SI base units) for some dimension of an entity.
type Unit string

const (
	// Indicates meters (m)
	UnitMetre Unit = "metre"
	// Indicates kilograms (kg)
	UnitKilogram Unit = "kilogram"
	// Used to show the number of units of a product
	UnitUnit Unit = "unit"
)

func NewUnitFromString(s string) (Unit, error) {
	switch s {
	case "metre":
		return UnitMetre, nil
	case "kilogram":
		return UnitKilogram, nil
	case "unit":
		return UnitUnit, nil
	}
	var t Unit
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u Unit) Ptr() *Unit {
	return &u
}

type WeakIdentifierData struct {
	Editable    *bool                     `json:"editable,omitempty" url:"editable,omitempty"`
	Record      []string                  `json:"record,omitempty" url:"record,omitempty"`
	RecordCount int                       `json:"record_count" url:"record_count"`
	Properties  *WeakIdentifierProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WeakIdentifierData) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WeakIdentifierData) UnmarshalJSON(data []byte) error {
	type unmarshaler WeakIdentifierData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WeakIdentifierData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WeakIdentifierData) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// A non-unique ID number, like a partially redacted tax ID or a registry identifier, whose value and type may be shared by multiple entities
type WeakIdentifierInfo struct {
	Limit  int                   `json:"limit" url:"limit"`
	Size   *QualifiedCount       `json:"size,omitempty" url:"size,omitempty"`
	Data   []*WeakIdentifierData `json:"data,omitempty" url:"data,omitempty"`
	Next   interface{}           `json:"next,omitempty" url:"next,omitempty"`
	Offset *int                  `json:"offset,omitempty" url:"offset,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WeakIdentifierInfo) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WeakIdentifierInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler WeakIdentifierInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WeakIdentifierInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WeakIdentifierInfo) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type WeakIdentifierProperties struct {
	// as-of date
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`
	// The type of the identifier, including the country/jurisdiction that issued it
	Type WeakIdentifierType `json:"type" url:"type"`
	// The text value of the identifier
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *WeakIdentifierProperties) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *WeakIdentifierProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler WeakIdentifierProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = WeakIdentifierProperties(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *WeakIdentifierProperties) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

// This includes all weak (non-unique) identifiers in Sayari's database.
type WeakIdentifierType string

const (
	// A string that is thought to be an ID number, but whose type is unknown
	WeakIdentifierTypeUnknown WeakIdentifierType = "unknown"
	// Partial Mexican RFC
	WeakIdentifierTypeMxPartialRfcPerson WeakIdentifierType = "mx_partial_rfc_person"
	// Russia OKTMO (Russian Classification of Territories of Municipal Formations)
	WeakIdentifierTypeRuOktmo WeakIdentifierType = "ru_oktmo"
	// Russian KPP, or tax registration event code
	WeakIdentifierTypeRuKpp WeakIdentifierType = "ru_kpp"
	// A unique identifier that is reissued when a company dissolves. Applies to Russian companies.
	WeakIdentifierTypeRuOkpo WeakIdentifierType = "ru_okpo"
	// A passport number whose country of origin is not known
	WeakIdentifierTypeUnknownPassport WeakIdentifierType = "unknown_passport"
	// An identifier from the Kosovo company registry
	WeakIdentifierTypeRksKtaNumber WeakIdentifierType = "rks_kta_number"
	// Individual taxpayer registry identification in Brazil. Learn more [here](https://en.wikipedia.org/wiki/Cadastro_de_Pessoas_F%C3%ADsicas)
	WeakIdentifierTypeBraPartialCpf WeakIdentifierType = "bra_partial_cpf"
	// Identification number for Venezuelan comisarios
	WeakIdentifierTypeVenColegiadoNumber WeakIdentifierType = "ven_colegiado_number"
	// Panama Folio No.
	WeakIdentifierTypePanFolio WeakIdentifierType = "pan_folio"
	// A unique identifier that is reissued when a company dissolves. Applies to Kyrgyz companies.
	WeakIdentifierTypeKgzOkpo WeakIdentifierType = "kgz_okpo"
	// Kyrgyzstan INN
	WeakIdentifierTypeKgzInn                WeakIdentifierType = "kgz_inn"
	WeakIdentifierTypeLbnRegistrationNumber WeakIdentifierType = "lbn_registration_number"
	// Number in registry per EBR
	WeakIdentifierTypeItaEbrRegNumber WeakIdentifierType = "ita_ebr_reg_number"
	// EBR short search code
	WeakIdentifierTypeItaEbrShortSearchCode WeakIdentifierType = "ita_ebr_short_search_code"
	// CVE number in Chile Santiago Gazette
	WeakIdentifierTypeChlSantiagoGazetteCve WeakIdentifierType = "chl_santiago_gazette_cve"
	// Bermuda registration number
	WeakIdentifierTypeBmuRegistrationNumber WeakIdentifierType = "bmu_registration_number"
	// Brazilian Lawyer Identification number
	WeakIdentifierTypeBrazilianOab WeakIdentifierType = "brazilian_oab"
	// Iranian registration number
	WeakIdentifierTypeIrnRegNumber WeakIdentifierType = "irn_reg_number"
	// Mexican FME
	WeakIdentifierTypeMxFme WeakIdentifierType = "mx_fme"
	// Learn more [here](https://www.wikidata.org/wiki/Property:P3125)
	WeakIdentifierTypeUkrEdrpou WeakIdentifierType = "ukr_edrpou"
	// Label for various license numbers extracted from EGRUL (Russia Federal Tax Registry) documents
	WeakIdentifierTypeRuLicenseNumber WeakIdentifierType = "ru_license_number"
	// Unique call sign for vessels
	WeakIdentifierTypeMaritimeCallSign WeakIdentifierType = "maritime_call_sign"
	// Registration numbers for North Korean ships
	WeakIdentifierTypePrkShipRegNo WeakIdentifierType = "prk_ship_reg_no"
	// National identification number for enterprises and associations (Senegal)
	WeakIdentifierTypeCofiCode WeakIdentifierType = "cofi_code"
	// Foreign entity accreditation number
	WeakIdentifierTypeRuNza WeakIdentifierType = "ru_nza"
	// Unique company ID from Inspección General de Justicia in Argentina
	WeakIdentifierTypeArgIgjNumber WeakIdentifierType = "arg_igj_number"
	// Brazil Litigation Case No.
	WeakIdentifierTypeUnknownBraCaseNumber WeakIdentifierType = "unknown_bra_case_number"
	// Iraq Provision Card No.
	WeakIdentifierTypeIrqProvisionCard WeakIdentifierType = "irq_provision_card"
	// Mobile Home Serial Number
	WeakIdentifierTypeMblHmSn WeakIdentifierType = "mbl_hm_sn"
	// Mobile Home HUD Number
	WeakIdentifierTypeMblHmHudNum WeakIdentifierType = "mbl_hm_hud_num"
	// Mobile Home Title Number
	WeakIdentifierTypeMblHmTitleNum WeakIdentifierType = "mbl_hm_title_num"
	// Time stamp unique to each politician's filing on Declaranet
	WeakIdentifierTypeMexDeclaranetAcuse WeakIdentifierType = "mex_declaranet_acuse"
	// The company number given to each company listed in Handelsregister, the German Commercial Register. It is not unique unless combined with the district court XJustiz ID, which this weak identifier does not contain because in some cases it is not provided.
	WeakIdentifierTypeDeuRegisternummer WeakIdentifierType = "deu_registernummer"
	// A national ID number whose country of origin is not known
	WeakIdentifierTypeUnknownNationalIdNum WeakIdentifierType = "unknown_national_id_num"
	// A civil registration number whose country of origin is not known
	WeakIdentifierTypeUnknownCivilRegNum WeakIdentifierType = "unknown_civil_reg_num"
	// A residency number whose country of origin is not known
	WeakIdentifierTypeUnknownResidencyNum WeakIdentifierType = "unknown_residency_num"
	// A folio ID Number whose country of origin is not known
	WeakIdentifierTypeUnknownFolioIdNum WeakIdentifierType = "unknown_folio_id_num"
	// A commercial registration number of unknown origin
	WeakIdentifierTypeUnknownCommercialRegisterId WeakIdentifierType = "unknown_commercial_register_id"
	// A chamber of commerce number of unknown origin
	WeakIdentifierTypeUnknownChamberOfCommerceId WeakIdentifierType = "unknown_chamber_of_commerce_id"
	// A license number of unknown origin
	WeakIdentifierTypeUnknownLicenseNum WeakIdentifierType = "unknown_license_num"
	// An industrial license number of unknown origin
	WeakIdentifierTypeUnknownIndustrialLicenseNum WeakIdentifierType = "unknown_industrial_license_num"
	// Czechia file number from MOJ registry
	WeakIdentifierTypeCzeFileNumber WeakIdentifierType = "cze_file_number"
	// Mexican trademark application number
	WeakIdentifierTypeMexTmAppNo WeakIdentifierType = "mex_tm_app_no"
	// Mexican trademark registration number
	WeakIdentifierTypeMexTmRegNo WeakIdentifierType = "mex_tm_reg_no"
	// Company number from Jordan corporate registry
	WeakIdentifierTypeJordanCompanyNo WeakIdentifierType = "jordan_company_no"
	// Part of a Qichacha URL, used to uniquely identify people within the site
	WeakIdentifierTypeCnQccInternalId WeakIdentifierType = "cn_qcc_internal_id"
	// Weak identifier found in sole proprietor source
	WeakIdentifierTypeJorSolPropInstitutionNumber WeakIdentifierType = "jor_sol_prop_institution_number"
	// USA North Carolina SOS corporation number
	WeakIdentifierTypeUsaNcCorpNo WeakIdentifierType = "usa_nc_corp_no"
	// USA New Mexico Secretary of State License ID
	WeakIdentifierTypeUsaNmLicenseId WeakIdentifierType = "usa_nm_license_id"
	// Cambodia tax identification number
	WeakIdentifierTypeKhmTinNumber WeakIdentifierType = "khm_tin_number"
	// Entity ID from USA Missouri Corporate Registry
	WeakIdentifierTypeUsaMoEntityId WeakIdentifierType = "usa_mo_entity_id"
	// Corporation Number from USA Missouri Corporate Registry. Used on SOS search.
	WeakIdentifierTypeUsaMoCorpNumber WeakIdentifierType = "usa_mo_corp_number"
	// Case number for legal matters from Macao Tribunais da RAEM Judgments
	WeakIdentifierTypeMacRaemCaseNumber WeakIdentifierType = "mac_raem_case_number"
	// Notary office number for notaries in Honduras Tegucigalpa source
	WeakIdentifierTypeHndTegucigalpaNotary WeakIdentifierType = "hnd_tegucigalpa_notary"
	// Lebanese family number
	WeakIdentifierTypeLbnFamilyNumber WeakIdentifierType = "lbn_family_number"
	// Bexar Appraisal District GEO ID
	WeakIdentifierTypeTxBexarPropertyGeoId WeakIdentifierType = "tx_bexar_property_geo_id"
	// Pakistan CNIC family number
	WeakIdentifierTypePakCnicFamilyNo WeakIdentifierType = "pak_cnic_family_no"
	// Romanian Commercial Register ID (concatenated from jud_com, nr_com, and an_com from ROU/taxpayers)
	WeakIdentifierTypeRouCommercialRegisterId WeakIdentifierType = "rou_commercial_register_id"
	// Partial South African ID number for individuals
	WeakIdentifierTypeSouthAfricaPartialIdNumber WeakIdentifierType = "south_africa_partial_id_number"
	// North Korea-China trade internal ID number
	WeakIdentifierTypePrkInternalTradeId WeakIdentifierType = "prk_internal_trade_id"
	// Chinese customs registration code. Downgraded to weak identifier.
	WeakIdentifierTypeChnCustomsRegistrationCode WeakIdentifierType = "chn_customs_registration_code"
	// Austrian Company Register Number (no longer used)
	WeakIdentifierTypeAutFormerCrNo WeakIdentifierType = "aut_former_cr_no"
	// Austrian National Bank ID Number
	WeakIdentifierTypeAutNatlBankNo WeakIdentifierType = "aut_natl_bank_no"
	// Latvian Personal ID Number (last 5 digits masked)
	WeakIdentifierTypeLvaPersonIdMasked WeakIdentifierType = "lva_person_id_masked"
	// Latvian Court Case ID Number
	WeakIdentifierTypeLvaCourtCaseId WeakIdentifierType = "lva_court_case_id"
	// Internal identifier for legal persons from CHN cninfo data
	WeakIdentifierTypeChnCninfoLegalPersonId WeakIdentifierType = "chn_cninfo_legal_person_id"
	// Kosovo Business No.
	WeakIdentifierTypeRksBusinessNumber WeakIdentifierType = "rks_business_number"
	// A fiscal number from the Kosovo company registry
	WeakIdentifierTypeRksFiscalNumber WeakIdentifierType = "rks_fiscal_number"
	// A tax identifier number (NIF) in Madagascar.
	WeakIdentifierTypeMdgNifNumber WeakIdentifierType = "mdg_nif_number"
	// A tax identifier number (RCS) in Madagascar.
	WeakIdentifierTypeMdgRcsNumber WeakIdentifierType = "mdg_rcs_number"
	// Value-added tax ID number
	WeakIdentifierTypeVat WeakIdentifierType = "vat"
	// Site number of business registered in Chicago, Illinois, business license registry (unique to account number)
	WeakIdentifierTypeUsaIlChicagoSiteNumber WeakIdentifierType = "usa_il_chicago_site_number"
	// Ticker symbol for securities without exchange information
	WeakIdentifierTypeUsaGenericTicker WeakIdentifierType = "usa_generic_ticker"
	// A certificate number for the National Registry of Contractors in Venezuela
	WeakIdentifierTypeVenRncNumber WeakIdentifierType = "ven_rnc_number"
	// Identifier for shipment transactions
	WeakIdentifierTypeUsaImportsSystemIdentityId WeakIdentifierType = "usa_imports_system_identity_id"
	// Bill of lading number for Colombian trade data
	WeakIdentifierTypeColBillOfLading WeakIdentifierType = "col_bill_of_lading"
	// Colombian SECOP internal ID
	WeakIdentifierTypeColSecopNo WeakIdentifierType = "col_secop_no"
	// The register REGON serves as the national official Register of National Economy Entities.
	WeakIdentifierTypePolRegonNumber WeakIdentifierType = "pol_regon_number"
	// Tax identification number from Poland
	WeakIdentifierTypePolNipNumber WeakIdentifierType = "pol_nip_number"
	// Bill of lading number for trade data
	WeakIdentifierTypeBillOfLading WeakIdentifierType = "bill_of_lading"
	// Panama IBC RUC
	WeakIdentifierTypePanIbcRuc WeakIdentifierType = "pan_ibc_ruc"
	// Old Pakistan company code
	WeakIdentifierTypePakOldCompanyCode WeakIdentifierType = "pak_old_company_code"
	// Japan Ministry of Land, Infrastructure, Transport and Tourism permit number
	WeakIdentifierTypeJpnPermitNo WeakIdentifierType = "jpn_permit_no"
	// Dominica Business Registry Entity Number
	WeakIdentifierTypeDmaCorporateRegistryEntityNum WeakIdentifierType = "dma_corporate_registry_entity_num"
	// Antigua and Barbuda Business Registry Entity Number
	WeakIdentifierTypeAtgCorporateRegistryEntityNum WeakIdentifierType = "atg_corporate_registry_entity_num"
	// St. Lucia Business Registry Entity Number
	WeakIdentifierTypeLcaCorporateRegistryEntityNum WeakIdentifierType = "lca_corporate_registry_entity_num"
	// Manifiesto number for Venezuelan shipments
	WeakIdentifierTypeVenManifiestoNumber WeakIdentifierType = "ven_manifiesto_number"
	// Matricula mercantil number, which is non-unique across different chambers of commerce
	WeakIdentifierTypeColMatriculaMercantil WeakIdentifierType = "col_matricula_mercantil"
	// Maritime Mobile Service Identity number. Learn more [here](https://en.wikipedia.org/wiki/Maritime_Mobile_Service_Identity)
	WeakIdentifierTypeMaritimeMobileServiceIdentity WeakIdentifierType = "maritime_mobile_service_identity"
	// Former USA/IRS FEI/EIN Number
	WeakIdentifierTypeUsaFormerFein WeakIdentifierType = "usa_former_fein"
	// USA Customs and Border Protection Withhold Release Order ID
	WeakIdentifierTypeUsaCbpWroId WeakIdentifierType = "usa_cbp_wro_id"
	// China Classification Society Ship Class Number
	WeakIdentifierTypeCcsShipClassNumber WeakIdentifierType = "ccs_ship_class_number"
	// Partial Turkish Central Registry Number System (MERSIS) number
	WeakIdentifierTypeTurPartialMersisNumber WeakIdentifierType = "tur_partial_mersis_number"
	// Turkey municipal trade registry ID number. Assigned by municipal chambers of commerce in Turkey.
	WeakIdentifierTypeTurOfficeRegistrationNumber WeakIdentifierType = "tur_office_registration_number"
	// An identification card or passport document for people in Venezuela
	WeakIdentifierTypePartialVenCedula WeakIdentifierType = "partial_ven_cedula"
	// Russia Central Bank ID
	WeakIdentifierTypeRusCbrId WeakIdentifierType = "rus_cbr_id"
	// Georgian state registration number
	WeakIdentifierTypeGeoStateRegistrationNumber WeakIdentifierType = "geo_state_registration_number"
	// Bosnia and Herzegovina business register registration number
	WeakIdentifierTypeBihMbsNumber WeakIdentifierType = "bih_mbs_number"
	// UK entity ID number assigned to entities registered in the UK Government Grants Information System
	WeakIdentifierTypeGbrGrantInfoNumber WeakIdentifierType = "gbr_grant_info_number"
	// Paraguay Shipment Number
	WeakIdentifierTypePryShipmentNumber WeakIdentifierType = "pry_shipment_number"
	// Unique identifier for Argentinian imports and exports
	WeakIdentifierTypeArgImportExportId WeakIdentifierType = "arg_import_export_id"
	// Internal ID for Costa Rica comexport data (shipping operation number)
	WeakIdentifierTypeCriOpNo WeakIdentifierType = "cri_op_no"
	// Weak AUS state registration number. Registration number assigned when legal entity is originally registered by the Australian State.
	WeakIdentifierTypeAusStateRegNumber WeakIdentifierType = "aus_state_reg_number"
	// Internal ID for Hungarian companies by Opten Ltd
	WeakIdentifierTypeHunOptenId WeakIdentifierType = "hun_opten_id"
	// Unique Ireland ID number. Assigned to every legal entity registered with Ireland Companies Registration Office.
	WeakIdentifierTypeIrlRegistrationNo WeakIdentifierType = "irl_registration_no"
	// A temporary malformed type
	WeakIdentifierTypeMalformedMmrPriorRegNo WeakIdentifierType = "malformed mmr_prior_reg_no"
)

func NewWeakIdentifierTypeFromString(s string) (WeakIdentifierType, error) {
	switch s {
	case "unknown":
		return WeakIdentifierTypeUnknown, nil
	case "mx_partial_rfc_person":
		return WeakIdentifierTypeMxPartialRfcPerson, nil
	case "ru_oktmo":
		return WeakIdentifierTypeRuOktmo, nil
	case "ru_kpp":
		return WeakIdentifierTypeRuKpp, nil
	case "ru_okpo":
		return WeakIdentifierTypeRuOkpo, nil
	case "unknown_passport":
		return WeakIdentifierTypeUnknownPassport, nil
	case "rks_kta_number":
		return WeakIdentifierTypeRksKtaNumber, nil
	case "bra_partial_cpf":
		return WeakIdentifierTypeBraPartialCpf, nil
	case "ven_colegiado_number":
		return WeakIdentifierTypeVenColegiadoNumber, nil
	case "pan_folio":
		return WeakIdentifierTypePanFolio, nil
	case "kgz_okpo":
		return WeakIdentifierTypeKgzOkpo, nil
	case "kgz_inn":
		return WeakIdentifierTypeKgzInn, nil
	case "lbn_registration_number":
		return WeakIdentifierTypeLbnRegistrationNumber, nil
	case "ita_ebr_reg_number":
		return WeakIdentifierTypeItaEbrRegNumber, nil
	case "ita_ebr_short_search_code":
		return WeakIdentifierTypeItaEbrShortSearchCode, nil
	case "chl_santiago_gazette_cve":
		return WeakIdentifierTypeChlSantiagoGazetteCve, nil
	case "bmu_registration_number":
		return WeakIdentifierTypeBmuRegistrationNumber, nil
	case "brazilian_oab":
		return WeakIdentifierTypeBrazilianOab, nil
	case "irn_reg_number":
		return WeakIdentifierTypeIrnRegNumber, nil
	case "mx_fme":
		return WeakIdentifierTypeMxFme, nil
	case "ukr_edrpou":
		return WeakIdentifierTypeUkrEdrpou, nil
	case "ru_license_number":
		return WeakIdentifierTypeRuLicenseNumber, nil
	case "maritime_call_sign":
		return WeakIdentifierTypeMaritimeCallSign, nil
	case "prk_ship_reg_no":
		return WeakIdentifierTypePrkShipRegNo, nil
	case "cofi_code":
		return WeakIdentifierTypeCofiCode, nil
	case "ru_nza":
		return WeakIdentifierTypeRuNza, nil
	case "arg_igj_number":
		return WeakIdentifierTypeArgIgjNumber, nil
	case "unknown_bra_case_number":
		return WeakIdentifierTypeUnknownBraCaseNumber, nil
	case "irq_provision_card":
		return WeakIdentifierTypeIrqProvisionCard, nil
	case "mbl_hm_sn":
		return WeakIdentifierTypeMblHmSn, nil
	case "mbl_hm_hud_num":
		return WeakIdentifierTypeMblHmHudNum, nil
	case "mbl_hm_title_num":
		return WeakIdentifierTypeMblHmTitleNum, nil
	case "mex_declaranet_acuse":
		return WeakIdentifierTypeMexDeclaranetAcuse, nil
	case "deu_registernummer":
		return WeakIdentifierTypeDeuRegisternummer, nil
	case "unknown_national_id_num":
		return WeakIdentifierTypeUnknownNationalIdNum, nil
	case "unknown_civil_reg_num":
		return WeakIdentifierTypeUnknownCivilRegNum, nil
	case "unknown_residency_num":
		return WeakIdentifierTypeUnknownResidencyNum, nil
	case "unknown_folio_id_num":
		return WeakIdentifierTypeUnknownFolioIdNum, nil
	case "unknown_commercial_register_id":
		return WeakIdentifierTypeUnknownCommercialRegisterId, nil
	case "unknown_chamber_of_commerce_id":
		return WeakIdentifierTypeUnknownChamberOfCommerceId, nil
	case "unknown_license_num":
		return WeakIdentifierTypeUnknownLicenseNum, nil
	case "unknown_industrial_license_num":
		return WeakIdentifierTypeUnknownIndustrialLicenseNum, nil
	case "cze_file_number":
		return WeakIdentifierTypeCzeFileNumber, nil
	case "mex_tm_app_no":
		return WeakIdentifierTypeMexTmAppNo, nil
	case "mex_tm_reg_no":
		return WeakIdentifierTypeMexTmRegNo, nil
	case "jordan_company_no":
		return WeakIdentifierTypeJordanCompanyNo, nil
	case "cn_qcc_internal_id":
		return WeakIdentifierTypeCnQccInternalId, nil
	case "jor_sol_prop_institution_number":
		return WeakIdentifierTypeJorSolPropInstitutionNumber, nil
	case "usa_nc_corp_no":
		return WeakIdentifierTypeUsaNcCorpNo, nil
	case "usa_nm_license_id":
		return WeakIdentifierTypeUsaNmLicenseId, nil
	case "khm_tin_number":
		return WeakIdentifierTypeKhmTinNumber, nil
	case "usa_mo_entity_id":
		return WeakIdentifierTypeUsaMoEntityId, nil
	case "usa_mo_corp_number":
		return WeakIdentifierTypeUsaMoCorpNumber, nil
	case "mac_raem_case_number":
		return WeakIdentifierTypeMacRaemCaseNumber, nil
	case "hnd_tegucigalpa_notary":
		return WeakIdentifierTypeHndTegucigalpaNotary, nil
	case "lbn_family_number":
		return WeakIdentifierTypeLbnFamilyNumber, nil
	case "tx_bexar_property_geo_id":
		return WeakIdentifierTypeTxBexarPropertyGeoId, nil
	case "pak_cnic_family_no":
		return WeakIdentifierTypePakCnicFamilyNo, nil
	case "rou_commercial_register_id":
		return WeakIdentifierTypeRouCommercialRegisterId, nil
	case "south_africa_partial_id_number":
		return WeakIdentifierTypeSouthAfricaPartialIdNumber, nil
	case "prk_internal_trade_id":
		return WeakIdentifierTypePrkInternalTradeId, nil
	case "chn_customs_registration_code":
		return WeakIdentifierTypeChnCustomsRegistrationCode, nil
	case "aut_former_cr_no":
		return WeakIdentifierTypeAutFormerCrNo, nil
	case "aut_natl_bank_no":
		return WeakIdentifierTypeAutNatlBankNo, nil
	case "lva_person_id_masked":
		return WeakIdentifierTypeLvaPersonIdMasked, nil
	case "lva_court_case_id":
		return WeakIdentifierTypeLvaCourtCaseId, nil
	case "chn_cninfo_legal_person_id":
		return WeakIdentifierTypeChnCninfoLegalPersonId, nil
	case "rks_business_number":
		return WeakIdentifierTypeRksBusinessNumber, nil
	case "rks_fiscal_number":
		return WeakIdentifierTypeRksFiscalNumber, nil
	case "mdg_nif_number":
		return WeakIdentifierTypeMdgNifNumber, nil
	case "mdg_rcs_number":
		return WeakIdentifierTypeMdgRcsNumber, nil
	case "vat":
		return WeakIdentifierTypeVat, nil
	case "usa_il_chicago_site_number":
		return WeakIdentifierTypeUsaIlChicagoSiteNumber, nil
	case "usa_generic_ticker":
		return WeakIdentifierTypeUsaGenericTicker, nil
	case "ven_rnc_number":
		return WeakIdentifierTypeVenRncNumber, nil
	case "usa_imports_system_identity_id":
		return WeakIdentifierTypeUsaImportsSystemIdentityId, nil
	case "col_bill_of_lading":
		return WeakIdentifierTypeColBillOfLading, nil
	case "col_secop_no":
		return WeakIdentifierTypeColSecopNo, nil
	case "pol_regon_number":
		return WeakIdentifierTypePolRegonNumber, nil
	case "pol_nip_number":
		return WeakIdentifierTypePolNipNumber, nil
	case "bill_of_lading":
		return WeakIdentifierTypeBillOfLading, nil
	case "pan_ibc_ruc":
		return WeakIdentifierTypePanIbcRuc, nil
	case "pak_old_company_code":
		return WeakIdentifierTypePakOldCompanyCode, nil
	case "jpn_permit_no":
		return WeakIdentifierTypeJpnPermitNo, nil
	case "dma_corporate_registry_entity_num":
		return WeakIdentifierTypeDmaCorporateRegistryEntityNum, nil
	case "atg_corporate_registry_entity_num":
		return WeakIdentifierTypeAtgCorporateRegistryEntityNum, nil
	case "lca_corporate_registry_entity_num":
		return WeakIdentifierTypeLcaCorporateRegistryEntityNum, nil
	case "ven_manifiesto_number":
		return WeakIdentifierTypeVenManifiestoNumber, nil
	case "col_matricula_mercantil":
		return WeakIdentifierTypeColMatriculaMercantil, nil
	case "maritime_mobile_service_identity":
		return WeakIdentifierTypeMaritimeMobileServiceIdentity, nil
	case "usa_former_fein":
		return WeakIdentifierTypeUsaFormerFein, nil
	case "usa_cbp_wro_id":
		return WeakIdentifierTypeUsaCbpWroId, nil
	case "ccs_ship_class_number":
		return WeakIdentifierTypeCcsShipClassNumber, nil
	case "tur_partial_mersis_number":
		return WeakIdentifierTypeTurPartialMersisNumber, nil
	case "tur_office_registration_number":
		return WeakIdentifierTypeTurOfficeRegistrationNumber, nil
	case "partial_ven_cedula":
		return WeakIdentifierTypePartialVenCedula, nil
	case "rus_cbr_id":
		return WeakIdentifierTypeRusCbrId, nil
	case "geo_state_registration_number":
		return WeakIdentifierTypeGeoStateRegistrationNumber, nil
	case "bih_mbs_number":
		return WeakIdentifierTypeBihMbsNumber, nil
	case "gbr_grant_info_number":
		return WeakIdentifierTypeGbrGrantInfoNumber, nil
	case "pry_shipment_number":
		return WeakIdentifierTypePryShipmentNumber, nil
	case "arg_import_export_id":
		return WeakIdentifierTypeArgImportExportId, nil
	case "cri_op_no":
		return WeakIdentifierTypeCriOpNo, nil
	case "aus_state_reg_number":
		return WeakIdentifierTypeAusStateRegNumber, nil
	case "hun_opten_id":
		return WeakIdentifierTypeHunOptenId, nil
	case "irl_registration_no":
		return WeakIdentifierTypeIrlRegistrationNo, nil
	case "malformed mmr_prior_reg_no":
		return WeakIdentifierTypeMalformedMmrPriorRegNo, nil
	}
	var t WeakIdentifierType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (w WeakIdentifierType) Ptr() *WeakIdentifierType {
	return &w
}

// A map of fields appearing in the audit logs for this event
type EventInfo = map[string]interface{}

type HistoryInfo struct {
	User        string    `json:"user" url:"user"`
	Environment string    `json:"environment" url:"environment"`
	Event       string    `json:"event" url:"event"`
	Data        EventInfo `json:"data,omitempty" url:"data,omitempty"`
	Timestamp   string    `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HistoryInfo) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HistoryInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler HistoryInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HistoryInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HistoryInfo) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type UsageInfo struct {
	Entity         *int `json:"entity,omitempty" url:"entity,omitempty"`
	EntitySummary  *int `json:"entity_summary,omitempty" url:"entity_summary,omitempty"`
	Record         *int `json:"record,omitempty" url:"record,omitempty"`
	Resolve        *int `json:"resolve,omitempty" url:"resolve,omitempty"`
	SearchEntities *int `json:"search_entities,omitempty" url:"search_entities,omitempty"`
	SearchRecords  *int `json:"search_records,omitempty" url:"search_records,omitempty"`
	SearchTrade    *int `json:"search_trade,omitempty" url:"search_trade,omitempty"`
	Traversal      *int `json:"traversal,omitempty" url:"traversal,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UsageInfo) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UsageInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler UsageInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsageInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsageInfo) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UserInfo struct {
	// Currently logged in user ID
	Id string `json:"id" url:"id"`
	// Name of the sayari organization tied to credentials
	GroupDisplayNames *string `json:"groupDisplayNames,omitempty" url:"groupDisplayNames,omitempty"`
	// Licenses associated with the organization
	Roles *string `json:"roles,omitempty" url:"roles,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UserInfo) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UserInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler UserInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UserInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UserInfo) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type Notification struct {
	// The type of notification, currently limited to 'risk'
	Type NotificationType `json:"type" url:"type"`
	// The field that the notification is for
	Field Risk `json:"field" url:"field"`
	// The previous values of the field
	Values []*RiskValue `json:"values,omitempty" url:"values,omitempty"`
	// The date the notification was created
	Date                  string                             `json:"date" url:"date"`
	AdditionalInformation *NotificationAdditionalInformation `json:"additional_information,omitempty" url:"additional_information,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *Notification) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *Notification) UnmarshalJSON(data []byte) error {
	type unmarshaler Notification
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = Notification(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *Notification) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationAdditionalInformation struct {
	Value      map[string]interface{}             `json:"value,omitempty" url:"value,omitempty"`
	Properties []*AdditionalInformationProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NotificationAdditionalInformation) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotificationAdditionalInformation) UnmarshalJSON(data []byte) error {
	type unmarshaler NotificationAdditionalInformation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotificationAdditionalInformation(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotificationAdditionalInformation) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

type NotificationType string

const (
	NotificationTypeRisk NotificationType = "risk"
)

func NewNotificationTypeFromString(s string) (NotificationType, error) {
	switch s {
	case "risk":
		return NotificationTypeRisk, nil
	}
	var t NotificationType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (n NotificationType) Ptr() *NotificationType {
	return &n
}

type ProjectNotificationData struct {
	// The ID of the entity
	Id string `json:"id" url:"id"`
	// The ID of the saved resource
	ResourceId string `json:"resource_id" url:"resource_id"`
	// The ID of the entity
	EntityId      string          `json:"entity_id" url:"entity_id"`
	Notifications []*Notification `json:"notifications,omitempty" url:"notifications,omitempty"`
	// <Warning>This property is in beta and is subject to change. It is provided for early access and testing purposes only.</Warning> custom user key/value pairs (key must be prefixed with "custom\_" and value must be "string" type)
	CustomFields interface{} `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`
	// Aggregated risk notifications
	RiskNotifications *ProjectNotificationRiskData `json:"risk_notifications,omitempty" url:"risk_notifications,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectNotificationData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectNotificationData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectNotificationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectNotificationData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectNotificationData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectNotificationRiskData struct {
	// The list of fields added
	Added []string `json:"added,omitempty" url:"added,omitempty"`
	// The list of fields removed
	Removed []string `json:"removed,omitempty" url:"removed,omitempty"`
	// The date of the notification
	Date string `json:"date" url:"date"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectNotificationRiskData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectNotificationRiskData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectNotificationRiskData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectNotificationRiskData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectNotificationRiskData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ResourceNotificationData struct {
	// The ID of the saved resource
	SavedResourceId string `json:"saved_resource_id" url:"saved_resource_id"`
	// The ID of the project the entity is saved to
	ProjectId string `json:"project_id" url:"project_id"`
	// The ID of the entity
	EntityId string `json:"entity_id" url:"entity_id"`
	// The type of notification, currently limited to 'risk'
	Type NotificationType `json:"type" url:"type"`
	// The field that the notification is for
	Field Risk `json:"field" url:"field"`
	// The previous value of the field
	Value *RiskValue `json:"value,omitempty" url:"value,omitempty"`
	// The date the notification was created
	Date string `json:"date" url:"date"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ResourceNotificationData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResourceNotificationData) UnmarshalJSON(data []byte) error {
	type unmarshaler ResourceNotificationData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResourceNotificationData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResourceNotificationData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Aggregation buckets for entities in a project.
type BucketAgg struct {
	Key        string       `json:"key" url:"key"`
	DocCount   int          `json:"doc_count" url:"doc_count"`
	Label      *string      `json:"label,omitempty" url:"label,omitempty"`
	Comment    *string      `json:"comment,omitempty" url:"comment,omitempty"`
	HsCodeSums *IntKeyValue `json:"hs_code_sums,omitempty" url:"hs_code_sums,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BucketAgg) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BucketAgg) UnmarshalJSON(data []byte) error {
	type unmarshaler BucketAgg
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BucketAgg(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BucketAgg) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type DocCount struct {
	DocCount int `json:"doc_count" url:"doc_count"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DocCount) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DocCount) UnmarshalJSON(data []byte) error {
	type unmarshaler DocCount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DocCount(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DocCount) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type HsCodeAgg struct {
	DocCount    int             `json:"doc_count" url:"doc_count"`
	HsCodeTerms *HsCodeAggTerms `json:"hs_code_terms,omitempty" url:"hs_code_terms,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HsCodeAgg) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeAgg) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeAgg
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeAgg(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeAgg) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HsCodeAggBucket struct {
	Key        string       `json:"key" url:"key"`
	DocCount   int          `json:"doc_count" url:"doc_count"`
	HsCodeSums *IntKeyValue `json:"hs_code_sums,omitempty" url:"hs_code_sums,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HsCodeAggBucket) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeAggBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeAggBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeAggBucket(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeAggBucket) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HsCodeAggTerms struct {
	DocCountErrorUpperBound int                `json:"doc_count_error_upper_bound" url:"doc_count_error_upper_bound"`
	SumOtherDocCount        int                `json:"sum_other_doc_count" url:"sum_other_doc_count"`
	Buckets                 []*HsCodeAggBucket `json:"buckets,omitempty" url:"buckets,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HsCodeAggTerms) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeAggTerms) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeAggTerms
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeAggTerms(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeAggTerms) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type IntKeyValue struct {
	Value int `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *IntKeyValue) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *IntKeyValue) UnmarshalJSON(data []byte) error {
	type unmarshaler IntKeyValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = IntKeyValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *IntKeyValue) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type PsaSummary struct {
	Risk      []Risk    `json:"risk,omitempty" url:"risk,omitempty"`
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	Count     int       `json:"count" url:"count"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PsaSummary) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PsaSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler PsaSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PsaSummary(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PsaSummary) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type Project struct {
	// Unique project identifier.
	Id string `json:"id" url:"id"`
	// Most recently set name for the project.
	Label string `json:"label" url:"label"`
	// Whether the project is archived. Archival is a soft delete.
	Archived bool           `json:"archived" url:"archived"`
	Created  string         `json:"created" url:"created"`
	Updated  string         `json:"updated" url:"updated"`
	Counts   *ProjectCounts `json:"counts,omitempty" url:"counts,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Project) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Project) UnmarshalJSON(data []byte) error {
	type unmarshaler Project
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Project(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Project) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectCounts struct {
	// The number of entities in the project.
	Entity *int `json:"entity,omitempty" url:"entity,omitempty"`
	Graph  *int `json:"graph,omitempty" url:"graph,omitempty"`
	Search *int `json:"search,omitempty" url:"search,omitempty"`
	Record *int `json:"record,omitempty" url:"record,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectCounts) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectCounts) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectCounts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectCounts(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectCounts) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Aggregation buckets for entities in a project.
type ProjectEntitiesAggs struct {
	HitCount             []*BucketAgg  `json:"hit_count,omitempty" url:"hit_count,omitempty"`
	Country              []*BucketAgg  `json:"country,omitempty" url:"country,omitempty"`
	UpstreamCountry      []*BucketAgg  `json:"upstream_country,omitempty" url:"upstream_country,omitempty"`
	UpstreamCountryTiers *TierCountAgg `json:"upstream_country_tiers,omitempty" url:"upstream_country_tiers,omitempty"`
	Risk                 []*BucketAgg  `json:"risk,omitempty" url:"risk,omitempty"`
	UpstreamRisk         []*BucketAgg  `json:"upstream_risk,omitempty" url:"upstream_risk,omitempty"`
	UpstreamRiskTiers    *TierCountAgg `json:"upstream_risk_tiers,omitempty" url:"upstream_risk_tiers,omitempty"`
	Source               []*BucketAgg  `json:"source,omitempty" url:"source,omitempty"`
	BusinessPurpose      []*BucketAgg  `json:"business_purpose,omitempty" url:"business_purpose,omitempty"`
	TagIds               []*BucketAgg  `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	CaseStatuses         []*BucketAgg  `json:"case_statuses,omitempty" url:"case_statuses,omitempty"`
	ShipmentCounts       []*BucketAgg  `json:"shipment_counts,omitempty" url:"shipment_counts,omitempty"`
	ShippedHsCodes       *HsCodeAgg    `json:"shipped_hs_codes,omitempty" url:"shipped_hs_codes,omitempty"`
	ReceivedHsCodes      *HsCodeAgg    `json:"received_hs_codes,omitempty" url:"received_hs_codes,omitempty"`
	MatchResults         []*BucketAgg  `json:"match_results,omitempty" url:"match_results,omitempty"`
	CustomFields         []*BucketAgg  `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`
	CustomFieldsCount    *IntKeyValue  `json:"custom_fields_count,omitempty" url:"custom_fields_count,omitempty"`
	Location             []*BucketAgg  `json:"location,omitempty" url:"location,omitempty"`
	SourceType           []*BucketAgg  `json:"source_type,omitempty" url:"source_type,omitempty"`
	Region               []*BucketAgg  `json:"region,omitempty" url:"region,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectEntitiesAggs) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitiesAggs) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitiesAggs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitiesAggs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitiesAggs) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntity struct {
	Id      string `json:"id" url:"id"`
	Project string `json:"project" url:"project"`
	// Entity label (display name).
	Label     string `json:"label" url:"label"`
	Created   string `json:"created" url:"created"`
	Updated   string `json:"updated" url:"updated"`
	UpdatedBy string `json:"updated_by" url:"updated_by"`
	// Will be 0.
	Version int `json:"version" url:"version"`
	// Entity ID.
	EntityId   string   `json:"entity_id" url:"entity_id"`
	TagIds     []string `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	CaseStatus string   `json:"case_status" url:"case_status"`
	// <Warning>This property is in beta and is subject to change. It is provided for early access and testing purposes only.</Warning> custom user key/value pairs (key must be prefixed with "custom\_" and value must be "string" type)
	CustomFields  interface{} `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`
	MatchStrength interface{} `json:"match_strength,omitempty" url:"match_strength,omitempty"`
	// HS codes shipped by the entity.
	ShippedHsCodes []string `json:"shipped_hs_codes,omitempty" url:"shipped_hs_codes,omitempty"`
	// HS codes received by the entity.
	ReceivedHsCodes []string `json:"received_hs_codes,omitempty" url:"received_hs_codes,omitempty"`
	// Counts of sent and received shipments for this entity and its match group.
	TradeCountInclMg *TradeCount            `json:"trade_count_incl_mg,omitempty" url:"trade_count_incl_mg,omitempty"`
	Upstream         *ProjectEntityUpstream `json:"upstream,omitempty" url:"upstream,omitempty"`
	Summary          *CoreEntity            `json:"summary,omitempty" url:"summary,omitempty"`
	Psa              *PsaSummary            `json:"psa,omitempty" url:"psa,omitempty"`
	type_            string

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectEntity) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntity) Type() string {
	return p.type_
}

func (p *ProjectEntity) UnmarshalJSON(data []byte) error {
	type embed ProjectEntity
	var unmarshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*p = ProjectEntity(unmarshaler.embed)
	if unmarshaler.Type != "entity" {
		return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", p, "entity", unmarshaler.Type)
	}
	p.type_ = unmarshaler.Type

	extraProperties, err := core.ExtractExtraProperties(data, *p, "type")
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntity) MarshalJSON() ([]byte, error) {
	type embed ProjectEntity
	var marshaler = struct {
		embed
		Type string `json:"type"`
	}{
		embed: embed(*p),
		Type:  "entity",
	}
	return json.Marshal(marshaler)
}

func (p *ProjectEntity) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityUpstream struct {
	Risk      []Risk    `json:"risk,omitempty" url:"risk,omitempty"`
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	Entities  int       `json:"entities" url:"entities"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectEntityUpstream) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityUpstream) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityUpstream
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityUpstream(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityUpstream) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectShareOnCreate struct {
	Org Role `json:"org" url:"org"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectShareOnCreate) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectShareOnCreate) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectShareOnCreate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectShareOnCreate(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectShareOnCreate) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectWithMembers struct {
	// Unique project identifier.
	Id string `json:"id" url:"id"`
	// Most recently set name for the project.
	Label string `json:"label" url:"label"`
	// Whether the project is archived. Archival is a soft delete.
	Archived bool           `json:"archived" url:"archived"`
	Created  string         `json:"created" url:"created"`
	Updated  string         `json:"updated" url:"updated"`
	Counts   *ProjectCounts `json:"counts,omitempty" url:"counts,omitempty"`
	Members  []*RoleMember  `json:"members,omitempty" url:"members,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *ProjectWithMembers) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectWithMembers) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectWithMembers
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectWithMembers(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectWithMembers) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// Role enum describes the access levels a user has to a project and its contents.
type Role string

const (
	// The user can view the project and its contents.
	RoleViewer Role = "viewer"
	// The user can view and edit the project and its contents.
	RoleEditor Role = "editor"
	// The user can view, edit, and delete the project and its contents.
	RoleAdmin Role = "admin"
)

func NewRoleFromString(s string) (Role, error) {
	switch s {
	case "viewer":
		return RoleViewer, nil
	case "editor":
		return RoleEditor, nil
	case "admin":
		return RoleAdmin, nil
	}
	var t Role
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r Role) Ptr() *Role {
	return &r
}

type RoleMember struct {
	Id      string         `json:"id" url:"id"`
	Type    RoleMemberType `json:"type" url:"type"`
	Role    Role           `json:"role" url:"role"`
	Created string         `json:"created" url:"created"`
	Updated string         `json:"updated" url:"updated"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RoleMember) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RoleMember) UnmarshalJSON(data []byte) error {
	type unmarshaler RoleMember
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RoleMember(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RoleMember) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// Role member type enum describes how access is granted to a project and its contents
type RoleMemberType string

const (
	// The access is granted to a user.
	RoleMemberTypeUser RoleMemberType = "user"
	// The access is granted to a group.
	RoleMemberTypeGroup RoleMemberType = "group"
)

func NewRoleMemberTypeFromString(s string) (RoleMemberType, error) {
	switch s {
	case "user":
		return RoleMemberTypeUser, nil
	case "group":
		return RoleMemberTypeGroup, nil
	}
	var t RoleMemberType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RoleMemberType) Ptr() *RoleMemberType {
	return &r
}

// Aggregation of counts by upstream supply chain tiers
type TierCount = map[*TierCountKeys]int

type TierCountAgg = map[string]TierCount

type TierCountKeys struct {
	UpstreamTiers           UpstreamTiers
	totalCountStringLiteral string
}

func NewTierCountKeysFromUpstreamTiers(value UpstreamTiers) *TierCountKeys {
	return &TierCountKeys{UpstreamTiers: value}
}

func NewTierCountKeysWithTotalCountStringLiteral() *TierCountKeys {
	return &TierCountKeys{totalCountStringLiteral: "totalCount"}
}

func (t *TierCountKeys) TotalCountStringLiteral() string {
	return t.totalCountStringLiteral
}

func (t *TierCountKeys) UnmarshalJSON(data []byte) error {
	var valueUpstreamTiers UpstreamTiers
	if err := json.Unmarshal(data, &valueUpstreamTiers); err == nil {
		t.UpstreamTiers = valueUpstreamTiers
		return nil
	}
	var valueTotalCountStringLiteral string
	if err := json.Unmarshal(data, &valueTotalCountStringLiteral); err == nil {
		t.totalCountStringLiteral = valueTotalCountStringLiteral
		if t.totalCountStringLiteral != "totalCount" {
			return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", t, "totalCount", valueTotalCountStringLiteral)
		}
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, t)
}

func (t TierCountKeys) MarshalJSON() ([]byte, error) {
	if t.UpstreamTiers != "" {
		return json.Marshal(t.UpstreamTiers)
	}
	if t.totalCountStringLiteral != "" {
		return json.Marshal("totalCount")
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TierCountKeysVisitor interface {
	VisitUpstreamTiers(UpstreamTiers) error
	VisitTotalCountStringLiteral(string) error
}

func (t *TierCountKeys) Accept(visitor TierCountKeysVisitor) error {
	if t.UpstreamTiers != "" {
		return visitor.VisitUpstreamTiers(t.UpstreamTiers)
	}
	if t.totalCountStringLiteral != "" {
		return visitor.VisitTotalCountStringLiteral(t.totalCountStringLiteral)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", t)
}

type TradeCount struct {
	ReceiverOf int `json:"receiver_of" url:"receiver_of"`
	ShipperOf  int `json:"shipper_of" url:"shipper_of"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TradeCount) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeCount) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeCount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeCount(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeCount) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpstreamTiers string

const (
	UpstreamTiersTier1 UpstreamTiers = "tier1"
	UpstreamTiersTier2 UpstreamTiers = "tier2"
	UpstreamTiersTier3 UpstreamTiers = "tier3"
	UpstreamTiersTier4 UpstreamTiers = "tier4"
)

func NewUpstreamTiersFromString(s string) (UpstreamTiers, error) {
	switch s {
	case "tier1":
		return UpstreamTiersTier1, nil
	case "tier2":
		return UpstreamTiersTier2, nil
	case "tier3":
		return UpstreamTiersTier3, nil
	case "tier4":
		return UpstreamTiersTier4, nil
	}
	var t UpstreamTiers
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (u UpstreamTiers) Ptr() *UpstreamTiers {
	return &u
}

type RecordReferences struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Next   bool            `json:"next" url:"next"`
	Offset int             `json:"offset" url:"offset"`
	Data   interface{}     `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RecordReferences) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RecordReferences) UnmarshalJSON(data []byte) error {
	type unmarshaler RecordReferences
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecordReferences(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecordReferences) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type MatchExplanation struct {
	Matched               *string  `json:"matched,omitempty" url:"matched,omitempty"`
	Uploaded              *string  `json:"uploaded,omitempty" url:"uploaded,omitempty"`
	NameCustomTfIdfScore  *float64 `json:"name_custom_tf_idf_score,omitempty" url:"name_custom_tf_idf_score,omitempty"`
	HighQualityMatchName  *bool    `json:"high_quality_match_name,omitempty" url:"high_quality_match_name,omitempty"`
	IsDeletionRecommended *bool    `json:"is_deletion_recommended,omitempty" url:"is_deletion_recommended,omitempty"`
	NCommonTermMatches    *int     `json:"n_common_term_matches,omitempty" url:"n_common_term_matches,omitempty"`
	NUncommonTermMatches  *int     `json:"n_uncommon_term_matches,omitempty" url:"n_uncommon_term_matches,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MatchExplanation) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MatchExplanation) UnmarshalJSON(data []byte) error {
	type unmarshaler MatchExplanation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MatchExplanation(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MatchExplanation) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type MatchStrength struct {
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MatchStrength) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MatchStrength) UnmarshalJSON(data []byte) error {
	type unmarshaler MatchStrength
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MatchStrength(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MatchStrength) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type ResolutionPersistedResponseFields struct {
	Name       []string `json:"name,omitempty" url:"name,omitempty"`
	Identifier []string `json:"identifier,omitempty" url:"identifier,omitempty"`
	Profile    *string  `json:"profile,omitempty" url:"profile,omitempty"`
	// Entity country - must be ISO (3166) Trigram i.e., USA. See complete list [here](/sayari-library/ontology/enumerated-types#country)
	Country []Country `json:"country,omitempty" url:"country,omitempty"`
	// List of physical addresses associated with the entity.
	Address     []string `json:"address,omitempty" url:"address,omitempty"`
	DateOfBirth []string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	Contact     []string `json:"contact,omitempty" url:"contact,omitempty"`
	// [Entity type](/sayari-library/ontology/entities)
	Type []Entities `json:"type,omitempty" url:"type,omitempty"`
	// <Warning>This property is in beta and is subject to change. It is provided for early access and testing purposes only.</Warning> custom user key/value pairs (key must be prefixed with "custom\_" and value must be "string" type)
	CustomFieldName  *string `json:"custom_{field name},omitempty" url:"custom_{field name},omitempty"`
	CustomName       *string `json:"custom_name,omitempty" url:"custom_name,omitempty"`
	CustomIdentifier *string `json:"custom_identifier,omitempty" url:"custom_identifier,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ResolutionPersistedResponseFields) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResolutionPersistedResponseFields) UnmarshalJSON(data []byte) error {
	type unmarshaler ResolutionPersistedResponseFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResolutionPersistedResponseFields(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResolutionPersistedResponseFields) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResolutionPersistedResult struct {
	Profile             string                         `json:"profile" url:"profile"`
	Score               float64                        `json:"score" url:"score"`
	EntityId            string                         `json:"entity_id" url:"entity_id"`
	Label               string                         `json:"label" url:"label"`
	Type                Entities                       `json:"type" url:"type"`
	Identifiers         []*Identifier                  `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	PsaId               *float64                       `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	Addresses           []string                       `json:"addresses,omitempty" url:"addresses,omitempty"`
	Countries           []Country                      `json:"countries,omitempty" url:"countries,omitempty"`
	Sources             []string                       `json:"sources,omitempty" url:"sources,omitempty"`
	TypedMatchedQueries []string                       `json:"typed_matched_queries,omitempty" url:"typed_matched_queries,omitempty"`
	MatchedQueries      []string                       `json:"matched_queries,omitempty" url:"matched_queries,omitempty"`
	Highlight           map[string][]string            `json:"highlight,omitempty" url:"highlight,omitempty"`
	Explanation         map[string][]*MatchExplanation `json:"explanation,omitempty" url:"explanation,omitempty"`
	MatchStrength       *MatchStrength                 `json:"match_strength,omitempty" url:"match_strength,omitempty"`
	SavedEntityId       string                         `json:"saved_entity_id" url:"saved_entity_id"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ResolutionPersistedResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResolutionPersistedResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResolutionPersistedResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResolutionPersistedResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResolutionPersistedResult) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResolutionResponseFields struct {
	Name       []string `json:"name,omitempty" url:"name,omitempty"`
	Identifier []string `json:"identifier,omitempty" url:"identifier,omitempty"`
	Profile    *string  `json:"profile,omitempty" url:"profile,omitempty"`
	// Entity country - must be ISO (3166) Trigram i.e., USA. See complete list [here](/sayari-library/ontology/enumerated-types#country)
	Country []Country `json:"country,omitempty" url:"country,omitempty"`
	// List of physical addresses associated with the entity.
	Address     []string `json:"address,omitempty" url:"address,omitempty"`
	DateOfBirth []string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	Contact     []string `json:"contact,omitempty" url:"contact,omitempty"`
	// [Entity type](/sayari-library/ontology/entities)
	Type []Entities `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ResolutionResponseFields) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResolutionResponseFields) UnmarshalJSON(data []byte) error {
	type unmarshaler ResolutionResponseFields
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResolutionResponseFields(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResolutionResponseFields) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResolutionResult struct {
	Profile             string                         `json:"profile" url:"profile"`
	Score               float64                        `json:"score" url:"score"`
	EntityId            string                         `json:"entity_id" url:"entity_id"`
	Label               string                         `json:"label" url:"label"`
	Type                Entities                       `json:"type" url:"type"`
	Identifiers         []*Identifier                  `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	PsaId               *float64                       `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	Addresses           []string                       `json:"addresses,omitempty" url:"addresses,omitempty"`
	Countries           []Country                      `json:"countries,omitempty" url:"countries,omitempty"`
	Sources             []string                       `json:"sources,omitempty" url:"sources,omitempty"`
	TypedMatchedQueries []string                       `json:"typed_matched_queries,omitempty" url:"typed_matched_queries,omitempty"`
	MatchedQueries      []string                       `json:"matched_queries,omitempty" url:"matched_queries,omitempty"`
	Highlight           map[string][]string            `json:"highlight,omitempty" url:"highlight,omitempty"`
	Explanation         map[string][]*MatchExplanation `json:"explanation,omitempty" url:"explanation,omitempty"`
	MatchStrength       *MatchStrength                 `json:"match_strength,omitempty" url:"match_strength,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ResolutionResult) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResolutionResult) UnmarshalJSON(data []byte) error {
	type unmarshaler ResolutionResult
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResolutionResult(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResolutionResult) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type EntityResponseData struct {
	Type       ResourceType `json:"type" url:"type"`
	Id         string       `json:"id" url:"id"`
	Project    string       `json:"project" url:"project"`
	Label      string       `json:"label" url:"label"`
	Created    string       `json:"created" url:"created"`
	Updated    string       `json:"updated" url:"updated"`
	UpdatedBy  string       `json:"updated_by" url:"updated_by"`
	Version    int          `json:"version" url:"version"`
	EntityId   string       `json:"entity_id" url:"entity_id"`
	TagIds     []string     `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	CaseStatus string       `json:"case_status" url:"case_status"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityResponseData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityResponseData) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type Coordinates struct {
	Lat     float64 `json:"lat" url:"lat"`
	Lng     float64 `json:"lng" url:"lng"`
	Address string  `json:"address" url:"address"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *Coordinates) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Coordinates) UnmarshalJSON(data []byte) error {
	type unmarshaler Coordinates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Coordinates(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Coordinates) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type SearchResults struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount       map[Attributes]int      `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	RelatedEntitiesCount     int                     `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                     `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                     `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string                 `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	RegistrationDate         *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	TranslatedLabel          *EntityTranslatedLabel  `json:"translated_label,omitempty" url:"translated_label,omitempty"`
	HsCode                   *EntityHsCode           `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	ShipmentArrival          *ShipmentArrival        `json:"shipment_arrival,omitempty" url:"shipment_arrival,omitempty"`
	ShipmentDeparture        *ShipmentDeparture      `json:"shipment_departure,omitempty" url:"shipment_departure,omitempty"`
	CompanyType              *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	LatestStatus             *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`
	// [Risk factors](/sayari-library/ontology/risk-factors) associated with the entity.
	Risk EntityRisk `json:"risk,omitempty" url:"risk,omitempty"`
	// Detailed information about the entity's [attributes](/sayari-library/ontology/attributes).
	Attributes *AttributeDetails `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Detailed information about the entity's [relationships](/sayari-library/ontology/relationships).
	Relationships  *EntityRelationships `json:"relationships,omitempty" url:"relationships,omitempty"`
	PossiblySameAs *PossiblySameAs      `json:"possibly_same_as,omitempty" url:"possibly_same_as,omitempty"`
	ReferencedBy   *ReferencedBy        `json:"referenced_by,omitempty" url:"referenced_by,omitempty"`
	Coordinates    []*Coordinates       `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	Matches        EntityMatches        `json:"matches,omitempty" url:"matches,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SearchResults) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResults(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResults) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The unique identifier for a source in the database
type SourceId = string

// Bad gateway
type BadGatewayResponse = interface{}

// Incorrectly formatted request
type BadRequestResponse = interface{}

// Connection error
type ConnectionErrorResponse = interface{}

// Internal server error occurred.
type InternalServerErrorResponse = interface{}

// Resource not found or does not exist.
type MethodNotAllowedResponse struct {
	Status  int      `json:"status" url:"status"`
	Message []string `json:"message,omitempty" url:"message,omitempty"`
	Success bool     `json:"success" url:"success"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MethodNotAllowedResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MethodNotAllowedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MethodNotAllowedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MethodNotAllowedResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MethodNotAllowedResponse) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Request made in an unacceptable state. This is most commonly due to parameter validation errors.
type NotAcceptableResponse struct {
	Status  int      `json:"status" url:"status"`
	Message []string `json:"message,omitempty" url:"message,omitempty"`
	Success bool     `json:"success" url:"success"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NotAcceptableResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotAcceptableResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotAcceptableResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotAcceptableResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotAcceptableResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Request made with an unsupported HTTP method.
type NotFoundResponse struct {
	Status  int      `json:"status" url:"status"`
	Message []string `json:"message,omitempty" url:"message,omitempty"`
	Success bool     `json:"success" url:"success"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (n *NotFoundResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotFoundResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotFoundResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotFoundResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties

	n._rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotFoundResponse) String() string {
	if len(n._rawJSON) > 0 {
		if value, err := core.StringifyJSON(n._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Too many requests within too short of a period. The reply will contain a retry-after header that indicates when the client can safely retry.
type RateLimitResponse = interface{}

// Request made without valid token.
type UnauthorizedResponse = interface{}

type ClientName string

const (
	ClientNameGo     ClientName = "sayari-go"
	ClientNamePython ClientName = "sayari-python"
	ClientNameJava   ClientName = "sayari-java"
	ClientNameNode   ClientName = "sayari-node"
)

func NewClientNameFromString(s string) (ClientName, error) {
	switch s {
	case "sayari-go":
		return ClientNameGo, nil
	case "sayari-python":
		return ClientNamePython, nil
	case "sayari-java":
		return ClientNameJava, nil
	case "sayari-node":
		return ClientNameNode, nil
	}
	var t ClientName
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c ClientName) Ptr() *ClientName {
	return &c
}

// A type of legal entity in a given jurisdiction (e.g. 'LLC,' 'Sociedad Anonima,' 'Private Company Limited by Shares')
type CompanyType = string

type Coordinate struct {
	Lat     float64 `json:"lat" url:"lat"`
	Lng     float64 `json:"lng" url:"lng"`
	Address string  `json:"address" url:"address"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *Coordinate) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Coordinate) UnmarshalJSON(data []byte) error {
	type unmarshaler Coordinate
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Coordinate(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *Coordinate) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// The attributes fields common to most entities.
type CoreEntity struct {
	Attributes map[Attributes][]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// User or group that created the entity, if applicable. Undefined for Sayari entities.
	Owner *string `json:"owner,omitempty" url:"owner,omitempty"`
	// The [entity type](/sayari-library/ontology/entities).
	Type Entities `json:"type" url:"type"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Name variations of the entity.
	Names             []string                `json:"names,omitempty" url:"names,omitempty"`
	CompanyType       *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	RegistrationDate  *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	LatestStatus      *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`
	ShipmentArrival   *ShipmentArrival        `json:"shipment_arrival,omitempty" url:"shipment_arrival,omitempty"`
	ShipmentDeparture *ShipmentDeparture      `json:"shipment_departure,omitempty" url:"shipment_departure,omitempty"`
	HsCode            *EntityHsCode           `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	TranslatedLabel   *EntityTranslatedLabel  `json:"translated_label,omitempty" url:"translated_label,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses []string `json:"addresses,omitempty" url:"addresses,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth *string `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed                   *bool             `json:"closed,omitempty" url:"closed,omitempty"`
	RelatedEntitiesCount     int               `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int               `json:"user_related_entities_count" url:"user_related_entities_count"`
	RelationshipCounts       RelationshipCount `json:"relationship_counts,omitempty" url:"relationship_counts,omitempty"`
	UserRelationshipCounts   RelationshipCount `json:"user_relationship_counts,omitempty" url:"user_relationship_counts,omitempty"`
	AttributeCounts          interface{}       `json:"attribute_counts,omitempty" url:"attribute_counts,omitempty"`
	UserAttributeCounts      interface{}       `json:"user_attribute_counts,omitempty" url:"user_attribute_counts,omitempty"`
	TradeCount               map[string]int    `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	RecordCount              int               `json:"record_count" url:"record_count"`
	UserRecordCount          int               `json:"user_record_count" url:"user_record_count"`
	// Number of records associated with the entity, grouped by source.
	SourceCounts map[string]*SourceCountInfo `json:"source_counts,omitempty" url:"source_counts,omitempty"`
	Psa          *Psa                        `json:"psa,omitempty" url:"psa,omitempty"`
	// [Risk factors](/sayari-library/ontology/risk-factors) associated with the entity.
	Risk     EntityRisk `json:"risk,omitempty" url:"risk,omitempty"`
	Created  *string    `json:"created,omitempty" url:"created,omitempty"`
	Updated  *string    `json:"updated,omitempty" url:"updated,omitempty"`
	EditedBy *string    `json:"edited_by,omitempty" url:"edited_by,omitempty"`
	Editable *bool      `json:"editable,omitempty" url:"editable,omitempty"`
	Upload   *string    `json:"upload,omitempty" url:"upload,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CoreEntity) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CoreEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler CoreEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CoreEntity(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CoreEntity) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// Fields of an entity when nested within other data structures.
type EmbeddedEntity struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount       map[Attributes]int `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	RelatedEntitiesCount     int                `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string            `json:"reference_id,omitempty" url:"reference_id,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EmbeddedEntity) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EmbeddedEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler EmbeddedEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EmbeddedEntity(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EmbeddedEntity) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Additional fields providing more details about an entity
type EntityDetails struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount       map[Attributes]int      `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	RelatedEntitiesCount     int                     `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                     `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                     `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string                 `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	RegistrationDate         *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	TranslatedLabel          *EntityTranslatedLabel  `json:"translated_label,omitempty" url:"translated_label,omitempty"`
	HsCode                   *EntityHsCode           `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	ShipmentArrival          *ShipmentArrival        `json:"shipment_arrival,omitempty" url:"shipment_arrival,omitempty"`
	ShipmentDeparture        *ShipmentDeparture      `json:"shipment_departure,omitempty" url:"shipment_departure,omitempty"`
	CompanyType              *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	LatestStatus             *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`
	// [Risk factors](/sayari-library/ontology/risk-factors) associated with the entity.
	Risk EntityRisk `json:"risk,omitempty" url:"risk,omitempty"`
	// Detailed information about the entity's [attributes](/sayari-library/ontology/attributes).
	Attributes *AttributeDetails `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Detailed information about the entity's [relationships](/sayari-library/ontology/relationships).
	Relationships  *EntityRelationships `json:"relationships,omitempty" url:"relationships,omitempty"`
	PossiblySameAs *PossiblySameAs      `json:"possibly_same_as,omitempty" url:"possibly_same_as,omitempty"`
	ReferencedBy   *ReferencedBy        `json:"referenced_by,omitempty" url:"referenced_by,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityDetails) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityDetails) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Harmonized Tariff Schedule Code associated with the entity/shipment
type EntityHsCode = string

// An explanation of why this entity was returned as the result of a query.
type EntityMatches = map[string][]string

// Type (registered/incorporated/active) and date of the earliest significant activity associated with the entity. Will appear as 'Registered YYYY-MM-DD'
type EntityRegistrationDate = string

// All relationships the entity is a part of.
type EntityRelationships struct {
	Limit int                 `json:"limit" url:"limit"`
	Size  *QualifiedCount     `json:"size,omitempty" url:"size,omitempty"`
	Next  interface{}         `json:"next,omitempty" url:"next,omitempty"`
	Data  []*RelationshipData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntityRelationships) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityRelationships) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityRelationships
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityRelationships(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityRelationships) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Risk factors associated with the entity.
type EntityRisk = map[Risk]*RiskData

type EntitySummary struct {
	Attributes map[Attributes][]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (e *EntitySummary) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntitySummary) UnmarshalJSON(data []byte) error {
	type unmarshaler EntitySummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntitySummary(value)

	extraProperties, err := core.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties

	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntitySummary) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Label in English if available. Translation performed by Sayari.
type EntityTranslatedLabel = string

// Identifiers associated with the entity.
type Identifier struct {
	Value string `json:"value" url:"value"`
	// [Identifier Type](/sayari-library/ontology/enumerated-types#identifier-type) or [Weak Identifier Type](/sayari-library/ontology/enumerated-types#weak-identifier-type)
	Type  *BothIdentifierTypes `json:"type,omitempty" url:"type,omitempty"`
	Label string               `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (i *Identifier) GetExtraProperties() map[string]interface{} {
	return i.extraProperties
}

func (i *Identifier) UnmarshalJSON(data []byte) error {
	type unmarshaler Identifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*i = Identifier(value)

	extraProperties, err := core.ExtractExtraProperties(data, *i)
	if err != nil {
		return err
	}
	i.extraProperties = extraProperties

	i._rawJSON = json.RawMessage(data)
	return nil
}

func (i *Identifier) String() string {
	if len(i._rawJSON) > 0 {
		if value, err := core.StringifyJSON(i._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(i); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", i)
}

type Psa struct {
	PsaId     string          `json:"psa_id" url:"psa_id"`
	Label     string          `json:"label" url:"label"`
	Count     *int            `json:"count,omitempty" url:"count,omitempty"`
	MatchKeys []*PsaMatchKeys `json:"match_keys,omitempty" url:"match_keys,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *Psa) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *Psa) UnmarshalJSON(data []byte) error {
	type unmarshaler Psa
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = Psa(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *Psa) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// The entity that is possibly the same as the target entity.
type PsaEntity struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount       map[Attributes]int      `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	RelatedEntitiesCount     int                     `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                     `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                     `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string                 `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	Risk                     EntityRisk              `json:"risk,omitempty" url:"risk,omitempty"`
	RegistrationDate         *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	CompanyType              *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	LatestStatus             *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PsaEntity) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PsaEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler PsaEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PsaEntity(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PsaEntity) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PsaMatchKeys struct {
	Key        string `json:"key" url:"key"`
	Normalized string `json:"normalized" url:"normalized"`
	Original   string `json:"original" url:"original"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PsaMatchKeys) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PsaMatchKeys) UnmarshalJSON(data []byte) error {
	type unmarshaler PsaMatchKeys
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PsaMatchKeys(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PsaMatchKeys) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

// List of entities that are Possibly the Same As (PSA) the entity.
type PossiblySameAs struct {
	Limit  int                   `json:"limit" url:"limit"`
	Size   *QualifiedCount       `json:"size,omitempty" url:"size,omitempty"`
	Offset *int                  `json:"offset,omitempty" url:"offset,omitempty"`
	Next   interface{}           `json:"next,omitempty" url:"next,omitempty"`
	Data   []*PossiblySameAsData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PossiblySameAs) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PossiblySameAs) UnmarshalJSON(data []byte) error {
	type unmarshaler PossiblySameAs
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PossiblySameAs(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PossiblySameAs) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PossiblySameAsData struct {
	Editable *bool                             `json:"editable,omitempty" url:"editable,omitempty"`
	Entity   *PsaEntity                        `json:"entity,omitempty" url:"entity,omitempty"`
	Matches  map[string][]*PossiblySameAsMatch `json:"matches,omitempty" url:"matches,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PossiblySameAsData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PossiblySameAsData) UnmarshalJSON(data []byte) error {
	type unmarshaler PossiblySameAsData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PossiblySameAsData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PossiblySameAsData) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type PossiblySameAsMatch struct {
	Source string `json:"source" url:"source"`
	Target string `json:"target" url:"target"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (p *PossiblySameAsMatch) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *PossiblySameAsMatch) UnmarshalJSON(data []byte) error {
	type unmarshaler PossiblySameAsMatch
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = PossiblySameAsMatch(value)

	extraProperties, err := core.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties

	p._rawJSON = json.RawMessage(data)
	return nil
}

func (p *PossiblySameAsMatch) String() string {
	if len(p._rawJSON) > 0 {
		if value, err := core.StringifyJSON(p._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type RecordDetails struct {
	// The unique identifier for a record in the database
	Id    string `json:"id" url:"id"`
	Label string `json:"label" url:"label"`
	// The unique identifier for a source in the database
	Source string `json:"source" url:"source"`
	// The date the record was published
	PublicationDate *string `json:"publication_date,omitempty" url:"publication_date,omitempty"`
	// The date Sayari acquired this record
	AcquisitionDate string `json:"acquisition_date" url:"acquisition_date"`
	// Number of times this record is referenced
	ReferencesCount int `json:"references_count" url:"references_count"`
	// The url to download the record from Sayari
	RecordUrl string `json:"record_url" url:"record_url"`
	// The url to access to original source
	SourceUrl    *string             `json:"source_url,omitempty" url:"source_url,omitempty"`
	DocumentUrls []string            `json:"document_urls,omitempty" url:"document_urls,omitempty"`
	Matches      map[string][]string `json:"matches,omitempty" url:"matches,omitempty"`
	Country      *Country            `json:"country,omitempty" url:"country,omitempty"`
	Page         *float64            `json:"page,omitempty" url:"page,omitempty"`
	PageCount    *float64            `json:"page_count,omitempty" url:"page_count,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RecordDetails) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RecordDetails) UnmarshalJSON(data []byte) error {
	type unmarshaler RecordDetails
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecordDetails(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecordDetails) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

// List of records that reference the entity.
type ReferencedBy struct {
	Limit  int                 `json:"limit" url:"limit"`
	Size   *QualifiedCount     `json:"size,omitempty" url:"size,omitempty"`
	Offset *int                `json:"offset,omitempty" url:"offset,omitempty"`
	Next   interface{}         `json:"next,omitempty" url:"next,omitempty"`
	Data   []*ReferencedByData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReferencedBy) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReferencedBy) UnmarshalJSON(data []byte) error {
	type unmarshaler ReferencedBy
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReferencedBy(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReferencedBy) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReferencedByData struct {
	Record *RecordDetails       `json:"record,omitempty" url:"record,omitempty"`
	Type   ReferencedByDataType `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *ReferencedByData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ReferencedByData) UnmarshalJSON(data []byte) error {
	type unmarshaler ReferencedByData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ReferencedByData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *ReferencedByData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ReferencedByDataType string

const (
	ReferencedByDataTypeAbout    ReferencedByDataType = "about"
	ReferencedByDataTypeMentions ReferencedByDataType = "mentions"
)

func NewReferencedByDataTypeFromString(s string) (ReferencedByDataType, error) {
	switch s {
	case "about":
		return ReferencedByDataTypeAbout, nil
	case "mentions":
		return ReferencedByDataTypeMentions, nil
	}
	var t ReferencedByDataType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ReferencedByDataType) Ptr() *ReferencedByDataType {
	return &r
}

// Count of related entities for a given [relationship type](/sayari-library/ontology/relationships).
type RelationshipCount = map[Relationships]int

type RelationshipData struct {
	Target *EntityDetails `json:"target,omitempty" url:"target,omitempty"`
	// Additional information for each [relationship type](/sayari-library/ontology/relationships).
	Types         map[Relationships][]*RelationshipInfo `json:"types,omitempty" url:"types,omitempty"`
	Dates         []string                              `json:"dates,omitempty" url:"dates,omitempty"`
	FirstObserved *string                               `json:"first_observed,omitempty" url:"first_observed,omitempty"`
	Former        *bool                                 `json:"former,omitempty" url:"former,omitempty"`
	LastObserved  *string                               `json:"last_observed,omitempty" url:"last_observed,omitempty"`
	StartDate     *string                               `json:"start_date,omitempty" url:"start_date,omitempty"`
	EndDate       *string                               `json:"end_date,omitempty" url:"end_date,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RelationshipData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RelationshipData) UnmarshalJSON(data []byte) error {
	type unmarshaler RelationshipData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RelationshipData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RelationshipData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RelationshipInfo struct {
	Editable        *bool                        `json:"editable,omitempty" url:"editable,omitempty"`
	Record          string                       `json:"record" url:"record"`
	Attributes      map[Attributes][]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`
	Date            *string                      `json:"date,omitempty" url:"date,omitempty"`
	FromDate        *string                      `json:"from_date,omitempty" url:"from_date,omitempty"`
	ToDate          *string                      `json:"to_date,omitempty" url:"to_date,omitempty"`
	AcquisitionDate string                       `json:"acquisition_date" url:"acquisition_date"`
	Former          *bool                        `json:"former,omitempty" url:"former,omitempty"`
	PublicationDate *string                      `json:"publication_date,omitempty" url:"publication_date,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RelationshipInfo) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RelationshipInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler RelationshipInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RelationshipInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RelationshipInfo) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RiskData struct {
	Value    *RiskValue             `json:"value,omitempty" url:"value,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty" url:"metadata,omitempty"`
	// The severity of the risk.
	Level RiskLevel `json:"level" url:"level"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RiskData) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskData) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskData) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RiskLevel string

const (
	RiskLevelCritical RiskLevel = "critical"
	RiskLevelHigh     RiskLevel = "high"
	RiskLevelElevated RiskLevel = "elevated"
	RiskLevelRelevant RiskLevel = "relevant"
)

func NewRiskLevelFromString(s string) (RiskLevel, error) {
	switch s {
	case "critical":
		return RiskLevelCritical, nil
	case "high":
		return RiskLevelHigh, nil
	case "elevated":
		return RiskLevelElevated, nil
	case "relevant":
		return RiskLevelRelevant, nil
	}
	var t RiskLevel
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RiskLevel) Ptr() *RiskLevel {
	return &r
}

type RiskValue struct {
	String  string
	Double  float64
	Boolean bool
}

func NewRiskValueFromString(value string) *RiskValue {
	return &RiskValue{String: value}
}

func NewRiskValueFromDouble(value float64) *RiskValue {
	return &RiskValue{Double: value}
}

func NewRiskValueFromBoolean(value bool) *RiskValue {
	return &RiskValue{Boolean: value}
}

func (r *RiskValue) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		r.String = valueString
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		r.Double = valueDouble
		return nil
	}
	var valueBoolean bool
	if err := json.Unmarshal(data, &valueBoolean); err == nil {
		r.Boolean = valueBoolean
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RiskValue) MarshalJSON() ([]byte, error) {
	if r.String != "" {
		return json.Marshal(r.String)
	}
	if r.Double != 0 {
		return json.Marshal(r.Double)
	}
	if r.Boolean != false {
		return json.Marshal(r.Boolean)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RiskValueVisitor interface {
	VisitString(string) error
	VisitDouble(float64) error
	VisitBoolean(bool) error
}

func (r *RiskValue) Accept(visitor RiskValueVisitor) error {
	if r.String != "" {
		return visitor.VisitString(r.String)
	}
	if r.Double != 0 {
		return visitor.VisitDouble(r.Double)
	}
	if r.Boolean != false {
		return visitor.VisitBoolean(r.Boolean)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type SearchField string

const (
	SearchFieldName            SearchField = "name"
	SearchFieldIdentifier      SearchField = "identifier"
	SearchFieldAddress         SearchField = "address"
	SearchFieldBusinessPurpose SearchField = "business_purpose"
	SearchFieldDateOfBirth     SearchField = "date_of_birth"
	SearchFieldContact         SearchField = "contact"
)

func NewSearchFieldFromString(s string) (SearchField, error) {
	switch s {
	case "name":
		return SearchFieldName, nil
	case "identifier":
		return SearchFieldIdentifier, nil
	case "address":
		return SearchFieldAddress, nil
	case "business_purpose":
		return SearchFieldBusinessPurpose, nil
	case "date_of_birth":
		return SearchFieldDateOfBirth, nil
	case "contact":
		return SearchFieldContact, nil
	}
	var t SearchField
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SearchField) Ptr() *SearchField {
	return &s
}

// Arrival date of a shipment.
type ShipmentArrival = string

// Departure date of a shipment.
type ShipmentDeparture = string

// The number of time the entity is referenced by a source.
type SourceCountInfo struct {
	Count int    `json:"count" url:"count"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SourceCountInfo) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceCountInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceCountInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceCountInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceCountInfo) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The most recent status of an entity and when that status was observed.
type Status struct {
	Status string  `json:"status" url:"status"`
	Date   *string `json:"date,omitempty" url:"date,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Status) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Status) UnmarshalJSON(data []byte) error {
	type unmarshaler Status
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Status(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Status) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Source struct {
	// The unique identifier of the source
	Id          string `json:"id" url:"id"`
	Label       string `json:"label" url:"label"`
	Description string `json:"description" url:"description"`
	// Source [country](/sayari-library/ontology/enumerated-types#country)
	Country    Country `json:"country" url:"country"`
	Region     string  `json:"region" url:"region"`
	DateAdded  string  `json:"date_added" url:"date_added"`
	SourceType string  `json:"source_type" url:"source_type"`
	RecordType string  `json:"record_type" url:"record_type"`
	Structure  string  `json:"structure" url:"structure"`
	SourceUrl  *string `json:"source_url,omitempty" url:"source_url,omitempty"`
	Pep        bool    `json:"pep" url:"pep"`
	Watchlist  bool    `json:"watchlist" url:"watchlist"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Source) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Source) UnmarshalJSON(data []byte) error {
	type unmarshaler Source
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Source(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Source) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type EntityId = string

type HsCodeWithDescription struct {
	Code        string `json:"code" url:"code"`
	Description string `json:"description" url:"description"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HsCodeWithDescription) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeWithDescription) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeWithDescription
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeWithDescription(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeWithDescription) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type TradeTraversalEntity struct {
	Id        string   `json:"id" url:"id"`
	Type      string   `json:"type" url:"type"`
	Label     string   `json:"label" url:"label"`
	Countries []string `json:"countries,omitempty" url:"countries,omitempty"`
	Risk      []string `json:"risk,omitempty" url:"risk,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TradeTraversalEntity) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalEntity(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalEntity) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalPath struct {
	Source string                       `json:"source" url:"source"`
	Target *TradeTraversalEntity        `json:"target,omitempty" url:"target,omitempty"`
	Path   []*TradeTraversalPathSegment `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TradeTraversalPath) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalPath) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalPath
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalPath(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalPath) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalPathSegment struct {
	Entity   *TradeTraversalEntity    `json:"entity,omitempty" url:"entity,omitempty"`
	Products []*TradeTraversalProduct `json:"products,omitempty" url:"products,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TradeTraversalPathSegment) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalPathSegment) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalPathSegment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalPathSegment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalPathSegment) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalProduct struct {
	HsCode             *HsCodeWithDescription `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	MinDate            string                 `json:"min_date" url:"min_date"`
	MaxDate            string                 `json:"max_date" url:"max_date"`
	ArrivalCountries   []string               `json:"arrival_countries,omitempty" url:"arrival_countries,omitempty"`
	DepartureCountries []string               `json:"departure_countries,omitempty" url:"departure_countries,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TradeTraversalProduct) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalProduct) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalProduct
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalProduct(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalProduct) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type BusinessPurpose struct {
	Value *string `json:"value,omitempty" url:"value,omitempty"`
	Code  *string `json:"code,omitempty" url:"code,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (b *BusinessPurpose) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessPurpose) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessPurpose
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessPurpose(value)

	extraProperties, err := core.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties

	b._rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessPurpose) String() string {
	if len(b._rawJSON) > 0 {
		if value, err := core.StringifyJSON(b._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type DataSource struct {
	// The unique identifier for a source in the database
	Id    string `json:"id" url:"id"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (d *DataSource) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DataSource) UnmarshalJSON(data []byte) error {
	type unmarshaler DataSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DataSource(value)

	extraProperties, err := core.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties

	d._rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataSource) String() string {
	if len(d._rawJSON) > 0 {
		if value, err := core.StringifyJSON(d._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type MonetaryValue struct {
	Value    float64   `json:"value" url:"value"`
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	Context  *string   `json:"context,omitempty" url:"context,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (m *MonetaryValue) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MonetaryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler MonetaryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MonetaryValue(value)

	extraProperties, err := core.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties

	m._rawJSON = json.RawMessage(data)
	return nil
}

func (m *MonetaryValue) String() string {
	if len(m._rawJSON) > 0 {
		if value, err := core.StringifyJSON(m._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Shipment struct {
	Id                  string                       `json:"id" url:"id"`
	Type                string                       `json:"type" url:"type"`
	Buyer               []*SourceOrDestinationEntity `json:"buyer,omitempty" url:"buyer,omitempty"`
	Supplier            []*SourceOrDestinationEntity `json:"supplier,omitempty" url:"supplier,omitempty"`
	ArrivalDate         *string                      `json:"arrival_date,omitempty" url:"arrival_date,omitempty"`
	DepartureDate       *string                      `json:"departure_date,omitempty" url:"departure_date,omitempty"`
	DepartureAddress    *ShipmentAddress             `json:"departure_address,omitempty" url:"departure_address,omitempty"`
	ArrivalAddress      *ShipmentAddress             `json:"arrival_address,omitempty" url:"arrival_address,omitempty"`
	ProductOrigin       []Country                    `json:"product_origin,omitempty" url:"product_origin,omitempty"`
	MonetaryValue       []*MonetaryValue             `json:"monetary_value,omitempty" url:"monetary_value,omitempty"`
	Weight              []*Weight                    `json:"weight,omitempty" url:"weight,omitempty"`
	Identifier          []*ShipmentIdentifier        `json:"identifier,omitempty" url:"identifier,omitempty"`
	Sources             []*DataSource                `json:"sources,omitempty" url:"sources,omitempty"`
	HsCodes             []*HsCodeInfo                `json:"hs_codes,omitempty" url:"hs_codes,omitempty"`
	ProductDescriptions []string                     `json:"product_descriptions,omitempty" url:"product_descriptions,omitempty"`
	// The unique identifier for a record in the database
	Record string `json:"record" url:"record"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Shipment) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Shipment) UnmarshalJSON(data []byte) error {
	type unmarshaler Shipment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Shipment(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Shipment) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentAddress struct {
	X       *float64 `json:"x,omitempty" url:"x,omitempty"`
	Y       *float64 `json:"y,omitempty" url:"y,omitempty"`
	City    *string  `json:"city,omitempty" url:"city,omitempty"`
	State   *string  `json:"state,omitempty" url:"state,omitempty"`
	Country *string  `json:"country,omitempty" url:"country,omitempty"`
	Value   *string  `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ShipmentAddress) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentAddress(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentAddress) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentCountry struct {
	Value Country `json:"value" url:"value"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ShipmentCountry) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentCountry) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentCountry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentCountry(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentCountry) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentIdentifier struct {
	Value string               `json:"value" url:"value"`
	Type  *BothIdentifierTypes `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ShipmentIdentifier) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentIdentifier) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentIdentifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentIdentifier(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentIdentifier) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentMetadata struct {
	ArrivalCountry []Country `json:"arrival_country,omitempty" url:"arrival_country,omitempty"`
	Jurisdiction   []Country `json:"jurisdiction,omitempty" url:"jurisdiction,omitempty"`
	ReferenceId    string    `json:"reference_id" url:"reference_id"`
	// Unique identifier of the entity
	EntityId         string             `json:"entity_id" url:"entity_id"`
	DepartureAddress *AddressProperties `json:"departure_address,omitempty" url:"departure_address,omitempty"`
	Type             string             `json:"type" url:"type"`
	Sources          []string           `json:"sources,omitempty" url:"sources,omitempty"`
	DepartureCountry []Country          `json:"departure_country,omitempty" url:"departure_country,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ShipmentMetadata) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentMetadata(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentMetadata) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceOrDestinationEntity struct {
	// Unique identifier of the entity
	Id    string   `json:"id" url:"id"`
	Names []string `json:"names,omitempty" url:"names,omitempty"`
	// [Risks](/sayari-library/ontology/risk-factors)
	Risks map[Risk]interface{} `json:"risks,omitempty" url:"risks,omitempty"`
	// [Business Purpose](/sayari-library/ontology/enumerated-types#business-purpose-standard)
	BusinessPurpose []*BusinessPurpose `json:"business_purpose,omitempty" url:"business_purpose,omitempty"`
	// [Countries](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SourceOrDestinationEntity) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceOrDestinationEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceOrDestinationEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceOrDestinationEntity(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceOrDestinationEntity) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupplierMetadata struct {
	LatestShipmentDate *string   `json:"latestShipmentDate,omitempty" url:"latestShipmentDate,omitempty"`
	Shipments          int       `json:"shipments" url:"shipments"`
	HsCodes            []*HsCode `json:"hsCodes,omitempty" url:"hsCodes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SupplierMetadata) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplierMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplierMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplierMetadata(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplierMetadata) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupplierOrBuyer struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount       map[Attributes]int      `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	RelatedEntitiesCount     int                     `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                     `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                     `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string                 `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	RegistrationDate         *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	TranslatedLabel          *EntityTranslatedLabel  `json:"translated_label,omitempty" url:"translated_label,omitempty"`
	HsCode                   *EntityHsCode           `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	ShipmentArrival          *ShipmentArrival        `json:"shipment_arrival,omitempty" url:"shipment_arrival,omitempty"`
	ShipmentDeparture        *ShipmentDeparture      `json:"shipment_departure,omitempty" url:"shipment_departure,omitempty"`
	CompanyType              *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	LatestStatus             *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`
	// [Risk factors](/sayari-library/ontology/risk-factors) associated with the entity.
	Risk EntityRisk `json:"risk,omitempty" url:"risk,omitempty"`
	// Detailed information about the entity's [attributes](/sayari-library/ontology/attributes).
	Attributes *AttributeDetails `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Detailed information about the entity's [relationships](/sayari-library/ontology/relationships).
	Relationships  *EntityRelationships `json:"relationships,omitempty" url:"relationships,omitempty"`
	PossiblySameAs *PossiblySameAs      `json:"possibly_same_as,omitempty" url:"possibly_same_as,omitempty"`
	ReferencedBy   *ReferencedBy        `json:"referenced_by,omitempty" url:"referenced_by,omitempty"`
	Metadata       *SupplierMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SupplierOrBuyer) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplierOrBuyer) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplierOrBuyer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplierOrBuyer(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplierOrBuyer) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type Weight struct {
	Value float64 `json:"value" url:"value"`
	Unit  string  `json:"unit" url:"unit"`
	Type  string  `json:"type" url:"type"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (w *Weight) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *Weight) UnmarshalJSON(data []byte) error {
	type unmarshaler Weight
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Weight(value)

	extraProperties, err := core.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties

	w._rawJSON = json.RawMessage(data)
	return nil
}

func (w *Weight) String() string {
	if len(w._rawJSON) > 0 {
		if value, err := core.StringifyJSON(w._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type HsCode struct {
	Key         string  `json:"key" url:"key"`
	DocCount    int     `json:"doc_count" url:"doc_count"`
	Value       string  `json:"value" url:"value"`
	ValueSimple *string `json:"value_simple,omitempty" url:"value_simple,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HsCode) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCode) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCode(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCode) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HsCodeInfo struct {
	Code        string `json:"code" url:"code"`
	Description string `json:"description" url:"description"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (h *HsCodeInfo) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeInfo(value)

	extraProperties, err := core.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties

	h._rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeInfo) String() string {
	if len(h._rawJSON) > 0 {
		if value, err := core.StringifyJSON(h._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type ShortestPathData struct {
	Source string           `json:"source" url:"source"`
	Target *EntityDetails   `json:"target,omitempty" url:"target,omitempty"`
	Path   []*TraversalPath `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *ShortestPathData) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShortestPathData) UnmarshalJSON(data []byte) error {
	type unmarshaler ShortestPathData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShortestPathData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShortestPathData) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type TraversalData struct {
	Source string           `json:"source" url:"source"`
	Target *EntityDetails   `json:"target,omitempty" url:"target,omitempty"`
	Path   []*TraversalPath `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TraversalData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TraversalData) UnmarshalJSON(data []byte) error {
	type unmarshaler TraversalData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TraversalData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TraversalData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TraversalPath struct {
	Field         string                                       `json:"field" url:"field"`
	Entity        *EntityDetails                               `json:"entity,omitempty" url:"entity,omitempty"`
	Relationships map[Relationships]*TraversalRelationshipData `json:"relationships,omitempty" url:"relationships,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TraversalPath) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TraversalPath) UnmarshalJSON(data []byte) error {
	type unmarshaler TraversalPath
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TraversalPath(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TraversalPath) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TraversalRelationshipData struct {
	Values       []*RelationshipInfo `json:"values,omitempty" url:"values,omitempty"`
	Former       *bool               `json:"former,omitempty" url:"former,omitempty"`
	StartDate    *string             `json:"start_date,omitempty" url:"start_date,omitempty"`
	LastObserved *string             `json:"last_observed,omitempty" url:"last_observed,omitempty"`
	EndDate      *string             `json:"end_date,omitempty" url:"end_date,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (t *TraversalRelationshipData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TraversalRelationshipData) UnmarshalJSON(data []byte) error {
	type unmarshaler TraversalRelationshipData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TraversalRelationshipData(value)

	extraProperties, err := core.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties

	t._rawJSON = json.RawMessage(data)
	return nil
}

func (t *TraversalRelationshipData) String() string {
	if len(t._rawJSON) > 0 {
		if value, err := core.StringifyJSON(t._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}
