// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
	time "time"
)

type AttributeData struct {
	Properties  *Properties `json:"properties,omitempty"`
	Record      []string    `json:"record,omitempty"`
	RecordCount int         `json:"record_count"`
}

type AttributeDetails struct {
	Limit int              `json:"limit"`
	Size  *SizeInfo        `json:"size,omitempty"`
	Data  []*AttributeData `json:"data,omitempty"`
}

type Attributes struct {
	Address *AttributeDetails `json:"address,omitempty"`
	Country *AttributeDetails `json:"country,omitempty"`
	Name    *AttributeDetails `json:"name,omitempty"`
}

type PossiblySameAs struct {
	Limit int                  `json:"limit"`
	Size  *SizeInfo            `json:"size,omitempty"`
	Data  []PossiblySameAsData `json:"data,omitempty"`
}

type PossiblySameAsData = interface{}

type Properties struct {
	Value         string   `json:"value"`
	HouseNumber   *string  `json:"house_number,omitempty"`
	Road          *string  `json:"road,omitempty"`
	City          *string  `json:"city,omitempty"`
	State         *string  `json:"state,omitempty"`
	Postcode      *string  `json:"postcode,omitempty"`
	X             *float64 `json:"x,omitempty"`
	Y             *float64 `json:"y,omitempty"`
	PrecisionCode *string  `json:"precision_code,omitempty"`
	Context       *string  `json:"context,omitempty"`
}

type Record struct {
	Id              string    `json:"id"`
	Label           string    `json:"label"`
	Source          string    `json:"source"`
	PublicationDate time.Time `json:"publication_date"`
	AcquisitionDate time.Time `json:"acquisition_date"`
	ReferencesCount int       `json:"references_count"`
	RecordUrl       string    `json:"record_url"`
	SourceUrl       string    `json:"source_url"`
}

type ReferencedBy struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*ReferencedByData `json:"data,omitempty"`
}

type ReferencedByData struct {
	Record *Record `json:"record,omitempty"`
	Type   string  `json:"type"`
}

type RelationshipData struct {
	Target        *TargetData       `json:"target,omitempty"`
	Types         RelationshipTypes `json:"types,omitempty"`
	Dates         []time.Time       `json:"dates,omitempty"`
	FirstObserved time.Time         `json:"first_observed"`
	LastObserved  time.Time         `json:"last_observed"`
}

type Relationships struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*RelationshipData `json:"data,omitempty"`
}

type TargetData struct {
	Id                string             `json:"id"`
	Label             string             `json:"label"`
	Degree            int                `json:"degree"`
	EntityUrl         string             `json:"entity_url"`
	Pep               bool               `json:"pep"`
	PsaCount          int                `json:"psa_count"`
	Sanctioned        bool               `json:"sanctioned"`
	Closed            bool               `json:"closed"`
	CompanyType       string             `json:"company_type"`
	Type              EntityType         `json:"type,omitempty"`
	Identifiers       []*Identifier      `json:"identifiers,omitempty"`
	Addresses         []string           `json:"addresses,omitempty"`
	Countries         []string           `json:"countries,omitempty"`
	RelationshipCount *RelationshipCount `json:"relationship_count,omitempty"`
	SourceCount       SourceCount        `json:"source_count,omitempty"`
	Risk              Risk               `json:"risk,omitempty"`
	Types             EntityType         `json:"types,omitempty"`
	Dates             []time.Time        `json:"dates,omitempty"`
	FirstObserved     time.Time          `json:"first_observed"`
	LastObserved      time.Time          `json:"last_observed"`
}

type EntitySearchResultsData struct {
	Id                string              `json:"id"`
	Label             string              `json:"label"`
	Degree            int                 `json:"degree"`
	EntityUrl         string              `json:"entity_url"`
	Pep               bool                `json:"pep"`
	PsaCount          int                 `json:"psa_count"`
	Sanctioned        bool                `json:"sanctioned"`
	Closed            bool                `json:"closed"`
	Type              EntityType          `json:"type,omitempty"`
	Identifiers       []*Identifier       `json:"identifiers,omitempty"`
	Addresses         []string            `json:"addresses,omitempty"`
	Countries         []string            `json:"countries,omitempty"`
	RelationshipCount *RelationshipCount  `json:"relationship_count,omitempty"`
	SourceCount       SourceCount         `json:"source_count,omitempty"`
	Risk              Risk                `json:"risk,omitempty"`
	Coordinates       []*Coordinate       `json:"coordinates,omitempty"`
	Matches           map[string][]string `json:"matches,omitempty"`
}

type Coordinate struct {
	Lat     float64 `json:"lat"`
	Lng     float64 `json:"lng"`
	Address string  `json:"address"`
}

type EntityType string

const (
	EntityTypeAircraft             EntityType = "Aircraft"
	EntityTypeCompany              EntityType = "Company"
	EntityTypeGeneric              EntityType = "Generic"
	EntityTypeIntellectualProperty EntityType = "Intellectual Property"
	EntityTypeLegalMatter          EntityType = "Legal Matter"
	EntityTypePerson               EntityType = "Person"
	EntityTypeProperty             EntityType = "Property"
	EntityTypeSecurity             EntityType = "Security"
	EntityTypeShipment             EntityType = "Shipment"
	EntityTypeTradename            EntityType = "Tradename"
	EntityTypeUnknown              EntityType = "Unknown"
	EntityTypeVessel               EntityType = "Vessel"
)

func NewEntityTypeFromString(s string) (EntityType, error) {
	switch s {
	case "Aircraft":
		return EntityTypeAircraft, nil
	case "Company":
		return EntityTypeCompany, nil
	case "Generic":
		return EntityTypeGeneric, nil
	case "Intellectual Property":
		return EntityTypeIntellectualProperty, nil
	case "Legal Matter":
		return EntityTypeLegalMatter, nil
	case "Person":
		return EntityTypePerson, nil
	case "Property":
		return EntityTypeProperty, nil
	case "Security":
		return EntityTypeSecurity, nil
	case "Shipment":
		return EntityTypeShipment, nil
	case "Tradename":
		return EntityTypeTradename, nil
	case "Unknown":
		return EntityTypeUnknown, nil
	case "Vessel":
		return EntityTypeVessel, nil
	}
	var t EntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityType) Ptr() *EntityType {
	return &e
}

type Identifier struct {
	Value int    `json:"value"`
	Type  string `json:"type"`
	Label string `json:"label"`
}

type RelationshipCount struct {
	AuditorOf             *int `json:"auditor_of,omitempty"`
	BeneficialOwnerOf     *int `json:"beneficial_owner_of,omitempty"`
	BranchOf              *int `json:"branch_of,omitempty"`
	DirectorOf            *int `json:"director_of,omitempty"`
	EmployeeOf            *int `json:"employee_of,omitempty"`
	FamilyOf              *int `json:"family_of,omitempty"`
	FounderOf             *int `json:"founder_of,omitempty"`
	IssuerOf              *int `json:"issuer_of,omitempty"`
	LawyerIn              *int `json:"lawyer_in,omitempty"`
	LawyerOf              *int `json:"lawyer_of,omitempty"`
	LegalPredecessorOf    *int `json:"legal_predecessor_of,omitempty"`
	LegalRepresentativeOf *int `json:"legal_representative_of,omitempty"`
	LegalSuccessorOf      *int `json:"legal_successor_of,omitempty"`
	LinkedTo              *int `json:"linked_to,omitempty"`
	LiquidatorOf          *int `json:"liquidator_of,omitempty"`
	ManagerOf             *int `json:"manager_of,omitempty"`
	MemberOfTheBoardOf    *int `json:"member_of_the_board_of,omitempty"`
	OfficerOf             *int `json:"officer_of,omitempty"`
	OwnerOf               *int `json:"owner_of,omitempty"`
	PartnerOf             *int `json:"partner_of,omitempty"`
	PartyTo               *int `json:"party_to,omitempty"`
	ReceiverOf            *int `json:"receiver_of,omitempty"`
	RegisteredAgentOf     *int `json:"registered_agent_of,omitempty"`
	ShareholderOf         *int `json:"shareholder_of,omitempty"`
	ShipperOf             *int `json:"shipper_of,omitempty"`
	ShipsTo               *int `json:"ships_to,omitempty"`
	SubsidiaryOf          *int `json:"subsidiary_of,omitempty"`
	SupervisorOf          *int `json:"supervisor_of,omitempty"`
}

type RelationshipInfo struct {
	Record          string      `json:"record"`
	Attributes      interface{} `json:"attributes,omitempty"`
	AcquisitionDate time.Time   `json:"acquisition_date"`
}

type RelationshipType string

const (
	RelationshipTypeAuditorOf             RelationshipType = "auditor_of"
	RelationshipTypeBeneficialOwnerOf     RelationshipType = "beneficial_owner_of"
	RelationshipTypeBranchOf              RelationshipType = "branch_of"
	RelationshipTypeDirectorOf            RelationshipType = "director_of"
	RelationshipTypeEmployeeOf            RelationshipType = "employee_of"
	RelationshipTypeFamilyOf              RelationshipType = "family_of"
	RelationshipTypeFounderOf             RelationshipType = "founder_of"
	RelationshipTypeIssuerOf              RelationshipType = "issuer_of"
	RelationshipTypeLawyerIn              RelationshipType = "lawyer_in"
	RelationshipTypeLawyerOf              RelationshipType = "lawyer_of"
	RelationshipTypeLegalPredecessorOf    RelationshipType = "legal_predecessor_of"
	RelationshipTypeLegalRepresentativeOf RelationshipType = "legal_representative_of"
	RelationshipTypeLegalSuccessorOf      RelationshipType = "legal_successor_of"
	RelationshipTypeLinkedTo              RelationshipType = "linked_to"
	RelationshipTypeLiquidatorOf          RelationshipType = "liquidator_of"
	RelationshipTypeManagerOf             RelationshipType = "manager_of"
	RelationshipTypeMemberOfTheBoardOf    RelationshipType = "member_of_the_board_of"
	RelationshipTypeOfficerOf             RelationshipType = "officer_of"
	RelationshipTypeOwnerOf               RelationshipType = "owner_of"
	RelationshipTypePartnerOf             RelationshipType = "partner_of"
	RelationshipTypePartyTo               RelationshipType = "party_to"
	RelationshipTypeReceiverOf            RelationshipType = "receiver_of"
	RelationshipTypeRegisteredAgentOf     RelationshipType = "registered_agent_of"
	RelationshipTypeShareholderOf         RelationshipType = "shareholder_of"
	RelationshipTypeShipperOf             RelationshipType = "shipper_of"
	RelationshipTypeShipsTo               RelationshipType = "ships_to"
	RelationshipTypeSubsidiaryOf          RelationshipType = "subsidiary_of"
	RelationshipTypeSupervisorOf          RelationshipType = "supervisor_of"
)

func NewRelationshipTypeFromString(s string) (RelationshipType, error) {
	switch s {
	case "auditor_of":
		return RelationshipTypeAuditorOf, nil
	case "beneficial_owner_of":
		return RelationshipTypeBeneficialOwnerOf, nil
	case "branch_of":
		return RelationshipTypeBranchOf, nil
	case "director_of":
		return RelationshipTypeDirectorOf, nil
	case "employee_of":
		return RelationshipTypeEmployeeOf, nil
	case "family_of":
		return RelationshipTypeFamilyOf, nil
	case "founder_of":
		return RelationshipTypeFounderOf, nil
	case "issuer_of":
		return RelationshipTypeIssuerOf, nil
	case "lawyer_in":
		return RelationshipTypeLawyerIn, nil
	case "lawyer_of":
		return RelationshipTypeLawyerOf, nil
	case "legal_predecessor_of":
		return RelationshipTypeLegalPredecessorOf, nil
	case "legal_representative_of":
		return RelationshipTypeLegalRepresentativeOf, nil
	case "legal_successor_of":
		return RelationshipTypeLegalSuccessorOf, nil
	case "linked_to":
		return RelationshipTypeLinkedTo, nil
	case "liquidator_of":
		return RelationshipTypeLiquidatorOf, nil
	case "manager_of":
		return RelationshipTypeManagerOf, nil
	case "member_of_the_board_of":
		return RelationshipTypeMemberOfTheBoardOf, nil
	case "officer_of":
		return RelationshipTypeOfficerOf, nil
	case "owner_of":
		return RelationshipTypeOwnerOf, nil
	case "partner_of":
		return RelationshipTypePartnerOf, nil
	case "party_to":
		return RelationshipTypePartyTo, nil
	case "receiver_of":
		return RelationshipTypeReceiverOf, nil
	case "registered_agent_of":
		return RelationshipTypeRegisteredAgentOf, nil
	case "shareholder_of":
		return RelationshipTypeShareholderOf, nil
	case "shipper_of":
		return RelationshipTypeShipperOf, nil
	case "ships_to":
		return RelationshipTypeShipsTo, nil
	case "subsidiary_of":
		return RelationshipTypeSubsidiaryOf, nil
	case "supervisor_of":
		return RelationshipTypeSupervisorOf, nil
	}
	var t RelationshipType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RelationshipType) Ptr() *RelationshipType {
	return &r
}

type RelationshipTypes = map[RelationshipType]*RelationshipInfo

type Risk = map[string]*RiskInfo

type RiskInfo struct {
	Value    float64             `json:"value"`
	Metadata map[string][]string `json:"metadata,omitempty"`
	Level    string              `json:"level"`
}

type SizeInfo struct {
	Count     int    `json:"count"`
	Qualifier string `json:"qualifier"`
}

type SourceCount = map[string]*SourceCountInfo

type SourceCountInfo struct {
	Count int    `json:"count"`
	Label string `json:"label"`
}
