// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
)

type MatchExplanation struct {
	Matched  string `json:"matched"`
	Uploaded string `json:"uploaded"`
}

type ResolutionResponseFields struct {
	Name        []string `json:"name,omitempty"`
	Identifier  []string `json:"identifier,omitempty"`
	Country     []string `json:"country,omitempty"`
	Address     []string `json:"address,omitempty"`
	DateOfBirth []string `json:"date_of_birth,omitempty"`
	Contact     []string `json:"contact,omitempty"`
	Type        []string `json:"type,omitempty"`
}

type ResolutionResult struct {
	Score          float64                        `json:"score"`
	EntityId       string                         `json:"entity_id"`
	Label          string                         `json:"label"`
	Type           EntityType                     `json:"type,omitempty"`
	Identifiers    []*Identifier                  `json:"identifiers,omitempty"`
	PsaId          *int                           `json:"psa_id,omitempty"`
	Addresses      []string                       `json:"addresses,omitempty"`
	Countries      []string                       `json:"countries,omitempty"`
	Sources        []string                       `json:"sources,omitempty"`
	MatchedQueries []string                       `json:"matched_queries,omitempty"`
	Highlight      map[string][]string            `json:"highlight,omitempty"`
	Explanation    map[string][]*MatchExplanation `json:"explanation,omitempty"`
}

type Attribute string

const (
	AttributeAdditionalInformation Attribute = "additional_information"
	AttributeAddress               Attribute = "address"
	AttributeBusinessPurpose       Attribute = "business_purpose"
	AttributeCompanyType           Attribute = "company_type"
	AttributeContact               Attribute = "contact"
	AttributeCountry               Attribute = "country"
	AttributeDateOfBirth           Attribute = "date_of_birth"
	AttributeFinancials            Attribute = "financials"
	AttributeGender                Attribute = "gender"
	AttributeIdentifier            Attribute = "identifier"
	AttributeMeasurement           Attribute = "measurement"
	AttributeMonetaryValue         Attribute = "monetary_value"
	AttributeName                  Attribute = "name"
	AttributePosition              Attribute = "position"
	AttributeRiskIntelligence      Attribute = "risk_intelligence"
	AttributeShares                Attribute = "shares"
	AttributeStatus                Attribute = "status"
	AttributeTranslatedName        Attribute = "translated_name"
	AttributeWeakIdentifier        Attribute = "weak_identifier"
)

func NewAttributeFromString(s string) (Attribute, error) {
	switch s {
	case "additional_information":
		return AttributeAdditionalInformation, nil
	case "address":
		return AttributeAddress, nil
	case "business_purpose":
		return AttributeBusinessPurpose, nil
	case "company_type":
		return AttributeCompanyType, nil
	case "contact":
		return AttributeContact, nil
	case "country":
		return AttributeCountry, nil
	case "date_of_birth":
		return AttributeDateOfBirth, nil
	case "financials":
		return AttributeFinancials, nil
	case "gender":
		return AttributeGender, nil
	case "identifier":
		return AttributeIdentifier, nil
	case "measurement":
		return AttributeMeasurement, nil
	case "monetary_value":
		return AttributeMonetaryValue, nil
	case "name":
		return AttributeName, nil
	case "position":
		return AttributePosition, nil
	case "risk_intelligence":
		return AttributeRiskIntelligence, nil
	case "shares":
		return AttributeShares, nil
	case "status":
		return AttributeStatus, nil
	case "translated_name":
		return AttributeTranslatedName, nil
	case "weak_identifier":
		return AttributeWeakIdentifier, nil
	}
	var t Attribute
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a Attribute) Ptr() *Attribute {
	return &a
}

type AttributeData struct {
	Properties  *Properties `json:"properties,omitempty"`
	Record      []string    `json:"record,omitempty"`
	RecordCount int         `json:"record_count"`
}

type AttributeDetails struct {
	Limit int              `json:"limit"`
	Size  *SizeInfo        `json:"size,omitempty"`
	Data  []*AttributeData `json:"data,omitempty"`
}

type Coordinate struct {
	Lat     float64 `json:"lat"`
	Lng     float64 `json:"lng"`
	Address string  `json:"address"`
}

type EmbeddedEntity struct {
	Id                EntityId           `json:"id"`
	Label             string             `json:"label"`
	Degree            int                `json:"degree"`
	Closed            bool               `json:"closed"`
	EntityUrl         string             `json:"entity_url"`
	Pep               bool               `json:"pep"`
	PsaCount          int                `json:"psa_count"`
	Sanctioned        bool               `json:"sanctioned"`
	Type              EntityType         `json:"type,omitempty"`
	Identifiers       []*Identifier      `json:"identifiers,omitempty"`
	Countries         []string           `json:"countries,omitempty"`
	PsaSanctioned     *string            `json:"psa_sanctioned,omitempty"`
	SourceCount       SourceCount        `json:"source_count,omitempty"`
	Addresses         []string           `json:"addresses,omitempty"`
	DateOfBirth       *string            `json:"date_of_birth,omitempty"`
	RelationshipCount *RelationshipCount `json:"relationship_count,omitempty"`
}

type EntityDetails struct {
	Id                EntityId                        `json:"id"`
	Label             string                          `json:"label"`
	Degree            int                             `json:"degree"`
	Closed            bool                            `json:"closed"`
	EntityUrl         string                          `json:"entity_url"`
	Pep               bool                            `json:"pep"`
	PsaCount          int                             `json:"psa_count"`
	Sanctioned        bool                            `json:"sanctioned"`
	Type              EntityType                      `json:"type,omitempty"`
	Identifiers       []*Identifier                   `json:"identifiers,omitempty"`
	Countries         []string                        `json:"countries,omitempty"`
	PsaSanctioned     *string                         `json:"psa_sanctioned,omitempty"`
	SourceCount       SourceCount                     `json:"source_count,omitempty"`
	Addresses         []string                        `json:"addresses,omitempty"`
	DateOfBirth       *string                         `json:"date_of_birth,omitempty"`
	RelationshipCount *RelationshipCount              `json:"relationship_count,omitempty"`
	RegistrationDate  *string                         `json:"registration_date,omitempty"`
	TranslatedLabel   *string                         `json:"translated_label,omitempty"`
	HsCode            *string                         `json:"hs_code,omitempty"`
	ShipmentArrival   *string                         `json:"shipment_arrival,omitempty"`
	ShipmentDeparture *string                         `json:"shipment_departure,omitempty"`
	CompanyType       *string                         `json:"company_type,omitempty"`
	LatestStatus      *Status                         `json:"latest_status,omitempty"`
	Risk              Risk                            `json:"risk,omitempty"`
	Attributes        map[Attribute]*AttributeDetails `json:"attributes,omitempty"`
	Relationships     *Relationships                  `json:"relationships,omitempty"`
	PossiblySameAs    *PossiblySameAs                 `json:"possibly_same_as,omitempty"`
	ReferencedBy      *ReferencedBy                   `json:"referenced_by,omitempty"`
	Matches           map[string][]string             `json:"matches,omitempty"`
}

// The unique identifier for an entity in the database
type EntityId = string

type EntityType string

const (
	EntityTypeAircraft             EntityType = "aircraft"
	EntityTypeCompany              EntityType = "company"
	EntityTypeGeneric              EntityType = "generic"
	EntityTypeIntellectualProperty EntityType = "intellectual_property"
	EntityTypeLegalMatter          EntityType = "legal_matter"
	EntityTypePerson               EntityType = "person"
	EntityTypeProperty             EntityType = "property"
	EntityTypeSecurity             EntityType = "security"
	EntityTypeShipment             EntityType = "shipment"
	EntityTypeTradename            EntityType = "tradename"
	EntityTypeUnknown              EntityType = "unknown"
	EntityTypeVessel               EntityType = "vessel"
)

func NewEntityTypeFromString(s string) (EntityType, error) {
	switch s {
	case "aircraft":
		return EntityTypeAircraft, nil
	case "company":
		return EntityTypeCompany, nil
	case "generic":
		return EntityTypeGeneric, nil
	case "intellectual_property":
		return EntityTypeIntellectualProperty, nil
	case "legal_matter":
		return EntityTypeLegalMatter, nil
	case "person":
		return EntityTypePerson, nil
	case "property":
		return EntityTypeProperty, nil
	case "security":
		return EntityTypeSecurity, nil
	case "shipment":
		return EntityTypeShipment, nil
	case "tradename":
		return EntityTypeTradename, nil
	case "unknown":
		return EntityTypeUnknown, nil
	case "vessel":
		return EntityTypeVessel, nil
	}
	var t EntityType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e EntityType) Ptr() *EntityType {
	return &e
}

type Identifier struct {
	Value string `json:"value"`
	Type  string `json:"type"`
	Label string `json:"label"`
}

type PaginatedResponse struct {
	Limit int       `json:"limit"`
	Size  *SizeInfo `json:"size,omitempty"`
}

type PossiblySameAs struct {
	Limit int                  `json:"limit"`
	Size  *SizeInfo            `json:"size,omitempty"`
	Data  []PossiblySameAsData `json:"data,omitempty"`
}

type PossiblySameAsData = interface{}

type Properties struct {
	Value         *string  `json:"value,omitempty"`
	HouseNumber   *string  `json:"house_number,omitempty"`
	Road          *string  `json:"road,omitempty"`
	City          *string  `json:"city,omitempty"`
	State         *string  `json:"state,omitempty"`
	Postcode      *string  `json:"postcode,omitempty"`
	X             *float64 `json:"x,omitempty"`
	Y             *float64 `json:"y,omitempty"`
	PrecisionCode *string  `json:"precision_code,omitempty"`
	Context       *string  `json:"context,omitempty"`
}

type RecordDetails struct {
	Id              string              `json:"id"`
	Label           string              `json:"label"`
	Source          string              `json:"source"`
	PublicationDate *string             `json:"publication_date,omitempty"`
	AcquisitionDate string              `json:"acquisition_date"`
	ReferencesCount int                 `json:"references_count"`
	RecordUrl       string              `json:"record_url"`
	SourceUrl       *string             `json:"source_url,omitempty"`
	Matches         map[string][]string `json:"matches,omitempty"`
}

type ReferencedBy struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*ReferencedByData `json:"data,omitempty"`
}

type ReferencedByData struct {
	Record *RecordDetails `json:"record,omitempty"`
	Type   string         `json:"type"`
}

type RelationshipAttributeValue struct {
	Value     *string `json:"value,omitempty"`
	NumShares *int    `json:"num_shares,omitempty"`
}

type RelationshipCount struct {
	AuditorOf             *int `json:"auditor_of,omitempty"`
	BeneficialOwnerOf     *int `json:"beneficial_owner_of,omitempty"`
	BranchOf              *int `json:"branch_of,omitempty"`
	DirectorOf            *int `json:"director_of,omitempty"`
	EmployeeOf            *int `json:"employee_of,omitempty"`
	FamilyOf              *int `json:"family_of,omitempty"`
	FounderOf             *int `json:"founder_of,omitempty"`
	IssuerOf              *int `json:"issuer_of,omitempty"`
	LawyerIn              *int `json:"lawyer_in,omitempty"`
	LawyerOf              *int `json:"lawyer_of,omitempty"`
	LegalPredecessorOf    *int `json:"legal_predecessor_of,omitempty"`
	LegalRepresentativeOf *int `json:"legal_representative_of,omitempty"`
	LegalSuccessorOf      *int `json:"legal_successor_of,omitempty"`
	LinkedTo              *int `json:"linked_to,omitempty"`
	LiquidatorOf          *int `json:"liquidator_of,omitempty"`
	ManagerOf             *int `json:"manager_of,omitempty"`
	MemberOfTheBoardOf    *int `json:"member_of_the_board_of,omitempty"`
	OfficerOf             *int `json:"officer_of,omitempty"`
	OwnerOf               *int `json:"owner_of,omitempty"`
	PartnerOf             *int `json:"partner_of,omitempty"`
	PartyTo               *int `json:"party_to,omitempty"`
	ReceiverOf            *int `json:"receiver_of,omitempty"`
	RegisteredAgentOf     *int `json:"registered_agent_of,omitempty"`
	ShareholderOf         *int `json:"shareholder_of,omitempty"`
	ShipperOf             *int `json:"shipper_of,omitempty"`
	ShipsTo               *int `json:"ships_to,omitempty"`
	SubsidiaryOf          *int `json:"subsidiary_of,omitempty"`
	SupervisorOf          *int `json:"supervisor_of,omitempty"`
}

type RelationshipData struct {
	Target        *EmbeddedEntity   `json:"target,omitempty"`
	Types         RelationshipTypes `json:"types,omitempty"`
	Dates         []string          `json:"dates,omitempty"`
	FirstObserved string            `json:"first_observed"`
	LastObserved  string            `json:"last_observed"`
	StartDate     *string           `json:"start_date,omitempty"`
}

type RelationshipInfo struct {
	Record          string                                      `json:"record"`
	Attributes      map[Attribute][]*RelationshipAttributeValue `json:"attributes,omitempty"`
	FromDate        *string                                     `json:"from_date,omitempty"`
	AcquisitionDate string                                      `json:"acquisition_date"`
	PublicationDate *string                                     `json:"publication_date,omitempty"`
}

type RelationshipType string

const (
	RelationshipTypeAuditorOf              RelationshipType = "auditor_of"
	RelationshipTypeBeneficialOwnerOf      RelationshipType = "beneficial_owner_of"
	RelationshipTypeBranchOf               RelationshipType = "branch_of"
	RelationshipTypeDirectorOf             RelationshipType = "director_of"
	RelationshipTypeEmployeeOf             RelationshipType = "employee_of"
	RelationshipTypeFamilyOf               RelationshipType = "family_of"
	RelationshipTypeFounderOf              RelationshipType = "founder_of"
	RelationshipTypeIssuerOf               RelationshipType = "issuer_of"
	RelationshipTypeLawyerIn               RelationshipType = "lawyer_in"
	RelationshipTypeLawyerOf               RelationshipType = "lawyer_of"
	RelationshipTypeLegalPredecessorOf     RelationshipType = "legal_predecessor_of"
	RelationshipTypeLegalRepresentativeOf  RelationshipType = "legal_representative_of"
	RelationshipTypeLegalSuccessorOf       RelationshipType = "legal_successor_of"
	RelationshipTypeLinkedTo               RelationshipType = "linked_to"
	RelationshipTypeLiquidatorOf           RelationshipType = "liquidator_of"
	RelationshipTypeManagerOf              RelationshipType = "manager_of"
	RelationshipTypeMemberOfTheBoardOf     RelationshipType = "member_of_the_board_of"
	RelationshipTypeOfficerOf              RelationshipType = "officer_of"
	RelationshipTypeOwnerOf                RelationshipType = "owner_of"
	RelationshipTypePartnerOf              RelationshipType = "partner_of"
	RelationshipTypePartyTo                RelationshipType = "party_to"
	RelationshipTypeReceiverOf             RelationshipType = "receiver_of"
	RelationshipTypeRegisteredAgentOf      RelationshipType = "registered_agent_of"
	RelationshipTypeShareholderOf          RelationshipType = "shareholder_of"
	RelationshipTypeShipperOf              RelationshipType = "shipper_of"
	RelationshipTypeShipsTo                RelationshipType = "ships_to"
	RelationshipTypeSubsidiaryOf           RelationshipType = "subsidiary_of"
	RelationshipTypeSupervisorOf           RelationshipType = "supervisor_of"
	RelationshipTypeHasAuditor             RelationshipType = "has_auditor"
	RelationshipTypeHasBeneficialOwner     RelationshipType = "has_beneficial_owner"
	RelationshipTypeHasBranch              RelationshipType = "has_branch"
	RelationshipTypeHasDirector            RelationshipType = "has_director"
	RelationshipTypeHasEmployee            RelationshipType = "has_employee"
	RelationshipTypeHasFounder             RelationshipType = "has_founder"
	RelationshipTypeHasIssuer              RelationshipType = "has_issuer"
	RelationshipTypeHasLawyer              RelationshipType = "has_lawyer"
	RelationshipTypeHasLegalPredecessor    RelationshipType = "has_legal_predecessor"
	RelationshipTypeHasLegalRepresentative RelationshipType = "has_legal_representative"
	RelationshipTypeHasLegalSuccessor      RelationshipType = "has_legal_successor"
	RelationshipTypeHasLiquidator          RelationshipType = "has_liquidator"
	RelationshipTypeHasManager             RelationshipType = "has_manager"
	RelationshipTypeHasMemberOfTheBoard    RelationshipType = "has_member_of_the_board"
	RelationshipTypeHasOfficer             RelationshipType = "has_officer"
	RelationshipTypeHasOwner               RelationshipType = "has_owner"
	RelationshipTypeHasPartner             RelationshipType = "has_partner"
	RelationshipTypeHasParty               RelationshipType = "has_party"
	RelationshipTypeReceivedBy             RelationshipType = "received_by"
	RelationshipTypeHasRegisteredAgent     RelationshipType = "has_registered_agent"
	RelationshipTypeHasShareholder         RelationshipType = "has_shareholder"
	RelationshipTypeShippedBy              RelationshipType = "shipped_by"
	RelationshipTypeReceivesFrom           RelationshipType = "receives_from"
	RelationshipTypeHasSubsidiary          RelationshipType = "has_subsidiary"
	RelationshipTypeHasSupervisor          RelationshipType = "has_supervisor"
)

func NewRelationshipTypeFromString(s string) (RelationshipType, error) {
	switch s {
	case "auditor_of":
		return RelationshipTypeAuditorOf, nil
	case "beneficial_owner_of":
		return RelationshipTypeBeneficialOwnerOf, nil
	case "branch_of":
		return RelationshipTypeBranchOf, nil
	case "director_of":
		return RelationshipTypeDirectorOf, nil
	case "employee_of":
		return RelationshipTypeEmployeeOf, nil
	case "family_of":
		return RelationshipTypeFamilyOf, nil
	case "founder_of":
		return RelationshipTypeFounderOf, nil
	case "issuer_of":
		return RelationshipTypeIssuerOf, nil
	case "lawyer_in":
		return RelationshipTypeLawyerIn, nil
	case "lawyer_of":
		return RelationshipTypeLawyerOf, nil
	case "legal_predecessor_of":
		return RelationshipTypeLegalPredecessorOf, nil
	case "legal_representative_of":
		return RelationshipTypeLegalRepresentativeOf, nil
	case "legal_successor_of":
		return RelationshipTypeLegalSuccessorOf, nil
	case "linked_to":
		return RelationshipTypeLinkedTo, nil
	case "liquidator_of":
		return RelationshipTypeLiquidatorOf, nil
	case "manager_of":
		return RelationshipTypeManagerOf, nil
	case "member_of_the_board_of":
		return RelationshipTypeMemberOfTheBoardOf, nil
	case "officer_of":
		return RelationshipTypeOfficerOf, nil
	case "owner_of":
		return RelationshipTypeOwnerOf, nil
	case "partner_of":
		return RelationshipTypePartnerOf, nil
	case "party_to":
		return RelationshipTypePartyTo, nil
	case "receiver_of":
		return RelationshipTypeReceiverOf, nil
	case "registered_agent_of":
		return RelationshipTypeRegisteredAgentOf, nil
	case "shareholder_of":
		return RelationshipTypeShareholderOf, nil
	case "shipper_of":
		return RelationshipTypeShipperOf, nil
	case "ships_to":
		return RelationshipTypeShipsTo, nil
	case "subsidiary_of":
		return RelationshipTypeSubsidiaryOf, nil
	case "supervisor_of":
		return RelationshipTypeSupervisorOf, nil
	case "has_auditor":
		return RelationshipTypeHasAuditor, nil
	case "has_beneficial_owner":
		return RelationshipTypeHasBeneficialOwner, nil
	case "has_branch":
		return RelationshipTypeHasBranch, nil
	case "has_director":
		return RelationshipTypeHasDirector, nil
	case "has_employee":
		return RelationshipTypeHasEmployee, nil
	case "has_founder":
		return RelationshipTypeHasFounder, nil
	case "has_issuer":
		return RelationshipTypeHasIssuer, nil
	case "has_lawyer":
		return RelationshipTypeHasLawyer, nil
	case "has_legal_predecessor":
		return RelationshipTypeHasLegalPredecessor, nil
	case "has_legal_representative":
		return RelationshipTypeHasLegalRepresentative, nil
	case "has_legal_successor":
		return RelationshipTypeHasLegalSuccessor, nil
	case "has_liquidator":
		return RelationshipTypeHasLiquidator, nil
	case "has_manager":
		return RelationshipTypeHasManager, nil
	case "has_member_of_the_board":
		return RelationshipTypeHasMemberOfTheBoard, nil
	case "has_officer":
		return RelationshipTypeHasOfficer, nil
	case "has_owner":
		return RelationshipTypeHasOwner, nil
	case "has_partner":
		return RelationshipTypeHasPartner, nil
	case "has_party":
		return RelationshipTypeHasParty, nil
	case "received_by":
		return RelationshipTypeReceivedBy, nil
	case "has_registered_agent":
		return RelationshipTypeHasRegisteredAgent, nil
	case "has_shareholder":
		return RelationshipTypeHasShareholder, nil
	case "shipped_by":
		return RelationshipTypeShippedBy, nil
	case "receives_from":
		return RelationshipTypeReceivesFrom, nil
	case "has_subsidiary":
		return RelationshipTypeHasSubsidiary, nil
	case "has_supervisor":
		return RelationshipTypeHasSupervisor, nil
	}
	var t RelationshipType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RelationshipType) Ptr() *RelationshipType {
	return &r
}

type RelationshipTypes = map[RelationshipType][]*RelationshipInfo

type Relationships struct {
	Limit int                 `json:"limit"`
	Size  *SizeInfo           `json:"size,omitempty"`
	Data  []*RelationshipData `json:"data,omitempty"`
}

type Risk = map[string]*RiskInfo

type RiskInfo struct {
	Value    interface{}            `json:"value,omitempty"`
	Metadata map[string]interface{} `json:"metadata,omitempty"`
	Level    string                 `json:"level"`
}

type SourceCount = map[string]*SourceCountInfo

type SourceCountInfo struct {
	Count int    `json:"count"`
	Label string `json:"label"`
}

type Status struct {
	Status string  `json:"status"`
	Date   *string `json:"date,omitempty"`
}

type SizeInfo struct {
	Count     int    `json:"count"`
	Qualifier string `json:"qualifier"`
}

type ShortestPathData struct {
	Target *EntityDetails   `json:"target,omitempty"`
	Path   []*TraversalPath `json:"path,omitempty"`
}

type TraversalData struct {
	Source string           `json:"source"`
	Target *EntityDetails   `json:"target,omitempty"`
	Path   []*TraversalPath `json:"path,omitempty"`
}

type TraversalPath struct {
	Field         string                                `json:"field"`
	Entity        *EntityDetails                        `json:"entity,omitempty"`
	Relationships map[string]*TraversalRelationshipData `json:"relationships,omitempty"`
}

type TraversalRelationshipData struct {
	Values       []*RelationshipInfo `json:"values,omitempty"`
	LastObserved *string             `json:"last_observed,omitempty"`
}
