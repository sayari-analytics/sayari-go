// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
	time "time"
)

type NegativeNews struct {
	// Target entity name for adverse media screening.
	Name string `json:"-" url:"name"`
	// Risk category filter for targeted screening. Each topic represents a distinct risk domain (e.g., `environmental` for environmental violations, `financial` for financial misconduct).
	Topic *Topics `json:"-" url:"topic,omitempty"`
	// Date cutoff for article inclusion in `YYYY-MM-DD` format. If provided, only articles published before this date will be included in results.
	Until *time.Time `json:"-" url:"until,omitempty" format:"date"`
}

// Array of analyzed news articles and risk assessments. Each article includes source metadata and identified risk categories based on content analysis.
type Article struct {
	// Article publication date
	Published string `json:"published" url:"published"`
	// Array of risk flags
	RiskFlags []string `json:"risk_flags,omitempty" url:"risk_flags,omitempty"`
	// Contains the search query and associated terms used to find the article
	SearchTerm interface{} `json:"search_term,omitempty" url:"search_term,omitempty"`
	// Brief excerpt or summary of the article content
	Snippet string `json:"snippet" url:"snippet"`
	// Name of the publishing organization or media outlet
	Source string `json:"source" url:"source"`
	// Article headline or title from the source publication
	Title string `json:"title" url:"title"`
	// Direct URL link to the original article
	Url string `json:"url" url:"url"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (a *Article) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Article) UnmarshalJSON(data []byte) error {
	type unmarshaler Article
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Article(value)

	extraProperties, err := core.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties

	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *Article) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type NegativeNewsResponse = []*Article

type Topics string

const (
	TopicsBasic         Topics = "basic"
	TopicsEnvironmental Topics = "environmental"
	TopicsSocial        Topics = "social"
	TopicsCybersecurity Topics = "cybersecurity"
	TopicsDisruption    Topics = "disruption"
	TopicsCriminal      Topics = "criminal"
	TopicsReputational  Topics = "reputational"
	TopicsFinancial     Topics = "financial"
	TopicsRegulatory    Topics = "regulatory"
	TopicsLegal         Topics = "legal"
	TopicsMisconduct    Topics = "misconduct"
	TopicsTerrorism     Topics = "terrorism"
	TopicsSanctions     Topics = "sanctions"
	TopicsAll           Topics = "all"
)

func NewTopicsFromString(s string) (Topics, error) {
	switch s {
	case "basic":
		return TopicsBasic, nil
	case "environmental":
		return TopicsEnvironmental, nil
	case "social":
		return TopicsSocial, nil
	case "cybersecurity":
		return TopicsCybersecurity, nil
	case "disruption":
		return TopicsDisruption, nil
	case "criminal":
		return TopicsCriminal, nil
	case "reputational":
		return TopicsReputational, nil
	case "financial":
		return TopicsFinancial, nil
	case "regulatory":
		return TopicsRegulatory, nil
	case "legal":
		return TopicsLegal, nil
	case "misconduct":
		return TopicsMisconduct, nil
	case "terrorism":
		return TopicsTerrorism, nil
	case "sanctions":
		return TopicsSanctions, nil
	case "all":
		return TopicsAll, nil
	}
	var t Topics
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (t Topics) Ptr() *Topics {
	return &t
}
