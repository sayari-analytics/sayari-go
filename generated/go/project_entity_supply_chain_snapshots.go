// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type CreateProjectEntitySupplyChainSnapshotRequest struct {
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateProjectEntitySupplyChainSnapshotRequest) GetLabel() string {
	if c == nil {
		return ""
	}
	return c.Label
}

func (c *CreateProjectEntitySupplyChainSnapshotRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateProjectEntitySupplyChainSnapshotRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateProjectEntitySupplyChainSnapshotRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateProjectEntitySupplyChainSnapshotRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateProjectEntitySupplyChainSnapshotRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateProjectEntitySupplyChainSnapshotResponse struct {
	SnapshotId string `json:"snapshot_id" url:"snapshot_id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateProjectEntitySupplyChainSnapshotResponse) GetSnapshotId() string {
	if c == nil {
		return ""
	}
	return c.SnapshotId
}

func (c *CreateProjectEntitySupplyChainSnapshotResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateProjectEntitySupplyChainSnapshotResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateProjectEntitySupplyChainSnapshotResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateProjectEntitySupplyChainSnapshotResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateProjectEntitySupplyChainSnapshotResponse) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type ProjectEntitySupplyChainSnapshotByIdResponse struct {
	Data *ProjectEntitySupplyChainSnapshotDetailData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainSnapshotByIdResponse) GetData() *ProjectEntitySupplyChainSnapshotDetailData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntitySupplyChainSnapshotByIdResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainSnapshotByIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainSnapshotByIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainSnapshotByIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainSnapshotByIdResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitySupplyChainSnapshotData struct {
	SnapshotId     string `json:"snapshot_id" url:"snapshot_id"`
	Label          string `json:"label" url:"label"`
	ReleaseTag     string `json:"release_tag" url:"release_tag"`
	PartialResults bool   `json:"partial_results" url:"partial_results"`
	ExploredCount  int    `json:"explored_count" url:"explored_count"`
	CreatedAt      string `json:"created_at" url:"created_at"`
	UpdatedAt      string `json:"updated_at" url:"updated_at"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainSnapshotData) GetSnapshotId() string {
	if p == nil {
		return ""
	}
	return p.SnapshotId
}

func (p *ProjectEntitySupplyChainSnapshotData) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *ProjectEntitySupplyChainSnapshotData) GetReleaseTag() string {
	if p == nil {
		return ""
	}
	return p.ReleaseTag
}

func (p *ProjectEntitySupplyChainSnapshotData) GetPartialResults() bool {
	if p == nil {
		return false
	}
	return p.PartialResults
}

func (p *ProjectEntitySupplyChainSnapshotData) GetExploredCount() int {
	if p == nil {
		return 0
	}
	return p.ExploredCount
}

func (p *ProjectEntitySupplyChainSnapshotData) GetCreatedAt() string {
	if p == nil {
		return ""
	}
	return p.CreatedAt
}

func (p *ProjectEntitySupplyChainSnapshotData) GetUpdatedAt() string {
	if p == nil {
		return ""
	}
	return p.UpdatedAt
}

func (p *ProjectEntitySupplyChainSnapshotData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainSnapshotData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainSnapshotData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainSnapshotData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainSnapshotData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitySupplyChainSnapshotDetailData struct {
	SnapshotId     string             `json:"snapshot_id" url:"snapshot_id"`
	Label          string             `json:"label" url:"label"`
	ReleaseTag     string             `json:"release_tag" url:"release_tag"`
	PartialResults bool               `json:"partial_results" url:"partial_results"`
	ExploredCount  int                `json:"explored_count" url:"explored_count"`
	CreatedAt      string             `json:"created_at" url:"created_at"`
	UpdatedAt      string             `json:"updated_at" url:"updated_at"`
	Nodes          []*SupplyChainNode `json:"nodes,omitempty" url:"nodes,omitempty"`
	Edges          []*SupplyChainEdge `json:"edges,omitempty" url:"edges,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetSnapshotId() string {
	if p == nil {
		return ""
	}
	return p.SnapshotId
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetReleaseTag() string {
	if p == nil {
		return ""
	}
	return p.ReleaseTag
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetPartialResults() bool {
	if p == nil {
		return false
	}
	return p.PartialResults
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetExploredCount() int {
	if p == nil {
		return 0
	}
	return p.ExploredCount
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetCreatedAt() string {
	if p == nil {
		return ""
	}
	return p.CreatedAt
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetUpdatedAt() string {
	if p == nil {
		return ""
	}
	return p.UpdatedAt
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetNodes() []*SupplyChainNode {
	if p == nil {
		return nil
	}
	return p.Nodes
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetEdges() []*SupplyChainEdge {
	if p == nil {
		return nil
	}
	return p.Edges
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainSnapshotDetailData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainSnapshotDetailData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainSnapshotDetailData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitySupplyChainSnapshotsResponse struct {
	Data []*ProjectEntitySupplyChainSnapshotData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainSnapshotsResponse) GetData() []*ProjectEntitySupplyChainSnapshotData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntitySupplyChainSnapshotsResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainSnapshotsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainSnapshotsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainSnapshotsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainSnapshotsResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type SupplyChainEdge struct {
	Id                 string   `json:"id" url:"id"`
	SrcId              string   `json:"src_id" url:"src_id"`
	DstId              string   `json:"dst_id" url:"dst_id"`
	DepartureCountries []string `json:"departure_countries,omitempty" url:"departure_countries,omitempty"`
	ArrivalCountries   []string `json:"arrival_countries,omitempty" url:"arrival_countries,omitempty"`
	HsCode             string   `json:"hs_code" url:"hs_code"`
	MinDate            string   `json:"min_date" url:"min_date"`
	MaxDate            string   `json:"max_date" url:"max_date"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SupplyChainEdge) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SupplyChainEdge) GetSrcId() string {
	if s == nil {
		return ""
	}
	return s.SrcId
}

func (s *SupplyChainEdge) GetDstId() string {
	if s == nil {
		return ""
	}
	return s.DstId
}

func (s *SupplyChainEdge) GetDepartureCountries() []string {
	if s == nil {
		return nil
	}
	return s.DepartureCountries
}

func (s *SupplyChainEdge) GetArrivalCountries() []string {
	if s == nil {
		return nil
	}
	return s.ArrivalCountries
}

func (s *SupplyChainEdge) GetHsCode() string {
	if s == nil {
		return ""
	}
	return s.HsCode
}

func (s *SupplyChainEdge) GetMinDate() string {
	if s == nil {
		return ""
	}
	return s.MinDate
}

func (s *SupplyChainEdge) GetMaxDate() string {
	if s == nil {
		return ""
	}
	return s.MaxDate
}

func (s *SupplyChainEdge) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplyChainEdge) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplyChainEdge
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplyChainEdge(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplyChainEdge) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupplyChainNode struct {
	Id          string   `json:"id" url:"id"`
	EntityId    string   `json:"entity_id" url:"entity_id"`
	Label       string   `json:"label" url:"label"`
	Type        string   `json:"type" url:"type"`
	RiskFactors []string `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	Countries   []string `json:"countries,omitempty" url:"countries,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SupplyChainNode) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SupplyChainNode) GetEntityId() string {
	if s == nil {
		return ""
	}
	return s.EntityId
}

func (s *SupplyChainNode) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SupplyChainNode) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SupplyChainNode) GetRiskFactors() []string {
	if s == nil {
		return nil
	}
	return s.RiskFactors
}

func (s *SupplyChainNode) GetCountries() []string {
	if s == nil {
		return nil
	}
	return s.Countries
}

func (s *SupplyChainNode) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplyChainNode) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplyChainNode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplyChainNode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplyChainNode) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
