// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
	time "time"
)

type GetHistory struct {
	// The type of events to filter on.
	Events []*string `json:"-" url:"events,omitempty"`
	// An ISO 8601 encoded date string indicating the starting time period for the events. In the format YYYY-MM-DD
	From *time.Time `json:"-" url:"from,omitempty" format:"date"`
	// An ISO 8601 encoded date string indicating the ending time period for the events. In the format YYYY-MM-DD
	To *time.Time `json:"-" url:"to,omitempty" format:"date"`
	// Size to limit number of events returned
	Size *int `json:"-" url:"size,omitempty"`
	// Pagination token to retrieve the next page of results
	Token *string `json:"-" url:"token,omitempty"`
}

type GetUsage struct {
	// An ISO 8601 encoded date string indicating the starting time period to obtain usage stats. In the format YYYY-MM-DD
	From *time.Time `json:"-" url:"from,omitempty" format:"date"`
	// An ISO 8601 encoded date string indicating the ending time period to obtain usage stats. In the format YYYY-MM-DD
	To *time.Time `json:"-" url:"to,omitempty" format:"date"`
}

// A map of fields appearing in the audit logs for this event
type EventInfo = map[string]interface{}

type HistoryInfo struct {
	User        string    `json:"user" url:"user"`
	Environment string    `json:"environment" url:"environment"`
	Event       string    `json:"event" url:"event"`
	Data        EventInfo `json:"data,omitempty" url:"data,omitempty"`
	Timestamp   string    `json:"timestamp" url:"timestamp"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HistoryInfo) GetUser() string {
	if h == nil {
		return ""
	}
	return h.User
}

func (h *HistoryInfo) GetEnvironment() string {
	if h == nil {
		return ""
	}
	return h.Environment
}

func (h *HistoryInfo) GetEvent() string {
	if h == nil {
		return ""
	}
	return h.Event
}

func (h *HistoryInfo) GetData() EventInfo {
	if h == nil {
		return nil
	}
	return h.Data
}

func (h *HistoryInfo) GetTimestamp() string {
	if h == nil {
		return ""
	}
	return h.Timestamp
}

func (h *HistoryInfo) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HistoryInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler HistoryInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HistoryInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HistoryInfo) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HistoryResponse struct {
	Size      int            `json:"size" url:"size"`
	NextToken string         `json:"next_token" url:"next_token"`
	Events    []*HistoryInfo `json:"events,omitempty" url:"events,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HistoryResponse) GetSize() int {
	if h == nil {
		return 0
	}
	return h.Size
}

func (h *HistoryResponse) GetNextToken() string {
	if h == nil {
		return ""
	}
	return h.NextToken
}

func (h *HistoryResponse) GetEvents() []*HistoryInfo {
	if h == nil {
		return nil
	}
	return h.Events
}

func (h *HistoryResponse) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HistoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler HistoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HistoryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HistoryResponse) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type UsageInfo struct {
	Entity         *int `json:"entity,omitempty" url:"entity,omitempty"`
	Record         *int `json:"record,omitempty" url:"record,omitempty"`
	Resolve        *int `json:"resolve,omitempty" url:"resolve,omitempty"`
	Search         *int `json:"search,omitempty" url:"search,omitempty"`
	TradeTraversal *int `json:"trade_traversal,omitempty" url:"trade_traversal,omitempty"`
	Traversal      *int `json:"traversal,omitempty" url:"traversal,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UsageInfo) GetEntity() *int {
	if u == nil {
		return nil
	}
	return u.Entity
}

func (u *UsageInfo) GetRecord() *int {
	if u == nil {
		return nil
	}
	return u.Record
}

func (u *UsageInfo) GetResolve() *int {
	if u == nil {
		return nil
	}
	return u.Resolve
}

func (u *UsageInfo) GetSearch() *int {
	if u == nil {
		return nil
	}
	return u.Search
}

func (u *UsageInfo) GetTradeTraversal() *int {
	if u == nil {
		return nil
	}
	return u.TradeTraversal
}

func (u *UsageInfo) GetTraversal() *int {
	if u == nil {
		return nil
	}
	return u.Traversal
}

func (u *UsageInfo) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UsageInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler UsageInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsageInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsageInfo) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UsageResponse struct {
	// Usage information for each endpoint
	Usage *UsageInfo `json:"usage,omitempty" url:"usage,omitempty"`
	// The start date of the returned usage information.
	From string `json:"from" url:"from"`
	// The end date of the returned usage information.
	To string `json:"to" url:"to"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UsageResponse) GetUsage() *UsageInfo {
	if u == nil {
		return nil
	}
	return u.Usage
}

func (u *UsageResponse) GetFrom() string {
	if u == nil {
		return ""
	}
	return u.From
}

func (u *UsageResponse) GetTo() string {
	if u == nil {
		return ""
	}
	return u.To
}

func (u *UsageResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UsageResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UsageResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UsageResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UsageResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
