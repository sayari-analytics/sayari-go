// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
	time "time"
)

type GetEntity struct {
	// The pagination token for the next page of attribute `name`.
	AttributesNameNext *string `json:"-"`
	// The pagination token for the previous page of attribute `name`.
	AttributesNamePrev *string `json:"-"`
	// Limit total values returned for attribute `name`. Defaults to 100.
	AttributesNameLimit *int `json:"-"`
	// The pagination token for the next page of attribute `address`.
	AttributesAddressNext *string `json:"-"`
	// The pagination token for the previous page of attribute `address`.
	AttributesAddressPrev *string `json:"-"`
	// Limit total values returned for attribute `address`. Defaults to 100.
	AttributesAddressLimit *int `json:"-"`
	// The pagination token for the next page of attribute `country`.
	AttributesCountryNext *string `json:"-"`
	// The pagination token for the previous page of attribute `country`.
	AttributesCountryPrev *string `json:"-"`
	// Limit total values returned for attribute `country`. Defaults to 100.
	AttributesCountryLimit *int `json:"-"`
	// The pagination token for the next page of relationship results
	RelationshipsNext *string `json:"-"`
	// The pagination token for the previous page of relationship results
	RelationshipsPrev *string `json:"-"`
	// Limit total relationship values. Defaults to 50.
	RelationshipsLimit *int `json:"-"`
	// Filter relationships to relationship type, e.g. director_of or has_shareholder
	RelationshipsType *string `json:"-"`
	// Sorts relationships by As Of date or Shareholder percentage, e.g. date or -shares
	RelationshipsSort *string `json:"-"`
	// Filters relationships to after a date
	RelationshipsStartDate *time.Time `json:"-"`
	// Filters relationships to before a date
	RelationshipsEndDate *time.Time `json:"-"`
	// Filters relationships to greater than or equal to a Shareholder percentage
	RelationshipsMinShares *int `json:"-"`
	// Filters relationships to a list of countries
	RelationshipsCountry []*Country `json:"-"`
	// Filters shipment relationships to a list of arrival countries
	RelationshipsArrivalCountry []*Country `json:"-"`
	// Filters shipment relationships to an arrival state
	RelationshipsArrivalState *string `json:"-"`
	// Filters shipment relationships to an arrival city
	RelationshipsArrivalCity *string `json:"-"`
	// Filters shipment relationships to a list of departure countries
	RelationshipsDepartureCountry []*Country `json:"-"`
	// Filters shipment relationships to a departure state
	RelationshipsDepartureState *string `json:"-"`
	// Filters shipment relationships to a departure city
	RelationshipsDepartureCity *string `json:"-"`
	// Filters shipment relationships to a trade partner name
	RelationshipsPartnerName *string `json:"-"`
	// Filters shipment relationships to a trade partner risk
	RelationshipsPartnerRisk []*Tag `json:"-"`
	// Filters shipment relationships to an HS code
	RelationshipsHsCode *string `json:"-"`
	// The pagination token for the next page of possibly same entities.
	PossiblySameAsNext *string `json:"-"`
	// The pagination token for the previous page of possibly same entities.
	PossiblySameAsPrev *string `json:"-"`
	// Limit total possibly same as entities. Defaults to 100.
	PossiblySameAsLimit *int `json:"-"`
	// The pagination token for the next page of the entity's referencing records
	ReferencedByNext *string `json:"-"`
	// The pagination token for the previous page of the entity's referencing records
	ReferencedByPrev *string `json:"-"`
	// Limit totals values returned for entity's referencing records. Defaults to 100.
	ReferencedByLimit *int `json:"-"`
}

// OK
type EntitySummaryResponse struct {
	Id                EntityId                `json:"id"`
	Label             EntityLabel             `json:"label"`
	Degree            EntityDegree            `json:"degree"`
	Closed            EntityClosed            `json:"closed"`
	EntityUrl         EntityUrl               `json:"entity_url"`
	Pep               EntityPep               `json:"pep"`
	PsaId             *string                 `json:"psa_id,omitempty"`
	PsaCount          EntityPsaCount          `json:"psa_count"`
	Sanctioned        EntitySanctioned        `json:"sanctioned"`
	Type              Entities                `json:"type,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty"`
	Countries         []Country               `json:"countries,omitempty"`
	SourceCount       SourceCount             `json:"source_count,omitempty"`
	Addresses         []EntityAddresses       `json:"addresses,omitempty"`
	DateOfBirth       *EntityDob              `json:"date_of_birth,omitempty"`
	RelationshipCount EntityRelationshipCount `json:"relationship_count,omitempty"`
	RegistrationDate  *EntityRegistrationDate `json:"registration_date,omitempty"`
	TranslatedLabel   *EntityTranslatedLabel  `json:"translated_label,omitempty"`
	HsCode            *EntityHsCode           `json:"hs_code,omitempty"`
	ShipmentArrival   *ShipmentArrival        `json:"shipment_arrival,omitempty"`
	ShipmentDeparture *ShipmentDepartue       `json:"shipment_departure,omitempty"`
	CompanyType       *CompanyType            `json:"company_type,omitempty"`
	LatestStatus      *Status                 `json:"latest_status,omitempty"`
	Risk              EntityRisk              `json:"risk,omitempty"`
	Attributes        *AttributeDetails       `json:"attributes,omitempty"`
	Relationships     *EntityRelationships    `json:"relationships,omitempty"`
	PossiblySameAs    *PossiblySameAs         `json:"possibly_same_as,omitempty"`
	ReferencedBy      *ReferencedBy           `json:"referenced_by,omitempty"`

	_rawJSON json.RawMessage
}

func (e *EntitySummaryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntitySummaryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntitySummaryResponse(value)
	e._rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntitySummaryResponse) String() string {
	if len(e._rawJSON) > 0 {
		if value, err := core.StringifyJSON(e._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// OK
type GetEntityResponse struct {
	Id                EntityId                `json:"id"`
	Label             EntityLabel             `json:"label"`
	Degree            EntityDegree            `json:"degree"`
	Closed            EntityClosed            `json:"closed"`
	EntityUrl         EntityUrl               `json:"entity_url"`
	Pep               EntityPep               `json:"pep"`
	PsaId             *string                 `json:"psa_id,omitempty"`
	PsaCount          EntityPsaCount          `json:"psa_count"`
	Sanctioned        EntitySanctioned        `json:"sanctioned"`
	Type              Entities                `json:"type,omitempty"`
	Identifiers       []*Identifier           `json:"identifiers,omitempty"`
	Countries         []Country               `json:"countries,omitempty"`
	SourceCount       SourceCount             `json:"source_count,omitempty"`
	Addresses         []EntityAddresses       `json:"addresses,omitempty"`
	DateOfBirth       *EntityDob              `json:"date_of_birth,omitempty"`
	RelationshipCount EntityRelationshipCount `json:"relationship_count,omitempty"`
	RegistrationDate  *EntityRegistrationDate `json:"registration_date,omitempty"`
	TranslatedLabel   *EntityTranslatedLabel  `json:"translated_label,omitempty"`
	HsCode            *EntityHsCode           `json:"hs_code,omitempty"`
	ShipmentArrival   *ShipmentArrival        `json:"shipment_arrival,omitempty"`
	ShipmentDeparture *ShipmentDepartue       `json:"shipment_departure,omitempty"`
	CompanyType       *CompanyType            `json:"company_type,omitempty"`
	LatestStatus      *Status                 `json:"latest_status,omitempty"`
	Risk              EntityRisk              `json:"risk,omitempty"`
	Attributes        *AttributeDetails       `json:"attributes,omitempty"`
	Relationships     *EntityRelationships    `json:"relationships,omitempty"`
	PossiblySameAs    *PossiblySameAs         `json:"possibly_same_as,omitempty"`
	ReferencedBy      *ReferencedBy           `json:"referenced_by,omitempty"`

	_rawJSON json.RawMessage
}

func (g *GetEntityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetEntityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetEntityResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetEntityResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}
