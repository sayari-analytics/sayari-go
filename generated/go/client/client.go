// This file was auto-generated by Fern from our API Definition.

package client

import (
	attributes "github.com/sayari-analytics/sayari-go/generated/go/attributes"
	auth "github.com/sayari-analytics/sayari-go/generated/go/auth"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
	entity "github.com/sayari-analytics/sayari-go/generated/go/entity"
	info "github.com/sayari-analytics/sayari-go/generated/go/info"
	notifications "github.com/sayari-analytics/sayari-go/generated/go/notifications"
	option "github.com/sayari-analytics/sayari-go/generated/go/option"
	record "github.com/sayari-analytics/sayari-go/generated/go/record"
	resolution "github.com/sayari-analytics/sayari-go/generated/go/resolution"
	search "github.com/sayari-analytics/sayari-go/generated/go/search"
	source "github.com/sayari-analytics/sayari-go/generated/go/source"
	trade "github.com/sayari-analytics/sayari-go/generated/go/trade"
	traversal "github.com/sayari-analytics/sayari-go/generated/go/traversal"
	http "net/http"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header

	Attributes    *attributes.Client
	Auth          *auth.Client
	Entity        *entity.Client
	Info          *info.Client
	Notifications *notifications.Client
	Record        *record.Client
	Resolution    *resolution.Client
	Search        *search.Client
	Source        *source.Client
	Trade         *trade.Client
	Traversal     *traversal.Client
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
			options.RateLimiter,
		),
		header:        options.ToHeader(),
		Attributes:    attributes.NewClient(opts...),
		Auth:          auth.NewClient(opts...),
		Entity:        entity.NewClient(opts...),
		Info:          info.NewClient(opts...),
		Notifications: notifications.NewClient(opts...),
		Record:        record.NewClient(opts...),
		Resolution:    resolution.NewClient(opts...),
		Search:        search.NewClient(opts...),
		Source:        source.NewClient(opts...),
		Trade:         trade.NewClient(opts...),
		Traversal:     traversal.NewClient(opts...),
	}
}
