// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type CreateResolvedProjectEntityRequestWrapper struct {
	// Whether to enable LLM-based data cleaning to remove noise and standardize entity attributes. Defaults to true if not supplied. Set to false to disable LLM cleaning.
	EnableLlmClean *bool                               `json:"-" url:"enable_llm_clean,omitempty"`
	Body           *CreateResolvedProjectEntityRequest `json:"-" url:"-"`
}

func (c *CreateResolvedProjectEntityRequestWrapper) UnmarshalJSON(data []byte) error {
	body := new(CreateResolvedProjectEntityRequest)
	if err := json.Unmarshal(data, &body); err != nil {
		return err
	}
	c.Body = body
	return nil
}

func (c *CreateResolvedProjectEntityRequestWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(c.Body)
}

type GetProjectEntitiesRequest struct {
	// The pagination token for the next page of projects.
	Next *string `json:"-" url:"next,omitempty"`
	// The pagination token for the previous page of projects.
	Prev *string `json:"-" url:"prev,omitempty"`
	// Limit total values returned for projects. Defaults to 100. Max 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Filter the project entities. Supports both dot notation (e.g., 'filter.attribute.name') and bracket notation (e.g., 'filter[attribute][name]') for nested field filtering.
	Filter *ProjectEntitiesFilter `json:"-" url:"filter,omitempty"`
}

type GetProjectEntityRiskChangesRequest struct {
	// The maximum number of risk changes to return. Default is 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Token to retrieve the next page of risk changes
	Next *string `json:"-" url:"next,omitempty"`
	// Token to retrieve the previous page of risk changes
	Prev *string `json:"-" url:"prev,omitempty"`
	// Sort by timestamp in ascending or descending order. Default is desc.
	SortDate *SortOrder `json:"-" url:"sort.date,omitempty"`
	// Filter risk changes from the provided date
	FilterFrom *string `json:"-" url:"filter.from,omitempty"`
	// Filter risk changes up to the provided date
	FilterTo *string `json:"-" url:"filter.to,omitempty"`
	// Filter risk changes for the provided risk factors
	FilterRiskFactor []string `json:"-" url:"filter.risk_factor,omitempty"`
	// Filter risk changes for risk factors from the provided risk categories
	FilterRiskCategory []string `json:"-" url:"filter.risk_category,omitempty"`
}

type GetProjectEntityRiskSummaryRequest struct {
	// Filter risk factors by risk factor IDs and risk categories
	Filter *ProjectEntityRiskSummaryFilters `json:"-" url:"filter,omitempty"`
}

type GetProjectRiskChangesRequest struct {
	// The maximum number of risk changes to return. Default is 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Token to retrieve the next page of risk changes
	Next *string `json:"-" url:"next,omitempty"`
	// Token to retrieve the previous page of risk changes
	Prev *string `json:"-" url:"prev,omitempty"`
	// Sort by timestamp in ascending or descending order. Default is desc.
	SortDate *SortOrder `json:"-" url:"sort.date,omitempty"`
	// Filter risk changes from the provided date
	FilterFrom *string `json:"-" url:"filter.from,omitempty"`
	// Filter risk changes up to the provided date
	FilterTo *string `json:"-" url:"filter.to,omitempty"`
	// Filter risk changes for the provided risk factors
	FilterRiskFactor []string `json:"-" url:"filter.risk_factor,omitempty"`
	// Filter risk changes for risk factors from the provided risk categories
	FilterRiskCategory []string `json:"-" url:"filter.risk_category,omitempty"`
}

type ProjectEntitySupplyChainRequest struct {
	// Product root edge filter. Filters results to include only trade relationships where the associated component is part of the specified product's blueprint or is a sub-component of that product.
	Product []string `json:"-" url:"product,omitempty"`
	// Product root edge filter. Filters results to exclude any trade relationships where the associated component is part of the specified product's blueprint or is a sub-component of that product.
	NotProduct []string `json:"-" url:"-product,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has 1+ of the specified risk factors.
	Risk []Risk `json:"-" url:"risk,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has none of the specified risk factors.
	NotRisk []Risk `json:"-" url:"-risk,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in 1+ of the specified countries.
	Countries []Country `json:"-" url:"countries,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in none of the specified countries.
	NotCountries []Country `json:"-" url:"-countries,omitempty"`
	// Filters supply chain paths where 1+ shipment country from any tier matches the provided values.
	ShipmentCountry []Country `json:"-" url:"shipment_country,omitempty"`
	// Filters supply chain paths where none of the shipment countries from any tier matches the provided values.
	NotShipmentCountry []Country `json:"-" url:"-shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 1 matches the provided values.
	Tier1ShipmentCountry []Country `json:"-" url:"tier1_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 2 matches the provided values.
	Tier2ShipmentCountry []Country `json:"-" url:"tier2_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 3 matches the provided values.
	Tier3ShipmentCountry []Country `json:"-" url:"tier3_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 4 matches the provided values.
	Tier4ShipmentCountry []Country `json:"-" url:"tier4_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 5 matches the provided values.
	Tier5ShipmentCountry []Country `json:"-" url:"tier5_shipment_country,omitempty"`
	// Component edge filter. Only return supply chains that contain at least one edge with 1+ of the specified HS codes.
	Component []string `json:"-" url:"component,omitempty"`
	// Component edge filter. Only return supply chains that contain no edges with any of the specified HS codes.
	NotComponent []string `json:"-" url:"-component,omitempty"`
	// Minimum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are greater than or equal to this date.
	MinDate *string `json:"-" url:"min_date,omitempty"`
	// Maximum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are less than or equal to this date.
	MaxDate *string `json:"-" url:"max_date,omitempty"`
	// The maximum depth of the traversal, from 1 to 4 inclusive. Default is 4. Reduce if query is timing out.
	MaxDepth *int `json:"-" url:"max_depth,omitempty"`
	// The maximum number of results to return. Default is no limit.
	Limit *int `json:"-" url:"limit,omitempty"`
}

type ProjectEntitySupplyChainSummaryRequest struct {
	// Product root edge filter. Filters results to include only trade relationships where the associated component is part of the specified product's blueprint or is a sub-component of that product.
	Product []string `json:"-" url:"product,omitempty"`
	// Product root edge filter. Filters results to exclude any trade relationships where the associated component is part of the specified product's blueprint or is a sub-component of that product.
	NotProduct []string `json:"-" url:"-product,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has 1+ of the specified risk factors.
	RiskFactors []Risk `json:"-" url:"risk_factors,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has none of the specified risk factors.
	NotRisk []Risk `json:"-" url:"-risk_factors,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in 1+ of the specified countries.
	Countries []Country `json:"-" url:"countries,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in none of the specified countries.
	NotCountries []Country `json:"-" url:"-countries,omitempty"`
	// Component edge filter. Only return supply chains that contain at least one edge with 1+ of the specified HS codes.
	Component []string `json:"-" url:"component,omitempty"`
	// Component edge filter. Only return supply chains that contain no edges with any of the specified HS codes.
	NotComponent []string `json:"-" url:"-component,omitempty"`
	// Minimum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are greater than or equal to this date.
	MinDate *string `json:"-" url:"min_date,omitempty"`
	// Maximum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are less than or equal to this date.
	MaxDate *string `json:"-" url:"max_date,omitempty"`
	// The maximum depth of the traversal, from 1 to 4 inclusive. Default is 4. Reduce if query is timing out.
	MaxDepth *int `json:"-" url:"max_depth,omitempty"`
	// The maximum number of results to return. Default is no limit.
	Limit *int `json:"-" url:"limit,omitempty"`
}

type Address struct {
	Value    string    `json:"value" url:"value"`
	Country  *string   `json:"country,omitempty" url:"country,omitempty"`
	City     *string   `json:"city,omitempty" url:"city,omitempty"`
	State    *string   `json:"state,omitempty" url:"state,omitempty"`
	Location *Location `json:"location,omitempty" url:"location,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *Address) GetValue() string {
	if a == nil {
		return ""
	}
	return a.Value
}

func (a *Address) GetCountry() *string {
	if a == nil {
		return nil
	}
	return a.Country
}

func (a *Address) GetCity() *string {
	if a == nil {
		return nil
	}
	return a.City
}

func (a *Address) GetState() *string {
	if a == nil {
		return nil
	}
	return a.State
}

func (a *Address) GetLocation() *Location {
	if a == nil {
		return nil
	}
	return a.Location
}

func (a *Address) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *Address) UnmarshalJSON(data []byte) error {
	type unmarshaler Address
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = Address(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *Address) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeType struct {
	Field           string `json:"field" url:"field"`
	MatchResolution bool   `json:"match_resolution" url:"match_resolution"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributeType) GetField() string {
	if a == nil {
		return ""
	}
	return a.Field
}

func (a *AttributeType) GetMatchResolution() bool {
	if a == nil {
		return false
	}
	return a.MatchResolution
}

func (a *AttributeType) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeType) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeType
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeType(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeType) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeTypesResponse struct {
	Data []*AttributeType `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributeTypesResponse) GetData() []*AttributeType {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AttributeTypesResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeTypesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeTypesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeTypesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeTypesResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeValues struct {
	MatchResolution bool     `json:"match_resolution" url:"match_resolution"`
	Values          []string `json:"values,omitempty" url:"values,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributeValues) GetMatchResolution() bool {
	if a == nil {
		return false
	}
	return a.MatchResolution
}

func (a *AttributeValues) GetValues() []string {
	if a == nil {
		return nil
	}
	return a.Values
}

func (a *AttributeValues) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeValues) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeValues
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeValues(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeValues) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributesResponse struct {
	Data []*GroupedAttribute `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributesResponse) GetData() []*GroupedAttribute {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AttributesResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributesResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type BusinessPurpose struct {
	Code     string `json:"code" url:"code"`
	Standard string `json:"standard" url:"standard"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BusinessPurpose) GetCode() string {
	if b == nil {
		return ""
	}
	return b.Code
}

func (b *BusinessPurpose) GetStandard() string {
	if b == nil {
		return ""
	}
	return b.Standard
}

func (b *BusinessPurpose) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BusinessPurpose) UnmarshalJSON(data []byte) error {
	type unmarshaler BusinessPurpose
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BusinessPurpose(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BusinessPurpose) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type CountType string

const (
	CountTypeCoordinates            CountType = "coordinates"
	CountTypeUpstreamProductRisk    CountType = "upstream_product_risk"
	CountTypeUpstreamProductCountry CountType = "upstream_product_country"
)

func NewCountTypeFromString(s string) (CountType, error) {
	switch s {
	case "coordinates":
		return CountTypeCoordinates, nil
	case "upstream_product_risk":
		return CountTypeUpstreamProductRisk, nil
	case "upstream_product_country":
		return CountTypeUpstreamProductCountry, nil
	}
	var t CountType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (c CountType) Ptr() *CountType {
	return &c
}

type CreateResolvedProjectEntityRequest struct {
	Identifier  []*StringOrNumber  `json:"identifier,omitempty" url:"identifier,omitempty"`
	Name        []string           `json:"name,omitempty" url:"name,omitempty"`
	Country     []Country          `json:"country,omitempty" url:"country,omitempty"`
	Address     []string           `json:"address,omitempty" url:"address,omitempty"`
	DateOfBirth []string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	Contact     []*StringOrNumber  `json:"contact,omitempty" url:"contact,omitempty"`
	Type        []Entities         `json:"type,omitempty" url:"type,omitempty"`
	City        []string           `json:"city,omitempty" url:"city,omitempty"`
	State       []string           `json:"state,omitempty" url:"state,omitempty"`
	Profile     *ResolutionProfile `json:"profile,omitempty" url:"profile,omitempty"`
	// Whether to enable LLM-based data cleaning to remove noise and standardize entity attributes. Defaults to true if not supplied. Set to false to disable LLM cleaning.
	EnableLlmClean *bool `json:"enable_llm_clean,omitempty" url:"enable_llm_clean,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *CreateResolvedProjectEntityRequest) GetIdentifier() []*StringOrNumber {
	if c == nil {
		return nil
	}
	return c.Identifier
}

func (c *CreateResolvedProjectEntityRequest) GetName() []string {
	if c == nil {
		return nil
	}
	return c.Name
}

func (c *CreateResolvedProjectEntityRequest) GetCountry() []Country {
	if c == nil {
		return nil
	}
	return c.Country
}

func (c *CreateResolvedProjectEntityRequest) GetAddress() []string {
	if c == nil {
		return nil
	}
	return c.Address
}

func (c *CreateResolvedProjectEntityRequest) GetDateOfBirth() []string {
	if c == nil {
		return nil
	}
	return c.DateOfBirth
}

func (c *CreateResolvedProjectEntityRequest) GetContact() []*StringOrNumber {
	if c == nil {
		return nil
	}
	return c.Contact
}

func (c *CreateResolvedProjectEntityRequest) GetType() []Entities {
	if c == nil {
		return nil
	}
	return c.Type
}

func (c *CreateResolvedProjectEntityRequest) GetCity() []string {
	if c == nil {
		return nil
	}
	return c.City
}

func (c *CreateResolvedProjectEntityRequest) GetState() []string {
	if c == nil {
		return nil
	}
	return c.State
}

func (c *CreateResolvedProjectEntityRequest) GetProfile() *ResolutionProfile {
	if c == nil {
		return nil
	}
	return c.Profile
}

func (c *CreateResolvedProjectEntityRequest) GetEnableLlmClean() *bool {
	if c == nil {
		return nil
	}
	return c.EnableLlmClean
}

func (c *CreateResolvedProjectEntityRequest) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateResolvedProjectEntityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateResolvedProjectEntityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateResolvedProjectEntityRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateResolvedProjectEntityRequest) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type FacetBucket struct {
	Key      string `json:"key" url:"key"`
	DocCount int    `json:"doc_count" url:"doc_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FacetBucket) GetKey() string {
	if f == nil {
		return ""
	}
	return f.Key
}

func (f *FacetBucket) GetDocCount() int {
	if f == nil {
		return 0
	}
	return f.DocCount
}

func (f *FacetBucket) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FacetBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler FacetBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FacetBucket(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FacetBucket) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FacetsResponse struct {
	Data map[string][]*FacetBucket `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FacetsResponse) GetData() map[string][]*FacetBucket {
	if f == nil {
		return nil
	}
	return f.Data
}

func (f *FacetsResponse) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FacetsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler FacetsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FacetsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FacetsResponse) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

type FieldMatchQuality string

const (
	// High quality match
	FieldMatchQualityHigh FieldMatchQuality = "high"
	// Medium quality match
	FieldMatchQualityMedium FieldMatchQuality = "medium"
	// Low quality match
	FieldMatchQualityLow FieldMatchQuality = "low"
	// Quality not available
	FieldMatchQualityNa FieldMatchQuality = "na"
)

func NewFieldMatchQualityFromString(s string) (FieldMatchQuality, error) {
	switch s {
	case "high":
		return FieldMatchQualityHigh, nil
	case "medium":
		return FieldMatchQualityMedium, nil
	case "low":
		return FieldMatchQualityLow, nil
	case "na":
		return FieldMatchQualityNa, nil
	}
	var t FieldMatchQuality
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FieldMatchQuality) Ptr() *FieldMatchQuality {
	return &f
}

type GroupedAttribute struct {
	Field           string                   `json:"field" url:"field"`
	MatchResolution bool                     `json:"match_resolution" url:"match_resolution"`
	Values          []*GroupedAttributeValue `json:"values,omitempty" url:"values,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedAttribute) GetField() string {
	if g == nil {
		return ""
	}
	return g.Field
}

func (g *GroupedAttribute) GetMatchResolution() bool {
	if g == nil {
		return false
	}
	return g.MatchResolution
}

func (g *GroupedAttribute) GetValues() []*GroupedAttributeValue {
	if g == nil {
		return nil
	}
	return g.Values
}

func (g *GroupedAttribute) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedAttribute(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedAttribute) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GroupedAttributeValue struct {
	Id    string `json:"id" url:"id"`
	Value string `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (g *GroupedAttributeValue) GetId() string {
	if g == nil {
		return ""
	}
	return g.Id
}

func (g *GroupedAttributeValue) GetValue() string {
	if g == nil {
		return ""
	}
	return g.Value
}

func (g *GroupedAttributeValue) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GroupedAttributeValue) UnmarshalJSON(data []byte) error {
	type unmarshaler GroupedAttributeValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GroupedAttributeValue(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties
	g.rawJSON = json.RawMessage(data)
	return nil
}

func (g *GroupedAttributeValue) String() string {
	if len(g.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(g.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type Location struct {
	Lat float64 `json:"lat" url:"lat"`
	Lon float64 `json:"lon" url:"lon"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (l *Location) GetLat() float64 {
	if l == nil {
		return 0
	}
	return l.Lat
}

func (l *Location) GetLon() float64 {
	if l == nil {
		return 0
	}
	return l.Lon
}

func (l *Location) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *Location) UnmarshalJSON(data []byte) error {
	type unmarshaler Location
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = Location(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties
	l.rawJSON = json.RawMessage(data)
	return nil
}

func (l *Location) String() string {
	if len(l.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(l.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type MatchProfileEnum string

const (
	MatchProfileEnumCorporate MatchProfileEnum = "corporate"
	MatchProfileEnumSuppliers MatchProfileEnum = "suppliers"
	MatchProfileEnumScreen    MatchProfileEnum = "screen"
	MatchProfileEnumSearch    MatchProfileEnum = "search"
)

func NewMatchProfileEnumFromString(s string) (MatchProfileEnum, error) {
	switch s {
	case "corporate":
		return MatchProfileEnumCorporate, nil
	case "suppliers":
		return MatchProfileEnumSuppliers, nil
	case "screen":
		return MatchProfileEnumScreen, nil
	case "search":
		return MatchProfileEnumSearch, nil
	}
	var t MatchProfileEnum
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (m MatchProfileEnum) Ptr() *MatchProfileEnum {
	return &m
}

type ProductBucket struct {
	Key      string `json:"key" url:"key"`
	DocCount int    `json:"doc_count" url:"doc_count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProductBucket) GetKey() string {
	if p == nil {
		return ""
	}
	return p.Key
}

func (p *ProductBucket) GetDocCount() int {
	if p == nil {
		return 0
	}
	return p.DocCount
}

func (p *ProductBucket) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProductBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler ProductBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProductBucket(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProductBucket) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProductCount struct {
	Product *string `json:"product,omitempty" url:"product,omitempty"`
	Count   int     `json:"count" url:"count"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProductCount) GetProduct() *string {
	if p == nil {
		return nil
	}
	return p.Product
}

func (p *ProductCount) GetCount() int {
	if p == nil {
		return 0
	}
	return p.Count
}

func (p *ProductCount) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProductCount) UnmarshalJSON(data []byte) error {
	type unmarshaler ProductCount
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProductCount(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProductCount) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProductMapping struct {
	Products []string `json:"products,omitempty" url:"products,omitempty"`
	State    string   `json:"state" url:"state"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProductMapping) GetProducts() []string {
	if p == nil {
		return nil
	}
	return p.Products
}

func (p *ProductMapping) GetState() string {
	if p == nil {
		return ""
	}
	return p.State
}

func (p *ProductMapping) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProductMapping) UnmarshalJSON(data []byte) error {
	type unmarshaler ProductMapping
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProductMapping(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProductMapping) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitiesCustomFieldFilter struct {
	CustomFieldName *CustomFieldValue `json:"custom_{field name},omitempty" url:"custom_{field name},omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitiesCustomFieldFilter) GetCustomFieldName() *CustomFieldValue {
	if p == nil {
		return nil
	}
	return p.CustomFieldName
}

func (p *ProjectEntitiesCustomFieldFilter) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitiesCustomFieldFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitiesCustomFieldFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitiesCustomFieldFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitiesCustomFieldFilter) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitiesExactFilter struct {
	// Filter with exact matching.
	Exact []string `json:"exact,omitempty" url:"exact,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitiesExactFilter) GetExact() []string {
	if p == nil {
		return nil
	}
	return p.Exact
}

func (p *ProjectEntitiesExactFilter) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitiesExactFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitiesExactFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitiesExactFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitiesExactFilter) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitiesFilter struct {
	// Filter by [risk factor](/sayari-library/ontology/risk-factors) ID.
	RiskFactor []Risk `json:"risk_factor,omitempty" url:"risk_factor,omitempty"`
	// Filter by risk factor `category`, e.g. `sanctions`. At least one risk factor from each provided category must be present.
	RiskCategory []string `json:"risk_category,omitempty" url:"risk_category,omitempty"`
	// Filter by upstream (supply chain) product ID.
	UpstreamProduct []string `json:"upstream_product,omitempty" url:"upstream_product,omitempty"`
	// Filter by upstream (supply chain) [country](/sayari-library/ontology/enumerated-types#country) at any tier.
	ShipmentCountry []Country `json:"shipment_country,omitempty" url:"shipment_country,omitempty"`
	// Filter by upstream (supply chain) [country](/sayari-library/ontology/enumerated-types#country) at tier 1.
	Tier1ShipmentCountry []Country `json:"tier1_shipment_country,omitempty" url:"tier1_shipment_country,omitempty"`
	// Filter by upstream (supply chain) [country](/sayari-library/ontology/enumerated-types#country) at tier 2.
	Tier2ShipmentCountry []Country `json:"tier2_shipment_country,omitempty" url:"tier2_shipment_country,omitempty"`
	// Filter by upstream (supply chain) [country](/sayari-library/ontology/enumerated-types#country) at tier 3.
	Tier3ShipmentCountry []Country `json:"tier3_shipment_country,omitempty" url:"tier3_shipment_country,omitempty"`
	// Filter by upstream (supply chain) [country](/sayari-library/ontology/enumerated-types#country) at tier 4.
	Tier4ShipmentCountry []Country `json:"tier4_shipment_country,omitempty" url:"tier4_shipment_country,omitempty"`
	// Filter by upstream (supply chain) [country](/sayari-library/ontology/enumerated-types#country) at tier 5.
	Tier5ShipmentCountry []Country `json:"tier5_shipment_country,omitempty" url:"tier5_shipment_country,omitempty"`
	// Filter by [country](/sayari-library/ontology/enumerated-types#country).
	Country []Country `json:"country,omitempty" url:"country,omitempty"`
	// Filter by HS code, HS code description, or business description.
	BusinessPurpose []string `json:"business_purpose,omitempty" url:"business_purpose,omitempty"`
	// Filter by entity label with fuzzy matching.
	Label *ProjectEntitiesFuzzyFilter `json:"label,omitempty" url:"label,omitempty"`
	// Filter by entity city with fuzzy matching.
	City *ProjectEntitiesFuzzyFilter `json:"city,omitempty" url:"city,omitempty"`
	// Filter by entity address state with fuzzy matching.
	State *ProjectEntitiesFuzzyFilter `json:"state,omitempty" url:"state,omitempty"`
	// Filter by entity identifier attributes with fuzzy matching.
	Identifier *ProjectEntitiesFuzzyFilter `json:"identifier,omitempty" url:"identifier,omitempty"`
	// Filter by entity source ID.
	Source *ProjectEntitiesExactFilter `json:"source,omitempty" url:"source,omitempty"`
	// Filter by entity [company status](/sayari-library/ontology/enumerated-types#company-status).
	Status []CompanyStatus `json:"status,omitempty" url:"status,omitempty"`
	// Filter by a geographical bounding box. The value is a pipe-delimited set of four values representing the top, left, bottom, and right sides of the bounding box, in that order. The pipes should be URL-encoded as `%7C`. The top coordinate must greater than the bottom coordinate, and the left coordinate must be less than the right coordinate. A sample is `55.680357237879136|-71.53607290158526|41.10876347746233|-40.963927098414736`
	Bounds *string `json:"bounds,omitempty" url:"bounds,omitempty"`
	// Filter by match entity ID.
	MatchEntityId []string `json:"match_entity_id,omitempty" url:"match_entity_id,omitempty"`
	// Filter by entity type.
	EntityType []string `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	// Filter by tag ID.
	Tag []string `json:"tag,omitempty" url:"tag,omitempty"`
	// Filter by upload ID.
	Upload []string `json:"upload,omitempty" url:"upload,omitempty"`
	// Filter by case status.
	CaseStatus []CaseStatus `json:"case_status,omitempty" url:"case_status,omitempty"`
	// Filter by match strength.
	MatchStrength []MatchStrengthEnum `json:"match_strength,omitempty" url:"match_strength,omitempty"`
	// Filter by match count.
	MatchCount *MatchCount `json:"match_count,omitempty" url:"match_count,omitempty"`
	// Filter by custom field.
	Attribute *ProjectEntitiesCustomFieldFilter `json:"attribute,omitempty" url:"attribute,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitiesFilter) GetRiskFactor() []Risk {
	if p == nil {
		return nil
	}
	return p.RiskFactor
}

func (p *ProjectEntitiesFilter) GetRiskCategory() []string {
	if p == nil {
		return nil
	}
	return p.RiskCategory
}

func (p *ProjectEntitiesFilter) GetUpstreamProduct() []string {
	if p == nil {
		return nil
	}
	return p.UpstreamProduct
}

func (p *ProjectEntitiesFilter) GetShipmentCountry() []Country {
	if p == nil {
		return nil
	}
	return p.ShipmentCountry
}

func (p *ProjectEntitiesFilter) GetTier1ShipmentCountry() []Country {
	if p == nil {
		return nil
	}
	return p.Tier1ShipmentCountry
}

func (p *ProjectEntitiesFilter) GetTier2ShipmentCountry() []Country {
	if p == nil {
		return nil
	}
	return p.Tier2ShipmentCountry
}

func (p *ProjectEntitiesFilter) GetTier3ShipmentCountry() []Country {
	if p == nil {
		return nil
	}
	return p.Tier3ShipmentCountry
}

func (p *ProjectEntitiesFilter) GetTier4ShipmentCountry() []Country {
	if p == nil {
		return nil
	}
	return p.Tier4ShipmentCountry
}

func (p *ProjectEntitiesFilter) GetTier5ShipmentCountry() []Country {
	if p == nil {
		return nil
	}
	return p.Tier5ShipmentCountry
}

func (p *ProjectEntitiesFilter) GetCountry() []Country {
	if p == nil {
		return nil
	}
	return p.Country
}

func (p *ProjectEntitiesFilter) GetBusinessPurpose() []string {
	if p == nil {
		return nil
	}
	return p.BusinessPurpose
}

func (p *ProjectEntitiesFilter) GetLabel() *ProjectEntitiesFuzzyFilter {
	if p == nil {
		return nil
	}
	return p.Label
}

func (p *ProjectEntitiesFilter) GetCity() *ProjectEntitiesFuzzyFilter {
	if p == nil {
		return nil
	}
	return p.City
}

func (p *ProjectEntitiesFilter) GetState() *ProjectEntitiesFuzzyFilter {
	if p == nil {
		return nil
	}
	return p.State
}

func (p *ProjectEntitiesFilter) GetIdentifier() *ProjectEntitiesFuzzyFilter {
	if p == nil {
		return nil
	}
	return p.Identifier
}

func (p *ProjectEntitiesFilter) GetSource() *ProjectEntitiesExactFilter {
	if p == nil {
		return nil
	}
	return p.Source
}

func (p *ProjectEntitiesFilter) GetStatus() []CompanyStatus {
	if p == nil {
		return nil
	}
	return p.Status
}

func (p *ProjectEntitiesFilter) GetBounds() *string {
	if p == nil {
		return nil
	}
	return p.Bounds
}

func (p *ProjectEntitiesFilter) GetMatchEntityId() []string {
	if p == nil {
		return nil
	}
	return p.MatchEntityId
}

func (p *ProjectEntitiesFilter) GetEntityType() []string {
	if p == nil {
		return nil
	}
	return p.EntityType
}

func (p *ProjectEntitiesFilter) GetTag() []string {
	if p == nil {
		return nil
	}
	return p.Tag
}

func (p *ProjectEntitiesFilter) GetUpload() []string {
	if p == nil {
		return nil
	}
	return p.Upload
}

func (p *ProjectEntitiesFilter) GetCaseStatus() []CaseStatus {
	if p == nil {
		return nil
	}
	return p.CaseStatus
}

func (p *ProjectEntitiesFilter) GetMatchStrength() []MatchStrengthEnum {
	if p == nil {
		return nil
	}
	return p.MatchStrength
}

func (p *ProjectEntitiesFilter) GetMatchCount() *MatchCount {
	if p == nil {
		return nil
	}
	return p.MatchCount
}

func (p *ProjectEntitiesFilter) GetAttribute() *ProjectEntitiesCustomFieldFilter {
	if p == nil {
		return nil
	}
	return p.Attribute
}

func (p *ProjectEntitiesFilter) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitiesFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitiesFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitiesFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitiesFilter) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitiesFuzzyFilter struct {
	// Filter with fuzzy matching.
	Fuzzy []string `json:"fuzzy,omitempty" url:"fuzzy,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitiesFuzzyFilter) GetFuzzy() []string {
	if p == nil {
		return nil
	}
	return p.Fuzzy
}

func (p *ProjectEntitiesFuzzyFilter) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitiesFuzzyFilter) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitiesFuzzyFilter
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitiesFuzzyFilter(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitiesFuzzyFilter) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitiesResponse struct {
	Limit     int                      `json:"limit" url:"limit"`
	Data      []*ProjectEntityResponse `json:"data,omitempty" url:"data,omitempty"`
	Size      *QualifiedCount          `json:"size,omitempty" url:"size,omitempty"`
	NextToken *string                  `json:"next_token,omitempty" url:"next_token,omitempty"`
	PrevToken *string                  `json:"prev_token,omitempty" url:"prev_token,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitiesResponse) GetLimit() int {
	if p == nil {
		return 0
	}
	return p.Limit
}

func (p *ProjectEntitiesResponse) GetData() []*ProjectEntityResponse {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntitiesResponse) GetSize() *QualifiedCount {
	if p == nil {
		return nil
	}
	return p.Size
}

func (p *ProjectEntitiesResponse) GetNextToken() *string {
	if p == nil {
		return nil
	}
	return p.NextToken
}

func (p *ProjectEntitiesResponse) GetPrevToken() *string {
	if p == nil {
		return nil
	}
	return p.PrevToken
}

func (p *ProjectEntitiesResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitiesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitiesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitiesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitiesResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityExistsResponseData struct {
	ProjectEntityId *string `json:"project_entity_id,omitempty" url:"project_entity_id,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityExistsResponseData) GetProjectEntityId() *string {
	if p == nil {
		return nil
	}
	return p.ProjectEntityId
}

func (p *ProjectEntityExistsResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityExistsResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityExistsResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityExistsResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityExistsResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityIdResponse struct {
	Data *ProjectEntityExistsResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityIdResponse) GetData() *ProjectEntityExistsResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntityIdResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityIdResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityIdResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityIdResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityIdResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityMatchExplanation struct {
	Field string `json:"field" url:"field"`
	// Quality of the match
	Quality     FieldMatchQuality `json:"quality" url:"quality"`
	Description []string          `json:"description,omitempty" url:"description,omitempty"`
	Matches     []string          `json:"matches,omitempty" url:"matches,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityMatchExplanation) GetField() string {
	if p == nil {
		return ""
	}
	return p.Field
}

func (p *ProjectEntityMatchExplanation) GetQuality() FieldMatchQuality {
	if p == nil {
		return ""
	}
	return p.Quality
}

func (p *ProjectEntityMatchExplanation) GetDescription() []string {
	if p == nil {
		return nil
	}
	return p.Description
}

func (p *ProjectEntityMatchExplanation) GetMatches() []string {
	if p == nil {
		return nil
	}
	return p.Matches
}

func (p *ProjectEntityMatchExplanation) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityMatchExplanation) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityMatchExplanation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityMatchExplanation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityMatchExplanation) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityMatchResponse struct {
	MatchId          string                           `json:"match_id" url:"match_id"`
	SayariEntityId   string                           `json:"sayari_entity_id" url:"sayari_entity_id"`
	Type             string                           `json:"type" url:"type"`
	Label            string                           `json:"label" url:"label"`
	Countries        []string                         `json:"countries,omitempty" url:"countries,omitempty"`
	RiskCategories   []*ProjectRiskCategory           `json:"risk_categories,omitempty" url:"risk_categories,omitempty"`
	RiskFactors      []*ProjectRiskFactor             `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	BusinessPurpose  []*BusinessPurpose               `json:"business_purpose,omitempty" url:"business_purpose,omitempty"`
	Upstream         *UpstreamInfo                    `json:"upstream,omitempty" url:"upstream,omitempty"`
	Sources          []*SourceField                   `json:"sources,omitempty" url:"sources,omitempty"`
	Addresses        []*Address                       `json:"addresses,omitempty" url:"addresses,omitempty"`
	HsCodes          []string                         `json:"hs_codes,omitempty" url:"hs_codes,omitempty"`
	CreatedAt        string                           `json:"created_at" url:"created_at"`
	UpdatedAt        *string                          `json:"updated_at,omitempty" url:"updated_at,omitempty"`
	MatchProfile     *MatchProfileEnum                `json:"match_profile,omitempty" url:"match_profile,omitempty"`
	DeletedAt        *string                          `json:"deleted_at,omitempty" url:"deleted_at,omitempty"`
	MatchExplanation []*ProjectEntityMatchExplanation `json:"match_explanation,omitempty" url:"match_explanation,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityMatchResponse) GetMatchId() string {
	if p == nil {
		return ""
	}
	return p.MatchId
}

func (p *ProjectEntityMatchResponse) GetSayariEntityId() string {
	if p == nil {
		return ""
	}
	return p.SayariEntityId
}

func (p *ProjectEntityMatchResponse) GetType() string {
	if p == nil {
		return ""
	}
	return p.Type
}

func (p *ProjectEntityMatchResponse) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *ProjectEntityMatchResponse) GetCountries() []string {
	if p == nil {
		return nil
	}
	return p.Countries
}

func (p *ProjectEntityMatchResponse) GetRiskCategories() []*ProjectRiskCategory {
	if p == nil {
		return nil
	}
	return p.RiskCategories
}

func (p *ProjectEntityMatchResponse) GetRiskFactors() []*ProjectRiskFactor {
	if p == nil {
		return nil
	}
	return p.RiskFactors
}

func (p *ProjectEntityMatchResponse) GetBusinessPurpose() []*BusinessPurpose {
	if p == nil {
		return nil
	}
	return p.BusinessPurpose
}

func (p *ProjectEntityMatchResponse) GetUpstream() *UpstreamInfo {
	if p == nil {
		return nil
	}
	return p.Upstream
}

func (p *ProjectEntityMatchResponse) GetSources() []*SourceField {
	if p == nil {
		return nil
	}
	return p.Sources
}

func (p *ProjectEntityMatchResponse) GetAddresses() []*Address {
	if p == nil {
		return nil
	}
	return p.Addresses
}

func (p *ProjectEntityMatchResponse) GetHsCodes() []string {
	if p == nil {
		return nil
	}
	return p.HsCodes
}

func (p *ProjectEntityMatchResponse) GetCreatedAt() string {
	if p == nil {
		return ""
	}
	return p.CreatedAt
}

func (p *ProjectEntityMatchResponse) GetUpdatedAt() *string {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *ProjectEntityMatchResponse) GetMatchProfile() *MatchProfileEnum {
	if p == nil {
		return nil
	}
	return p.MatchProfile
}

func (p *ProjectEntityMatchResponse) GetDeletedAt() *string {
	if p == nil {
		return nil
	}
	return p.DeletedAt
}

func (p *ProjectEntityMatchResponse) GetMatchExplanation() []*ProjectEntityMatchExplanation {
	if p == nil {
		return nil
	}
	return p.MatchExplanation
}

func (p *ProjectEntityMatchResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityMatchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityMatchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityMatchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityMatchResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityResponse struct {
	ProjectEntityId string                        `json:"project_entity_id" url:"project_entity_id"`
	ProjectId       string                        `json:"project_id" url:"project_id"`
	Label           string                        `json:"label" url:"label"`
	UploadIds       []string                      `json:"upload_ids,omitempty" url:"upload_ids,omitempty"`
	Strength        MatchStrengthEnum             `json:"strength" url:"strength"`
	CreatedAt       string                        `json:"created_at" url:"created_at"`
	Attributes      map[string]*AttributeValues   `json:"attributes,omitempty" url:"attributes,omitempty"`
	Countries       []string                      `json:"countries,omitempty" url:"countries,omitempty"`
	RiskCategories  []*ProjectRiskCategory        `json:"risk_categories,omitempty" url:"risk_categories,omitempty"`
	RiskFactors     []*ProjectRiskFactor          `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	Upstream        *UpstreamInfo                 `json:"upstream,omitempty" url:"upstream,omitempty"`
	Tags            []*TagResponse                `json:"tags,omitempty" url:"tags,omitempty"`
	Case            *CaseStatus                   `json:"case,omitempty" url:"case,omitempty"`
	Matches         []*ProjectEntityMatchResponse `json:"matches,omitempty" url:"matches,omitempty"`
	UpdatedAt       *string                       `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityResponse) GetProjectEntityId() string {
	if p == nil {
		return ""
	}
	return p.ProjectEntityId
}

func (p *ProjectEntityResponse) GetProjectId() string {
	if p == nil {
		return ""
	}
	return p.ProjectId
}

func (p *ProjectEntityResponse) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *ProjectEntityResponse) GetUploadIds() []string {
	if p == nil {
		return nil
	}
	return p.UploadIds
}

func (p *ProjectEntityResponse) GetStrength() MatchStrengthEnum {
	if p == nil {
		return ""
	}
	return p.Strength
}

func (p *ProjectEntityResponse) GetCreatedAt() string {
	if p == nil {
		return ""
	}
	return p.CreatedAt
}

func (p *ProjectEntityResponse) GetAttributes() map[string]*AttributeValues {
	if p == nil {
		return nil
	}
	return p.Attributes
}

func (p *ProjectEntityResponse) GetCountries() []string {
	if p == nil {
		return nil
	}
	return p.Countries
}

func (p *ProjectEntityResponse) GetRiskCategories() []*ProjectRiskCategory {
	if p == nil {
		return nil
	}
	return p.RiskCategories
}

func (p *ProjectEntityResponse) GetRiskFactors() []*ProjectRiskFactor {
	if p == nil {
		return nil
	}
	return p.RiskFactors
}

func (p *ProjectEntityResponse) GetUpstream() *UpstreamInfo {
	if p == nil {
		return nil
	}
	return p.Upstream
}

func (p *ProjectEntityResponse) GetTags() []*TagResponse {
	if p == nil {
		return nil
	}
	return p.Tags
}

func (p *ProjectEntityResponse) GetCase() *CaseStatus {
	if p == nil {
		return nil
	}
	return p.Case
}

func (p *ProjectEntityResponse) GetMatches() []*ProjectEntityMatchResponse {
	if p == nil {
		return nil
	}
	return p.Matches
}

func (p *ProjectEntityResponse) GetUpdatedAt() *string {
	if p == nil {
		return nil
	}
	return p.UpdatedAt
}

func (p *ProjectEntityResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskChangesResponse struct {
	Filters *RiskChangeFilters                    `json:"filters,omitempty" url:"filters,omitempty"`
	Next    *string                               `json:"next,omitempty" url:"next,omitempty"`
	Prev    *string                               `json:"prev,omitempty" url:"prev,omitempty"`
	Limit   int                                   `json:"limit" url:"limit"`
	Data    *ProjectEntityRiskChangesResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskChangesResponse) GetFilters() *RiskChangeFilters {
	if p == nil {
		return nil
	}
	return p.Filters
}

func (p *ProjectEntityRiskChangesResponse) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *ProjectEntityRiskChangesResponse) GetPrev() *string {
	if p == nil {
		return nil
	}
	return p.Prev
}

func (p *ProjectEntityRiskChangesResponse) GetLimit() int {
	if p == nil {
		return 0
	}
	return p.Limit
}

func (p *ProjectEntityRiskChangesResponse) GetData() *ProjectEntityRiskChangesResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntityRiskChangesResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskChangesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskChangesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskChangesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskChangesResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskChangesResponseData struct {
	ProjectId       string              `json:"project_id" url:"project_id"`
	ProjectEntityId string              `json:"project_entity_id" url:"project_entity_id"`
	RiskFactors     []*RiskChangeFactor `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskChangesResponseData) GetProjectId() string {
	if p == nil {
		return ""
	}
	return p.ProjectId
}

func (p *ProjectEntityRiskChangesResponseData) GetProjectEntityId() string {
	if p == nil {
		return ""
	}
	return p.ProjectEntityId
}

func (p *ProjectEntityRiskChangesResponseData) GetRiskFactors() []*RiskChangeFactor {
	if p == nil {
		return nil
	}
	return p.RiskFactors
}

func (p *ProjectEntityRiskChangesResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskChangesResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskChangesResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskChangesResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskChangesResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskSummaryData struct {
	ProjectEntityId string                                `json:"project_entity_id" url:"project_entity_id"`
	ProjectId       string                                `json:"project_id" url:"project_id"`
	RiskFactors     []*ProjectEntityRiskSummaryRiskFactor `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskSummaryData) GetProjectEntityId() string {
	if p == nil {
		return ""
	}
	return p.ProjectEntityId
}

func (p *ProjectEntityRiskSummaryData) GetProjectId() string {
	if p == nil {
		return ""
	}
	return p.ProjectId
}

func (p *ProjectEntityRiskSummaryData) GetRiskFactors() []*ProjectEntityRiskSummaryRiskFactor {
	if p == nil {
		return nil
	}
	return p.RiskFactors
}

func (p *ProjectEntityRiskSummaryData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskSummaryData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskSummaryData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskSummaryData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskSummaryData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskSummaryFilters struct {
	// Filter by risk factor IDs
	RiskFactor []string `json:"risk_factor,omitempty" url:"risk_factor,omitempty"`
	// Filter by risk category IDs
	RiskCategory []string `json:"risk_category,omitempty" url:"risk_category,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskSummaryFilters) GetRiskFactor() []string {
	if p == nil {
		return nil
	}
	return p.RiskFactor
}

func (p *ProjectEntityRiskSummaryFilters) GetRiskCategory() []string {
	if p == nil {
		return nil
	}
	return p.RiskCategory
}

func (p *ProjectEntityRiskSummaryFilters) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskSummaryFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskSummaryFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskSummaryFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskSummaryFilters) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskSummaryNetworkPath struct {
	SayariEntityId     string            `json:"sayari_entity_id" url:"sayari_entity_id"`
	SayariEntityLabel  string            `json:"sayari_entity_label" url:"sayari_entity_label"`
	RelationshipType   string            `json:"relationship_type" url:"relationship_type"`
	RelationshipStatus string            `json:"relationship_status" url:"relationship_status"`
	Former             bool              `json:"former" url:"former"`
	FirstObserved      string            `json:"first_observed" url:"first_observed"`
	LastObserved       string            `json:"last_observed" url:"last_observed"`
	StartDate          *string           `json:"start_date,omitempty" url:"start_date,omitempty"`
	Shares             *ShareInformation `json:"shares,omitempty" url:"shares,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetSayariEntityId() string {
	if p == nil {
		return ""
	}
	return p.SayariEntityId
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetSayariEntityLabel() string {
	if p == nil {
		return ""
	}
	return p.SayariEntityLabel
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetRelationshipType() string {
	if p == nil {
		return ""
	}
	return p.RelationshipType
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetRelationshipStatus() string {
	if p == nil {
		return ""
	}
	return p.RelationshipStatus
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetFormer() bool {
	if p == nil {
		return false
	}
	return p.Former
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetFirstObserved() string {
	if p == nil {
		return ""
	}
	return p.FirstObserved
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetLastObserved() string {
	if p == nil {
		return ""
	}
	return p.LastObserved
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetStartDate() *string {
	if p == nil {
		return nil
	}
	return p.StartDate
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetShares() *ShareInformation {
	if p == nil {
		return nil
	}
	return p.Shares
}

func (p *ProjectEntityRiskSummaryNetworkPath) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskSummaryNetworkPath) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskSummaryNetworkPath
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskSummaryNetworkPath(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskSummaryNetworkPath) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskSummaryResponse struct {
	Data    *ProjectEntityRiskSummaryData            `json:"data,omitempty" url:"data,omitempty"`
	Filters *ProjectEntityRiskSummaryResponseFilters `json:"filters,omitempty" url:"filters,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskSummaryResponse) GetData() *ProjectEntityRiskSummaryData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntityRiskSummaryResponse) GetFilters() *ProjectEntityRiskSummaryResponseFilters {
	if p == nil {
		return nil
	}
	return p.Filters
}

func (p *ProjectEntityRiskSummaryResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskSummaryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskSummaryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskSummaryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskSummaryResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskSummaryResponseFilters struct {
	RiskFactor   []string `json:"risk_factor,omitempty" url:"risk_factor,omitempty"`
	RiskCategory []string `json:"risk_category,omitempty" url:"risk_category,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskSummaryResponseFilters) GetRiskFactor() []string {
	if p == nil {
		return nil
	}
	return p.RiskFactor
}

func (p *ProjectEntityRiskSummaryResponseFilters) GetRiskCategory() []string {
	if p == nil {
		return nil
	}
	return p.RiskCategory
}

func (p *ProjectEntityRiskSummaryResponseFilters) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskSummaryResponseFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskSummaryResponseFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskSummaryResponseFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskSummaryResponseFilters) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntityRiskSummaryRiskFactor struct {
	Id               string                                   `json:"id" url:"id"`
	Label            string                                   `json:"label" url:"label"`
	Value            *StringOrNumber                          `json:"value,omitempty" url:"value,omitempty"`
	Level            RiskLevel                                `json:"level" url:"level"`
	RiskCategories   []*ProjectRiskCategory                   `json:"risk_categories,omitempty" url:"risk_categories,omitempty"`
	SourceEntityIds  []string                                 `json:"source_entity_ids,omitempty" url:"source_entity_ids,omitempty"`
	NetworkPaths     [][]*ProjectEntityRiskSummaryNetworkPath `json:"network_paths,omitempty" url:"network_paths,omitempty"`
	Metadata         []map[string][]*StringOrNumber           `json:"metadata,omitempty" url:"metadata,omitempty"`
	RiskIntelligence []map[string]*StringOrNumber             `json:"risk_intelligence,omitempty" url:"risk_intelligence,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetValue() *StringOrNumber {
	if p == nil {
		return nil
	}
	return p.Value
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetLevel() RiskLevel {
	if p == nil {
		return ""
	}
	return p.Level
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetRiskCategories() []*ProjectRiskCategory {
	if p == nil {
		return nil
	}
	return p.RiskCategories
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetSourceEntityIds() []string {
	if p == nil {
		return nil
	}
	return p.SourceEntityIds
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetNetworkPaths() [][]*ProjectEntityRiskSummaryNetworkPath {
	if p == nil {
		return nil
	}
	return p.NetworkPaths
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetMetadata() []map[string][]*StringOrNumber {
	if p == nil {
		return nil
	}
	return p.Metadata
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetRiskIntelligence() []map[string]*StringOrNumber {
	if p == nil {
		return nil
	}
	return p.RiskIntelligence
}

func (p *ProjectEntityRiskSummaryRiskFactor) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntityRiskSummaryRiskFactor) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntityRiskSummaryRiskFactor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntityRiskSummaryRiskFactor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntityRiskSummaryRiskFactor) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitySupplyChainSummaryResponse struct {
	Filters *TradeTraversalFilters                       `json:"filters,omitempty" url:"filters,omitempty"`
	Data    *ProjectEntitySupplyChainSummaryResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainSummaryResponse) GetFilters() *TradeTraversalFilters {
	if p == nil {
		return nil
	}
	return p.Filters
}

func (p *ProjectEntitySupplyChainSummaryResponse) GetData() *ProjectEntitySupplyChainSummaryResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectEntitySupplyChainSummaryResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainSummaryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainSummaryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainSummaryResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainSummaryResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitySupplyChainSummaryResponseData struct {
	ProjectId       string                            `json:"project_id" url:"project_id"`
	ProjectEntityId string                            `json:"project_entity_id" url:"project_entity_id"`
	Upstream        *ProjectEntitySupplyChainUpstream `json:"upstream,omitempty" url:"upstream,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainSummaryResponseData) GetProjectId() string {
	if p == nil {
		return ""
	}
	return p.ProjectId
}

func (p *ProjectEntitySupplyChainSummaryResponseData) GetProjectEntityId() string {
	if p == nil {
		return ""
	}
	return p.ProjectEntityId
}

func (p *ProjectEntitySupplyChainSummaryResponseData) GetUpstream() *ProjectEntitySupplyChainUpstream {
	if p == nil {
		return nil
	}
	return p.Upstream
}

func (p *ProjectEntitySupplyChainSummaryResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainSummaryResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainSummaryResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainSummaryResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainSummaryResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectEntitySupplyChainUpstream struct {
	Components     []string                 `json:"components,omitempty" url:"components,omitempty"`
	Countries      []Country                `json:"countries,omitempty" url:"countries,omitempty"`
	RiskCategories []*RiskCategoriesSummary `json:"risk_categories,omitempty" url:"risk_categories,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectEntitySupplyChainUpstream) GetComponents() []string {
	if p == nil {
		return nil
	}
	return p.Components
}

func (p *ProjectEntitySupplyChainUpstream) GetCountries() []Country {
	if p == nil {
		return nil
	}
	return p.Countries
}

func (p *ProjectEntitySupplyChainUpstream) GetRiskCategories() []*RiskCategoriesSummary {
	if p == nil {
		return nil
	}
	return p.RiskCategories
}

func (p *ProjectEntitySupplyChainUpstream) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectEntitySupplyChainUpstream) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectEntitySupplyChainUpstream
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectEntitySupplyChainUpstream(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectEntitySupplyChainUpstream) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectRiskCategory struct {
	Id          string   `json:"id" url:"id"`
	Label       string   `json:"label" url:"label"`
	RiskFactors []string `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectRiskCategory) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProjectRiskCategory) GetLabel() string {
	if p == nil {
		return ""
	}
	return p.Label
}

func (p *ProjectRiskCategory) GetRiskFactors() []string {
	if p == nil {
		return nil
	}
	return p.RiskFactors
}

func (p *ProjectRiskCategory) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectRiskCategory) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectRiskCategory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectRiskCategory(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectRiskCategory) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectRiskChange struct {
	ProjectEntityId string              `json:"project_entity_id" url:"project_entity_id"`
	RiskFactors     []*RiskChangeFactor `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectRiskChange) GetProjectEntityId() string {
	if p == nil {
		return ""
	}
	return p.ProjectEntityId
}

func (p *ProjectRiskChange) GetRiskFactors() []*RiskChangeFactor {
	if p == nil {
		return nil
	}
	return p.RiskFactors
}

func (p *ProjectRiskChange) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectRiskChange) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectRiskChange
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectRiskChange(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectRiskChange) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectRiskChangesResponse struct {
	Filters *RiskChangeFilters              `json:"filters,omitempty" url:"filters,omitempty"`
	Next    *string                         `json:"next,omitempty" url:"next,omitempty"`
	Prev    *string                         `json:"prev,omitempty" url:"prev,omitempty"`
	Limit   int                             `json:"limit" url:"limit"`
	Data    *ProjectRiskChangesResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectRiskChangesResponse) GetFilters() *RiskChangeFilters {
	if p == nil {
		return nil
	}
	return p.Filters
}

func (p *ProjectRiskChangesResponse) GetNext() *string {
	if p == nil {
		return nil
	}
	return p.Next
}

func (p *ProjectRiskChangesResponse) GetPrev() *string {
	if p == nil {
		return nil
	}
	return p.Prev
}

func (p *ProjectRiskChangesResponse) GetLimit() int {
	if p == nil {
		return 0
	}
	return p.Limit
}

func (p *ProjectRiskChangesResponse) GetData() *ProjectRiskChangesResponseData {
	if p == nil {
		return nil
	}
	return p.Data
}

func (p *ProjectRiskChangesResponse) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectRiskChangesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectRiskChangesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectRiskChangesResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectRiskChangesResponse) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectRiskChangesResponseData struct {
	ProjectId   string               `json:"project_id" url:"project_id"`
	RiskChanges []*ProjectRiskChange `json:"risk_changes,omitempty" url:"risk_changes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectRiskChangesResponseData) GetProjectId() string {
	if p == nil {
		return ""
	}
	return p.ProjectId
}

func (p *ProjectRiskChangesResponseData) GetRiskChanges() []*ProjectRiskChange {
	if p == nil {
		return nil
	}
	return p.RiskChanges
}

func (p *ProjectRiskChangesResponseData) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectRiskChangesResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectRiskChangesResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectRiskChangesResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectRiskChangesResponseData) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ProjectRiskFactor struct {
	Id string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (p *ProjectRiskFactor) GetId() string {
	if p == nil {
		return ""
	}
	return p.Id
}

func (p *ProjectRiskFactor) GetExtraProperties() map[string]interface{} {
	return p.extraProperties
}

func (p *ProjectRiskFactor) UnmarshalJSON(data []byte) error {
	type unmarshaler ProjectRiskFactor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*p = ProjectRiskFactor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *p)
	if err != nil {
		return err
	}
	p.extraProperties = extraProperties
	p.rawJSON = json.RawMessage(data)
	return nil
}

func (p *ProjectRiskFactor) String() string {
	if len(p.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(p.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(p); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", p)
}

type ResolutionAttributes struct {
	Identifier      []*StringOrNumber `json:"identifier,omitempty" url:"identifier,omitempty"`
	Name            []string          `json:"name,omitempty" url:"name,omitempty"`
	Country         []string          `json:"country,omitempty" url:"country,omitempty"`
	Address         []string          `json:"address,omitempty" url:"address,omitempty"`
	DateOfBirth     []string          `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	Contact         []*StringOrNumber `json:"contact,omitempty" url:"contact,omitempty"`
	Type            []string          `json:"type,omitempty" url:"type,omitempty"`
	City            []string          `json:"city,omitempty" url:"city,omitempty"`
	State           []string          `json:"state,omitempty" url:"state,omitempty"`
	CustomFieldName *CustomFieldValue `json:"custom_{field name},omitempty" url:"custom_{field name},omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *ResolutionAttributes) GetIdentifier() []*StringOrNumber {
	if r == nil {
		return nil
	}
	return r.Identifier
}

func (r *ResolutionAttributes) GetName() []string {
	if r == nil {
		return nil
	}
	return r.Name
}

func (r *ResolutionAttributes) GetCountry() []string {
	if r == nil {
		return nil
	}
	return r.Country
}

func (r *ResolutionAttributes) GetAddress() []string {
	if r == nil {
		return nil
	}
	return r.Address
}

func (r *ResolutionAttributes) GetDateOfBirth() []string {
	if r == nil {
		return nil
	}
	return r.DateOfBirth
}

func (r *ResolutionAttributes) GetContact() []*StringOrNumber {
	if r == nil {
		return nil
	}
	return r.Contact
}

func (r *ResolutionAttributes) GetType() []string {
	if r == nil {
		return nil
	}
	return r.Type
}

func (r *ResolutionAttributes) GetCity() []string {
	if r == nil {
		return nil
	}
	return r.City
}

func (r *ResolutionAttributes) GetState() []string {
	if r == nil {
		return nil
	}
	return r.State
}

func (r *ResolutionAttributes) GetCustomFieldName() *CustomFieldValue {
	if r == nil {
		return nil
	}
	return r.CustomFieldName
}

func (r *ResolutionAttributes) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *ResolutionAttributes) UnmarshalJSON(data []byte) error {
	type unmarshaler ResolutionAttributes
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = ResolutionAttributes(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *ResolutionAttributes) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type ResolutionProfile string

const (
	ResolutionProfileSuppliers ResolutionProfile = "suppliers"
	ResolutionProfileCorporate ResolutionProfile = "corporate"
	ResolutionProfileSearch    ResolutionProfile = "search"
	ResolutionProfileScreen    ResolutionProfile = "screen"
)

func NewResolutionProfileFromString(s string) (ResolutionProfile, error) {
	switch s {
	case "suppliers":
		return ResolutionProfileSuppliers, nil
	case "corporate":
		return ResolutionProfileCorporate, nil
	case "search":
		return ResolutionProfileSearch, nil
	case "screen":
		return ResolutionProfileScreen, nil
	}
	var t ResolutionProfile
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResolutionProfile) Ptr() *ResolutionProfile {
	return &r
}

type RiskCategoriesSummary struct {
	Id          string `json:"id" url:"id"`
	Label       string `json:"label" url:"label"`
	RiskFactors []Risk `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RiskCategoriesSummary) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RiskCategoriesSummary) GetLabel() string {
	if r == nil {
		return ""
	}
	return r.Label
}

func (r *RiskCategoriesSummary) GetRiskFactors() []Risk {
	if r == nil {
		return nil
	}
	return r.RiskFactors
}

func (r *RiskCategoriesSummary) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskCategoriesSummary) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskCategoriesSummary
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskCategoriesSummary(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskCategoriesSummary) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RiskChangeFactor struct {
	Id string `json:"id" url:"id"`
	// Timestamp of risk change detection
	Timestamp  string                     `json:"timestamp" url:"timestamp"`
	ChangeType RiskChangeFactorChangeType `json:"change_type" url:"change_type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RiskChangeFactor) GetId() string {
	if r == nil {
		return ""
	}
	return r.Id
}

func (r *RiskChangeFactor) GetTimestamp() string {
	if r == nil {
		return ""
	}
	return r.Timestamp
}

func (r *RiskChangeFactor) GetChangeType() RiskChangeFactorChangeType {
	if r == nil {
		return ""
	}
	return r.ChangeType
}

func (r *RiskChangeFactor) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskChangeFactor) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskChangeFactor
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskChangeFactor(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskChangeFactor) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RiskChangeFactorChangeType string

const (
	RiskChangeFactorChangeTypeAdded   RiskChangeFactorChangeType = "added"
	RiskChangeFactorChangeTypeRemoved RiskChangeFactorChangeType = "removed"
)

func NewRiskChangeFactorChangeTypeFromString(s string) (RiskChangeFactorChangeType, error) {
	switch s {
	case "added":
		return RiskChangeFactorChangeTypeAdded, nil
	case "removed":
		return RiskChangeFactorChangeTypeRemoved, nil
	}
	var t RiskChangeFactorChangeType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r RiskChangeFactorChangeType) Ptr() *RiskChangeFactorChangeType {
	return &r
}

type RiskChangeFilters struct {
	From         *string  `json:"from,omitempty" url:"from,omitempty"`
	To           *string  `json:"to,omitempty" url:"to,omitempty"`
	RiskFactor   []string `json:"risk_factor,omitempty" url:"risk_factor,omitempty"`
	RiskCategory []string `json:"risk_category,omitempty" url:"risk_category,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RiskChangeFilters) GetFrom() *string {
	if r == nil {
		return nil
	}
	return r.From
}

func (r *RiskChangeFilters) GetTo() *string {
	if r == nil {
		return nil
	}
	return r.To
}

func (r *RiskChangeFilters) GetRiskFactor() []string {
	if r == nil {
		return nil
	}
	return r.RiskFactor
}

func (r *RiskChangeFilters) GetRiskCategory() []string {
	if r == nil {
		return nil
	}
	return r.RiskCategory
}

func (r *RiskChangeFilters) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RiskChangeFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler RiskChangeFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RiskChangeFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RiskChangeFilters) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SaveProjectEntityBody struct {
	EntityIds  []string              `json:"entity_ids,omitempty" url:"entity_ids,omitempty"`
	Attributes *ResolutionAttributes `json:"attributes,omitempty" url:"attributes,omitempty"`
	Profile    ResolutionProfile     `json:"profile" url:"profile"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SaveProjectEntityBody) GetEntityIds() []string {
	if s == nil {
		return nil
	}
	return s.EntityIds
}

func (s *SaveProjectEntityBody) GetAttributes() *ResolutionAttributes {
	if s == nil {
		return nil
	}
	return s.Attributes
}

func (s *SaveProjectEntityBody) GetProfile() ResolutionProfile {
	if s == nil {
		return ""
	}
	return s.Profile
}

func (s *SaveProjectEntityBody) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SaveProjectEntityBody) UnmarshalJSON(data []byte) error {
	type unmarshaler SaveProjectEntityBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SaveProjectEntityBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SaveProjectEntityBody) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShareInformation struct {
	Percentage    *float64 `json:"percentage,omitempty" url:"percentage,omitempty"`
	NumShares     *int     `json:"num_shares,omitempty" url:"num_shares,omitempty"`
	MonetaryValue *int     `json:"monetary_value,omitempty" url:"monetary_value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShareInformation) GetPercentage() *float64 {
	if s == nil {
		return nil
	}
	return s.Percentage
}

func (s *ShareInformation) GetNumShares() *int {
	if s == nil {
		return nil
	}
	return s.NumShares
}

func (s *ShareInformation) GetMonetaryValue() *int {
	if s == nil {
		return nil
	}
	return s.MonetaryValue
}

func (s *ShareInformation) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShareInformation) UnmarshalJSON(data []byte) error {
	type unmarshaler ShareInformation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShareInformation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShareInformation) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SingleProjectEntityResponse struct {
	Data *ProjectEntityResponse `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SingleProjectEntityResponse) GetData() *ProjectEntityResponse {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SingleProjectEntityResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SingleProjectEntityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SingleProjectEntityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SingleProjectEntityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SingleProjectEntityResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SortOrder string

const (
	SortOrderAsc  SortOrder = "asc"
	SortOrderDesc SortOrder = "desc"
)

func NewSortOrderFromString(s string) (SortOrder, error) {
	switch s {
	case "asc":
		return SortOrderAsc, nil
	case "desc":
		return SortOrderDesc, nil
	}
	var t SortOrder
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (s SortOrder) Ptr() *SortOrder {
	return &s
}

type SourceField struct {
	Id    string `json:"id" url:"id"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceField) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SourceField) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SourceField) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceField) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceField
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceField(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceField) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SpecialFacetBucket struct {
	Key      string           `json:"key" url:"key"`
	DocCount int              `json:"doc_count" url:"doc_count"`
	Products []*ProductBucket `json:"products,omitempty" url:"products,omitempty"`
	Lat      *float64         `json:"lat,omitempty" url:"lat,omitempty"`
	Lon      *float64         `json:"lon,omitempty" url:"lon,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SpecialFacetBucket) GetKey() string {
	if s == nil {
		return ""
	}
	return s.Key
}

func (s *SpecialFacetBucket) GetDocCount() int {
	if s == nil {
		return 0
	}
	return s.DocCount
}

func (s *SpecialFacetBucket) GetProducts() []*ProductBucket {
	if s == nil {
		return nil
	}
	return s.Products
}

func (s *SpecialFacetBucket) GetLat() *float64 {
	if s == nil {
		return nil
	}
	return s.Lat
}

func (s *SpecialFacetBucket) GetLon() *float64 {
	if s == nil {
		return nil
	}
	return s.Lon
}

func (s *SpecialFacetBucket) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SpecialFacetBucket) UnmarshalJSON(data []byte) error {
	type unmarshaler SpecialFacetBucket
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpecialFacetBucket(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SpecialFacetBucket) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SpecialFacetsResponse struct {
	Data map[string][]*SpecialFacetBucket `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SpecialFacetsResponse) GetData() map[string][]*SpecialFacetBucket {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SpecialFacetsResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SpecialFacetsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SpecialFacetsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SpecialFacetsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SpecialFacetsResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type StringOrNumber struct {
	String  string
	Integer int
	Double  float64

	typ string
}

func NewStringOrNumberFromString(value string) *StringOrNumber {
	return &StringOrNumber{typ: "String", String: value}
}

func NewStringOrNumberFromInteger(value int) *StringOrNumber {
	return &StringOrNumber{typ: "Integer", Integer: value}
}

func NewStringOrNumberFromDouble(value float64) *StringOrNumber {
	return &StringOrNumber{typ: "Double", Double: value}
}

func (s *StringOrNumber) GetString() string {
	if s == nil {
		return ""
	}
	return s.String
}

func (s *StringOrNumber) GetInteger() int {
	if s == nil {
		return 0
	}
	return s.Integer
}

func (s *StringOrNumber) GetDouble() float64 {
	if s == nil {
		return 0
	}
	return s.Double
}

func (s *StringOrNumber) UnmarshalJSON(data []byte) error {
	var valueString string
	if err := json.Unmarshal(data, &valueString); err == nil {
		s.typ = "String"
		s.String = valueString
		return nil
	}
	var valueInteger int
	if err := json.Unmarshal(data, &valueInteger); err == nil {
		s.typ = "Integer"
		s.Integer = valueInteger
		return nil
	}
	var valueDouble float64
	if err := json.Unmarshal(data, &valueDouble); err == nil {
		s.typ = "Double"
		s.Double = valueDouble
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, s)
}

func (s StringOrNumber) MarshalJSON() ([]byte, error) {
	if s.typ == "String" || s.String != "" {
		return json.Marshal(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return json.Marshal(s.Integer)
	}
	if s.typ == "Double" || s.Double != 0 {
		return json.Marshal(s.Double)
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", s)
}

type StringOrNumberVisitor interface {
	VisitString(string) error
	VisitInteger(int) error
	VisitDouble(float64) error
}

func (s *StringOrNumber) Accept(visitor StringOrNumberVisitor) error {
	if s.typ == "String" || s.String != "" {
		return visitor.VisitString(s.String)
	}
	if s.typ == "Integer" || s.Integer != 0 {
		return visitor.VisitInteger(s.Integer)
	}
	if s.typ == "Double" || s.Double != 0 {
		return visitor.VisitDouble(s.Double)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", s)
}

type TagResponse struct {
	Id        string  `json:"id" url:"id"`
	Label     string  `json:"label" url:"label"`
	CreatedAt string  `json:"created_at" url:"created_at"`
	UpdatedAt *string `json:"updated_at,omitempty" url:"updated_at,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TagResponse) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TagResponse) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TagResponse) GetCreatedAt() string {
	if t == nil {
		return ""
	}
	return t.CreatedAt
}

func (t *TagResponse) GetUpdatedAt() *string {
	if t == nil {
		return nil
	}
	return t.UpdatedAt
}

func (t *TagResponse) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TagResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler TagResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TagResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TagResponse) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeCounts struct {
	ReceiverOf int `json:"receiver_of" url:"receiver_of"`
	ShipperOf  int `json:"shipper_of" url:"shipper_of"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeCounts) GetReceiverOf() int {
	if t == nil {
		return 0
	}
	return t.ReceiverOf
}

func (t *TradeCounts) GetShipperOf() int {
	if t == nil {
		return 0
	}
	return t.ShipperOf
}

func (t *TradeCounts) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeCounts) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeCounts
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeCounts(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeCounts) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type Translation struct {
	Target string  `json:"target" url:"target"`
	Source *string `json:"source,omitempty" url:"source,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *Translation) GetTarget() string {
	if t == nil {
		return ""
	}
	return t.Target
}

func (t *Translation) GetSource() *string {
	if t == nil {
		return nil
	}
	return t.Source
}

func (t *Translation) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *Translation) UnmarshalJSON(data []byte) error {
	type unmarshaler Translation
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = Translation(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *Translation) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpdateEntityTagsResponse struct {
	Data []string `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateEntityTagsResponse) GetData() []string {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateEntityTagsResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateEntityTagsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateEntityTagsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateEntityTagsResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateEntityTagsResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateProjectEntityTagsBody struct {
	Ids []string `json:"ids,omitempty" url:"ids,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateProjectEntityTagsBody) GetIds() []string {
	if u == nil {
		return nil
	}
	return u.Ids
}

func (u *UpdateProjectEntityTagsBody) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateProjectEntityTagsBody) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateProjectEntityTagsBody
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateProjectEntityTagsBody(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateProjectEntityTagsBody) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpstreamCount = map[string]map[string][]*ProductCount

type UpstreamInfo struct {
	RiskFactors   []*ProjectRiskFactor `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	Countries     []string             `json:"countries,omitempty" url:"countries,omitempty"`
	TradeCounts   *TradeCounts         `json:"trade_counts,omitempty" url:"trade_counts,omitempty"`
	HasUpstream   bool                 `json:"has_upstream" url:"has_upstream"`
	Products      []string             `json:"products,omitempty" url:"products,omitempty"`
	RiskCounts    *UpstreamCount       `json:"risk_counts,omitempty" url:"risk_counts,omitempty"`
	CountryCounts *UpstreamCount       `json:"country_counts,omitempty" url:"country_counts,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpstreamInfo) GetRiskFactors() []*ProjectRiskFactor {
	if u == nil {
		return nil
	}
	return u.RiskFactors
}

func (u *UpstreamInfo) GetCountries() []string {
	if u == nil {
		return nil
	}
	return u.Countries
}

func (u *UpstreamInfo) GetTradeCounts() *TradeCounts {
	if u == nil {
		return nil
	}
	return u.TradeCounts
}

func (u *UpstreamInfo) GetHasUpstream() bool {
	if u == nil {
		return false
	}
	return u.HasUpstream
}

func (u *UpstreamInfo) GetProducts() []string {
	if u == nil {
		return nil
	}
	return u.Products
}

func (u *UpstreamInfo) GetRiskCounts() *UpstreamCount {
	if u == nil {
		return nil
	}
	return u.RiskCounts
}

func (u *UpstreamInfo) GetCountryCounts() *UpstreamCount {
	if u == nil {
		return nil
	}
	return u.CountryCounts
}

func (u *UpstreamInfo) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpstreamInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler UpstreamInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpstreamInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpstreamInfo) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
