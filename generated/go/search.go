// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type SearchEntity struct {
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q string `json:"q" url:"-"`
	// Record or entity fields to search against.
	Fields []SearchField `json:"fields,omitempty" url:"-"`
	// Filters to be applied to search query to limit the result-set.
	Filter *FilterList `json:"filter,omitempty" url:"-"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty" url:"-"`
	// Whether or not to return search geo bound facets in results giving counts by geo tile. Defaults to false.
	GeoFacets *bool `json:"geo_facets,omitempty" url:"-"`
	// Set to true to enable full elasticsearch query string syntax which allows for fielded search and more complex operators. Note that the syntax is more strict and can result in empty result-sets. Defaults to false.
	Advanced *bool `json:"advanced,omitempty" url:"-"`
}

type SearchEntityGet struct {
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q string `json:"-" url:"q"`
	// Record or entity fields to search against.
	Fields []*SearchField `json:"-" url:"fields,omitempty"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"-" url:"facets,omitempty"`
	// Whether or not to return search geo bound facets in results giving counts by geo tile. Defaults to false.
	GeoFacets *bool `json:"-" url:"geo_facets,omitempty"`
	// Set to true to enable full elasticsearch query string syntax which allows for fielded search and more complex operators. Note that the syntax is more strict and can result in empty result-sets. Defaults to false.
	Advanced *bool `json:"-" url:"advanced,omitempty"`
}

type SearchRecord struct {
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q string `json:"q" url:"-"`
	// Filters to be applied to search query to limit the result-set.
	Filter *FilterList `json:"filter,omitempty" url:"-"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty" url:"-"`
	// Set to true to enable full elasticsearch query string syntax which allows for fielded search and more complex operators. Note that the syntax is more strict and can result in empty result-sets. Defaults to false.
	Advanced *bool `json:"advanced,omitempty" url:"-"`
}

type SearchRecordGet struct {
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q string `json:"-" url:"q"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"-" url:"facets,omitempty"`
	// Set to true to enable full elasticsearch query string syntax which allows for fielded search and more complex operators. Note that the syntax is more strict and can result in empty result-sets. Defaults to false.
	Advanced *bool `json:"-" url:"advanced,omitempty"`
}

type Coordinates struct {
	Lat     *float64 `json:"lat,omitempty" url:"lat,omitempty"`
	Lng     *float64 `json:"lng,omitempty" url:"lng,omitempty"`
	Address string   `json:"address" url:"address"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (c *Coordinates) GetLat() *float64 {
	if c == nil {
		return nil
	}
	return c.Lat
}

func (c *Coordinates) GetLng() *float64 {
	if c == nil {
		return nil
	}
	return c.Lng
}

func (c *Coordinates) GetAddress() string {
	if c == nil {
		return ""
	}
	return c.Address
}

func (c *Coordinates) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *Coordinates) UnmarshalJSON(data []byte) error {
	type unmarshaler Coordinates
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = Coordinates(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties
	c.rawJSON = json.RawMessage(data)
	return nil
}

func (c *Coordinates) String() string {
	if len(c.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(c.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

// OK
type EntitySearchResponse struct {
	Limit  int              `json:"limit" url:"limit"`
	Size   *QualifiedCount  `json:"size,omitempty" url:"size,omitempty"`
	Offset int              `json:"offset" url:"offset"`
	Next   bool             `json:"next" url:"next"`
	Data   []*SearchResults `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntitySearchResponse) GetLimit() int {
	if e == nil {
		return 0
	}
	return e.Limit
}

func (e *EntitySearchResponse) GetSize() *QualifiedCount {
	if e == nil {
		return nil
	}
	return e.Size
}

func (e *EntitySearchResponse) GetOffset() int {
	if e == nil {
		return 0
	}
	return e.Offset
}

func (e *EntitySearchResponse) GetNext() bool {
	if e == nil {
		return false
	}
	return e.Next
}

func (e *EntitySearchResponse) GetData() []*SearchResults {
	if e == nil {
		return nil
	}
	return e.Data
}

func (e *EntitySearchResponse) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntitySearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler EntitySearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntitySearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntitySearchResponse) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

// Filter your search on the following attributes.
type FilterList struct {
	// List of source IDs to filter by.
	Source []SourceId `json:"source,omitempty" url:"source,omitempty"`
	// List of countries to filter by.
	Country []Country `json:"country,omitempty" url:"country,omitempty"`
	// List of states or provinces to filter by.
	State []string `json:"state,omitempty" url:"state,omitempty"`
	// List of cities to filter by.
	City []string `json:"city,omitempty" url:"city,omitempty"`
	// List of entity types to filter by.
	EntityType []Entities `json:"entity_type,omitempty" url:"entity_type,omitempty"`
	// Pipe-delimited bounding box coordinates (north,west,south,east). E.g., '"46.12|-76|45|-75"'.
	Bounds []string `json:"bounds,omitempty" url:"bounds,omitempty"`
	// List of risk factors to filter by.
	Risk *RiskFactor `json:"risk,omitempty" url:"risk,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (f *FilterList) GetSource() []SourceId {
	if f == nil {
		return nil
	}
	return f.Source
}

func (f *FilterList) GetCountry() []Country {
	if f == nil {
		return nil
	}
	return f.Country
}

func (f *FilterList) GetState() []string {
	if f == nil {
		return nil
	}
	return f.State
}

func (f *FilterList) GetCity() []string {
	if f == nil {
		return nil
	}
	return f.City
}

func (f *FilterList) GetEntityType() []Entities {
	if f == nil {
		return nil
	}
	return f.EntityType
}

func (f *FilterList) GetBounds() []string {
	if f == nil {
		return nil
	}
	return f.Bounds
}

func (f *FilterList) GetRisk() *RiskFactor {
	if f == nil {
		return nil
	}
	return f.Risk
}

func (f *FilterList) GetExtraProperties() map[string]interface{} {
	return f.extraProperties
}

func (f *FilterList) UnmarshalJSON(data []byte) error {
	type unmarshaler FilterList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*f = FilterList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *f)
	if err != nil {
		return err
	}
	f.extraProperties = extraProperties
	f.rawJSON = json.RawMessage(data)
	return nil
}

func (f *FilterList) String() string {
	if len(f.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(f.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(f); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", f)
}

// OK
type RecordSearchResponse struct {
	Limit  int              `json:"limit" url:"limit"`
	Size   *QualifiedCount  `json:"size,omitempty" url:"size,omitempty"`
	Offset int              `json:"offset" url:"offset"`
	Next   bool             `json:"next" url:"next"`
	Data   []*RecordDetails `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (r *RecordSearchResponse) GetLimit() int {
	if r == nil {
		return 0
	}
	return r.Limit
}

func (r *RecordSearchResponse) GetSize() *QualifiedCount {
	if r == nil {
		return nil
	}
	return r.Size
}

func (r *RecordSearchResponse) GetOffset() int {
	if r == nil {
		return 0
	}
	return r.Offset
}

func (r *RecordSearchResponse) GetNext() bool {
	if r == nil {
		return false
	}
	return r.Next
}

func (r *RecordSearchResponse) GetData() []*RecordDetails {
	if r == nil {
		return nil
	}
	return r.Data
}

func (r *RecordSearchResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RecordSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RecordSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RecordSearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties
	r.rawJSON = json.RawMessage(data)
	return nil
}

func (r *RecordSearchResponse) String() string {
	if len(r.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(r.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RiskFactor struct {
	// Matches specific risk factors
	RiskList []Risk
	// Matches any risk factor
	AnyStringLiteral string

	typ string
}

func NewRiskFactorFromRiskList(value []Risk) *RiskFactor {
	return &RiskFactor{typ: "RiskList", RiskList: value}
}

func NewRiskFactorWithAnyStringLiteral() *RiskFactor {
	return &RiskFactor{typ: "AnyStringLiteral", AnyStringLiteral: "any"}
}

func (r *RiskFactor) GetRiskList() []Risk {
	if r == nil {
		return nil
	}
	return r.RiskList
}

func (r *RiskFactor) UnmarshalJSON(data []byte) error {
	var valueRiskList []Risk
	if err := json.Unmarshal(data, &valueRiskList); err == nil {
		r.typ = "RiskList"
		r.RiskList = valueRiskList
		return nil
	}
	var valueAnyStringLiteral string
	if err := json.Unmarshal(data, &valueAnyStringLiteral); err == nil {
		r.typ = "AnyStringLiteral"
		r.AnyStringLiteral = valueAnyStringLiteral
		if r.AnyStringLiteral != "any" {
			return fmt.Errorf("unexpected value for literal on type %T; expected %v got %v", r, "any", valueAnyStringLiteral)
		}
		return nil
	}
	return fmt.Errorf("%s cannot be deserialized as a %T", data, r)
}

func (r RiskFactor) MarshalJSON() ([]byte, error) {
	if r.typ == "RiskList" || r.RiskList != nil {
		return json.Marshal(r.RiskList)
	}
	if r.typ == "AnyStringLiteral" || r.AnyStringLiteral != "" {
		return json.Marshal("any")
	}
	return nil, fmt.Errorf("type %T does not include a non-empty union type", r)
}

type RiskFactorVisitor interface {
	VisitRiskList([]Risk) error
	VisitAnyStringLiteral(string) error
}

func (r *RiskFactor) Accept(visitor RiskFactorVisitor) error {
	if r.typ == "RiskList" || r.RiskList != nil {
		return visitor.VisitRiskList(r.RiskList)
	}
	if r.typ == "AnyStringLiteral" || r.AnyStringLiteral != "" {
		return visitor.VisitAnyStringLiteral(r.AnyStringLiteral)
	}
	return fmt.Errorf("type %T does not include a non-empty union type", r)
}

type SearchResults struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount map[Attributes]int `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCounts map[Attributes]int `json:"attribute_counts,omitempty" url:"attribute_counts,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCounts      map[Attributes]int      `json:"user_attribute_counts,omitempty" url:"user_attribute_counts,omitempty"`
	RelatedEntitiesCount     int                     `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                     `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                     `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string                 `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	RegistrationDate         *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	TranslatedLabel          *EntityTranslatedLabel  `json:"translated_label,omitempty" url:"translated_label,omitempty"`
	HsCode                   *EntityHsCode           `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	ShipmentArrival          *ShipmentArrival        `json:"shipment_arrival,omitempty" url:"shipment_arrival,omitempty"`
	ShipmentDeparture        *ShipmentDeparture      `json:"shipment_departure,omitempty" url:"shipment_departure,omitempty"`
	CompanyType              *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	LatestStatus             *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`
	// [Risk factors](/sayari-library/ontology/risk-factors) associated with the entity.
	Risk EntityRisk `json:"risk,omitempty" url:"risk,omitempty"`
	// Detailed information about the entity's [attributes](/sayari-library/ontology/attributes).
	Attributes *AttributeDetails `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Detailed information about the entity's [relationships](/sayari-library/ontology/relationships).
	Relationships  *EntityRelationships `json:"relationships,omitempty" url:"relationships,omitempty"`
	PossiblySameAs *PossiblySameAs      `json:"possibly_same_as,omitempty" url:"possibly_same_as,omitempty"`
	ReferencedBy   *ReferencedBy        `json:"referenced_by,omitempty" url:"referenced_by,omitempty"`
	Coordinates    []*Coordinates       `json:"coordinates,omitempty" url:"coordinates,omitempty"`
	Matches        EntityMatches        `json:"matches,omitempty" url:"matches,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SearchResults) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SearchResults) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SearchResults) GetDegree() int {
	if s == nil {
		return 0
	}
	return s.Degree
}

func (s *SearchResults) GetClosed() bool {
	if s == nil {
		return false
	}
	return s.Closed
}

func (s *SearchResults) GetEntityUrl() string {
	if s == nil {
		return ""
	}
	return s.EntityUrl
}

func (s *SearchResults) GetPep() bool {
	if s == nil {
		return false
	}
	return s.Pep
}

func (s *SearchResults) GetPsaId() *string {
	if s == nil {
		return nil
	}
	return s.PsaId
}

func (s *SearchResults) GetPsaCount() int {
	if s == nil {
		return 0
	}
	return s.PsaCount
}

func (s *SearchResults) GetSanctioned() bool {
	if s == nil {
		return false
	}
	return s.Sanctioned
}

func (s *SearchResults) GetType() Entities {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SearchResults) GetIdentifiers() []*Identifier {
	if s == nil {
		return nil
	}
	return s.Identifiers
}

func (s *SearchResults) GetCountries() []Country {
	if s == nil {
		return nil
	}
	return s.Countries
}

func (s *SearchResults) GetSourceCount() map[string]*SourceCountInfo {
	if s == nil {
		return nil
	}
	return s.SourceCount
}

func (s *SearchResults) GetAddresses() []string {
	if s == nil {
		return nil
	}
	return s.Addresses
}

func (s *SearchResults) GetTradeCount() map[string]int {
	if s == nil {
		return nil
	}
	return s.TradeCount
}

func (s *SearchResults) GetDateOfBirth() *string {
	if s == nil {
		return nil
	}
	return s.DateOfBirth
}

func (s *SearchResults) GetRelationshipCount() RelationshipCount {
	if s == nil {
		return nil
	}
	return s.RelationshipCount
}

func (s *SearchResults) GetUserRelationshipCount() RelationshipCount {
	if s == nil {
		return nil
	}
	return s.UserRelationshipCount
}

func (s *SearchResults) GetAttributeCount() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.AttributeCount
}

func (s *SearchResults) GetUserAttributeCount() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.UserAttributeCount
}

func (s *SearchResults) GetAttributeCounts() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.AttributeCounts
}

func (s *SearchResults) GetUserAttributeCounts() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.UserAttributeCounts
}

func (s *SearchResults) GetRelatedEntitiesCount() int {
	if s == nil {
		return 0
	}
	return s.RelatedEntitiesCount
}

func (s *SearchResults) GetUserRelatedEntitiesCount() int {
	if s == nil {
		return 0
	}
	return s.UserRelatedEntitiesCount
}

func (s *SearchResults) GetUserRecordCount() int {
	if s == nil {
		return 0
	}
	return s.UserRecordCount
}

func (s *SearchResults) GetReferenceId() *string {
	if s == nil {
		return nil
	}
	return s.ReferenceId
}

func (s *SearchResults) GetRegistrationDate() *EntityRegistrationDate {
	if s == nil {
		return nil
	}
	return s.RegistrationDate
}

func (s *SearchResults) GetTranslatedLabel() *EntityTranslatedLabel {
	if s == nil {
		return nil
	}
	return s.TranslatedLabel
}

func (s *SearchResults) GetHsCode() *EntityHsCode {
	if s == nil {
		return nil
	}
	return s.HsCode
}

func (s *SearchResults) GetShipmentArrival() *ShipmentArrival {
	if s == nil {
		return nil
	}
	return s.ShipmentArrival
}

func (s *SearchResults) GetShipmentDeparture() *ShipmentDeparture {
	if s == nil {
		return nil
	}
	return s.ShipmentDeparture
}

func (s *SearchResults) GetCompanyType() *CompanyType {
	if s == nil {
		return nil
	}
	return s.CompanyType
}

func (s *SearchResults) GetLatestStatus() *Status {
	if s == nil {
		return nil
	}
	return s.LatestStatus
}

func (s *SearchResults) GetRisk() EntityRisk {
	if s == nil {
		return nil
	}
	return s.Risk
}

func (s *SearchResults) GetAttributes() *AttributeDetails {
	if s == nil {
		return nil
	}
	return s.Attributes
}

func (s *SearchResults) GetRelationships() *EntityRelationships {
	if s == nil {
		return nil
	}
	return s.Relationships
}

func (s *SearchResults) GetPossiblySameAs() *PossiblySameAs {
	if s == nil {
		return nil
	}
	return s.PossiblySameAs
}

func (s *SearchResults) GetReferencedBy() *ReferencedBy {
	if s == nil {
		return nil
	}
	return s.ReferencedBy
}

func (s *SearchResults) GetCoordinates() []*Coordinates {
	if s == nil {
		return nil
	}
	return s.Coordinates
}

func (s *SearchResults) GetMatches() EntityMatches {
	if s == nil {
		return nil
	}
	return s.Matches
}

func (s *SearchResults) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SearchResults) UnmarshalJSON(data []byte) error {
	type unmarshaler SearchResults
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SearchResults(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SearchResults) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The unique identifier for a source in the database
type SourceId = string
