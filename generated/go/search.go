// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
)

type SearchEntity struct {
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q string `json:"q"`
	// Filters to be applied to search query to limit the result-set.
	Filter map[FilterKey][]string `json:"filter,omitempty"`
	// Record or entity fields to search against.
	Fields []string `json:"fields,omitempty"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty"`
	// Whether or not to return search geo bound facets in results giving counts by geo tile. Defaults to false.
	GeoFacets *bool `json:"geo_facets,omitempty"`
	// Set to true to enable full elasticsearch query string syntax which allows for fielded search and more complex operators. Note that the syntax is more strict and can result in empty result-sets. Defaults to false.
	Advanced *bool `json:"advanced,omitempty"`
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"offset,omitempty"`
}

type SearchRecord struct {
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q string `json:"q"`
	// Filters to be applied to search query to limit the result-set.
	Filter map[FilterKey][]string `json:"filter,omitempty"`
	// Record or entity fields to search against.
	Fields []string `json:"fields,omitempty"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty"`
	// Whether or not to return search geo bound facets in results giving counts by geo tile. Defaults to false.
	GeoFacets *bool `json:"geo_facets,omitempty"`
	// Set to true to enable full elasticsearch query string syntax which allows for fielded search and more complex operators. Note that the syntax is more strict and can result in empty result-sets. Defaults to false.
	Advanced *bool `json:"advanced,omitempty"`
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"offset,omitempty"`
}

type EntitySearchResults struct {
	Limit  int              `json:"limit"`
	Size   *SizeInfo        `json:"size,omitempty"`
	Offset int              `json:"offset"`
	Next   bool             `json:"next"`
	Data   []*EntityDetails `json:"data,omitempty"`
}

type FilterKey string

const (
	FilterKeySource     FilterKey = "source"
	FilterKeyCountry    FilterKey = "country"
	FilterKeyState      FilterKey = "state"
	FilterKeyCity       FilterKey = "city"
	FilterKeyEntityType FilterKey = "entity_type"
	FilterKeyBounds     FilterKey = "bounds"
	FilterKeyRisk       FilterKey = "risk"
)

func NewFilterKeyFromString(s string) (FilterKey, error) {
	switch s {
	case "source":
		return FilterKeySource, nil
	case "country":
		return FilterKeyCountry, nil
	case "state":
		return FilterKeyState, nil
	case "city":
		return FilterKeyCity, nil
	case "entity_type":
		return FilterKeyEntityType, nil
	case "bounds":
		return FilterKeyBounds, nil
	case "risk":
		return FilterKeyRisk, nil
	}
	var t FilterKey
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (f FilterKey) Ptr() *FilterKey {
	return &f
}

type RecordSearchResults struct {
	Limit  int              `json:"limit"`
	Size   *SizeInfo        `json:"size,omitempty"`
	Offset int              `json:"offset"`
	Next   bool             `json:"next"`
	Data   []*RecordDetails `json:"data,omitempty"`
}
