// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
)

type ListSources struct {
	// A limit on the number of objects to be returned with a range between 1 and 100. Defaults to 100.
	Limit *int `json:"-"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-"`
}

// The unique identifier for a source in the database
type SourceId = string

// OK
type GetSourceResponse struct {
	Id          string  `json:"id"`
	Label       string  `json:"label"`
	Description string  `json:"description"`
	Country     Country `json:"country,omitempty"`
	Region      string  `json:"region"`
	DateAdded   string  `json:"date_added"`
	SourceType  string  `json:"source_type"`
	RecordType  string  `json:"record_type"`
	Structure   string  `json:"structure"`
	SourceUrl   *string `json:"source_url,omitempty"`
	Pep         bool    `json:"pep"`
	Watchlist   bool    `json:"watchlist"`

	_rawJSON json.RawMessage
}

func (g *GetSourceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSourceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSourceResponse(value)
	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSourceResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// OK
type ListSourcesResponse struct {
	Limit  int       `json:"limit"`
	Size   *SizeInfo `json:"size,omitempty"`
	Offset int       `json:"offset"`
	Next   bool      `json:"next"`
	Data   []*Source `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (l *ListSourcesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSourcesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSourcesResponse(value)
	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSourcesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}
