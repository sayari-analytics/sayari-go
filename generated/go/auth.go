// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
)

type GetToken struct {
	ClientId     ClientId     `json:"client_id"`
	ClientSecret ClientSecret `json:"client_secret"`
	Audience     Audience     `json:"audience,omitempty"`
	GrantType    GrantType    `json:"grant_type,omitempty"`
}

type AuthResponse struct {
	AccessToken AccessToken `json:"access_token"`
	ExpiresIn   ExpiresIn   `json:"expires_in"`
	TokenType   TokenType   `json:"token_type"`

	_rawJSON json.RawMessage
}

func (a *AuthResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AuthResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AuthResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AuthResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// Will always be "sayari.com"
type Audience string

const (
	AudienceSayari Audience = "sayari.com"
)

func NewAudienceFromString(s string) (Audience, error) {
	switch s {
	case "sayari.com":
		return AudienceSayari, nil
	}
	var t Audience
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (a Audience) Ptr() *Audience {
	return &a
}

// The client ID you use to authenticate against the Sayari API.
type ClientId = string

// The client Secret you use to authenticate against the Sayari API.
type ClientSecret = string

// Will always be "client_credentials"
type GrantType string

const (
	GrantTypeClientCredentials GrantType = "client_credentials"
)

func NewGrantTypeFromString(s string) (GrantType, error) {
	switch s {
	case "client_credentials":
		return GrantTypeClientCredentials, nil
	}
	var t GrantType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (g GrantType) Ptr() *GrantType {
	return &g
}
