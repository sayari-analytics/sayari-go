// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/sayari-analytics/sayari-go/generated/go/core"
)

type AddAttribute struct {
	// entity ID
	Entity string `json:"entity"`
	// type of additional information
	Type string `json:"type"`
	// value of additional information in JSON format
	Value interface{} `json:"value,omitempty"`
	// as of date of the attribute
	Date *string `json:"date,omitempty"`
	// start date of the attribute
	FromDate *string `json:"from_date,omitempty"`
	// end date of the attribute
	ToDate *string `json:"to_date,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AddAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler AddAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddAttribute(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddAttribute) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// OK
type AttributeResponse struct {
	Data *AttributeResponseData `json:"data,omitempty"`

	_rawJSON json.RawMessage
}

func (a *AttributeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeResponse(value)
	a._rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeResponse) String() string {
	if len(a._rawJSON) > 0 {
		if value, err := core.StringifyJSON(a._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type UpdateAttribute struct {
	// value of additional information in JSON format
	Value interface{} `json:"value,omitempty"`
	// as of date of the attribute
	Date *string `json:"date,omitempty"`
	// start date of the attribute
	FromDate *string `json:"from_date,omitempty"`
	// end date of the attribute
	ToDate *string `json:"to_date,omitempty"`

	_rawJSON json.RawMessage
}

func (u *UpdateAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAttribute(value)
	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAttribute) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
