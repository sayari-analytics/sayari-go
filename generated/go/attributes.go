// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type AddAttribute struct {
	// entity ID
	Entity string `json:"entity" url:"entity"`
	// type of additional information
	Type string `json:"type" url:"type"`
	// value of additional information in JSON format
	Value interface{} `json:"value,omitempty" url:"value,omitempty"`
	// as of date of the attribute
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date of the attribute
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date of the attribute
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AddAttribute) GetEntity() string {
	if a == nil {
		return ""
	}
	return a.Entity
}

func (a *AddAttribute) GetType() string {
	if a == nil {
		return ""
	}
	return a.Type
}

func (a *AddAttribute) GetValue() interface{} {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AddAttribute) GetDate() *string {
	if a == nil {
		return nil
	}
	return a.Date
}

func (a *AddAttribute) GetFromDate() *string {
	if a == nil {
		return nil
	}
	return a.FromDate
}

func (a *AddAttribute) GetToDate() *string {
	if a == nil {
		return nil
	}
	return a.ToDate
}

func (a *AddAttribute) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AddAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler AddAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AddAttribute(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AddAttribute) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeProperties struct {
	Editable    bool   `json:"editable" url:"editable"`
	RecordCount int    `json:"record_count" url:"record_count"`
	Id          string `json:"id" url:"id"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributeProperties) GetEditable() bool {
	if a == nil {
		return false
	}
	return a.Editable
}

func (a *AttributeProperties) GetRecordCount() int {
	if a == nil {
		return 0
	}
	return a.RecordCount
}

func (a *AttributeProperties) GetId() string {
	if a == nil {
		return ""
	}
	return a.Id
}

func (a *AttributeProperties) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeProperties) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeProperties
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeProperties(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeProperties) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

// OK
type AttributeResponse struct {
	Data *AttributeResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributeResponse) GetData() *AttributeResponseData {
	if a == nil {
		return nil
	}
	return a.Data
}

func (a *AttributeResponse) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeResponse) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type AttributeResponseData struct {
	Value      interface{}            `json:"value,omitempty" url:"value,omitempty"`
	Properties []*AttributeProperties `json:"properties,omitempty" url:"properties,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (a *AttributeResponseData) GetValue() interface{} {
	if a == nil {
		return nil
	}
	return a.Value
}

func (a *AttributeResponseData) GetProperties() []*AttributeProperties {
	if a == nil {
		return nil
	}
	return a.Properties
}

func (a *AttributeResponseData) GetExtraProperties() map[string]interface{} {
	return a.extraProperties
}

func (a *AttributeResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler AttributeResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*a = AttributeResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *a)
	if err != nil {
		return err
	}
	a.extraProperties = extraProperties
	a.rawJSON = json.RawMessage(data)
	return nil
}

func (a *AttributeResponseData) String() string {
	if len(a.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(a.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(a); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", a)
}

type UpdateAttribute struct {
	// value of additional information in JSON format
	Value interface{} `json:"value,omitempty" url:"value,omitempty"`
	// as of date of the attribute
	Date *string `json:"date,omitempty" url:"date,omitempty"`
	// start date of the attribute
	FromDate *string `json:"from_date,omitempty" url:"from_date,omitempty"`
	// end date of the attribute
	ToDate *string `json:"to_date,omitempty" url:"to_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateAttribute) GetValue() interface{} {
	if u == nil {
		return nil
	}
	return u.Value
}

func (u *UpdateAttribute) GetDate() *string {
	if u == nil {
		return nil
	}
	return u.Date
}

func (u *UpdateAttribute) GetFromDate() *string {
	if u == nil {
		return nil
	}
	return u.FromDate
}

func (u *UpdateAttribute) GetToDate() *string {
	if u == nil {
		return nil
	}
	return u.ToDate
}

func (u *UpdateAttribute) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateAttribute) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateAttribute
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateAttribute(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateAttribute) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
