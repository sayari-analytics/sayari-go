// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type DeleteResourceResponse struct {
	Data *EntityResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DeleteResourceResponse) GetData() *EntityResponseData {
	if d == nil {
		return nil
	}
	return d.Data
}

func (d *DeleteResourceResponse) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DeleteResourceResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler DeleteResourceResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DeleteResourceResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DeleteResourceResponse) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type EntityResponseData struct {
	Type       ResourceType `json:"type" url:"type"`
	Id         string       `json:"id" url:"id"`
	Project    string       `json:"project" url:"project"`
	Label      string       `json:"label" url:"label"`
	Created    string       `json:"created" url:"created"`
	Updated    string       `json:"updated" url:"updated"`
	UpdatedBy  string       `json:"updated_by" url:"updated_by"`
	Version    int          `json:"version" url:"version"`
	EntityId   string       `json:"entity_id" url:"entity_id"`
	TagIds     []string     `json:"tag_ids,omitempty" url:"tag_ids,omitempty"`
	CaseStatus string       `json:"case_status" url:"case_status"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (e *EntityResponseData) GetType() ResourceType {
	if e == nil {
		return ""
	}
	return e.Type
}

func (e *EntityResponseData) GetId() string {
	if e == nil {
		return ""
	}
	return e.Id
}

func (e *EntityResponseData) GetProject() string {
	if e == nil {
		return ""
	}
	return e.Project
}

func (e *EntityResponseData) GetLabel() string {
	if e == nil {
		return ""
	}
	return e.Label
}

func (e *EntityResponseData) GetCreated() string {
	if e == nil {
		return ""
	}
	return e.Created
}

func (e *EntityResponseData) GetUpdated() string {
	if e == nil {
		return ""
	}
	return e.Updated
}

func (e *EntityResponseData) GetUpdatedBy() string {
	if e == nil {
		return ""
	}
	return e.UpdatedBy
}

func (e *EntityResponseData) GetVersion() int {
	if e == nil {
		return 0
	}
	return e.Version
}

func (e *EntityResponseData) GetEntityId() string {
	if e == nil {
		return ""
	}
	return e.EntityId
}

func (e *EntityResponseData) GetTagIds() []string {
	if e == nil {
		return nil
	}
	return e.TagIds
}

func (e *EntityResponseData) GetCaseStatus() string {
	if e == nil {
		return ""
	}
	return e.CaseStatus
}

func (e *EntityResponseData) GetExtraProperties() map[string]interface{} {
	return e.extraProperties
}

func (e *EntityResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler EntityResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*e = EntityResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *e)
	if err != nil {
		return err
	}
	e.extraProperties = extraProperties
	e.rawJSON = json.RawMessage(data)
	return nil
}

func (e *EntityResponseData) String() string {
	if len(e.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(e.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(e); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", e)
}

type ResourceType string

const (
	ResourceTypeEntity ResourceType = "entity"
)

func NewResourceTypeFromString(s string) (ResourceType, error) {
	switch s {
	case "entity":
		return ResourceTypeEntity, nil
	}
	var t ResourceType
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (r ResourceType) Ptr() *ResourceType {
	return &r
}

type SaveEntityRequest struct {
	Type ResourceType `json:"type" url:"type"`
	// The project identifier.
	Project string `json:"project" url:"project"`
	// The entity identifier.
	EntityId string `json:"entity_id" url:"entity_id"`
	// <Warning>This property is in beta and is subject to change. It is provided for early access and testing purposes only.</Warning> custom user key/value pairs (key must be prefixed with "custom_" and value must be "string" type)
	CustomFields interface{} `json:"custom_fields,omitempty" url:"custom_fields,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SaveEntityRequest) GetType() ResourceType {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SaveEntityRequest) GetProject() string {
	if s == nil {
		return ""
	}
	return s.Project
}

func (s *SaveEntityRequest) GetEntityId() string {
	if s == nil {
		return ""
	}
	return s.EntityId
}

func (s *SaveEntityRequest) GetCustomFields() interface{} {
	if s == nil {
		return nil
	}
	return s.CustomFields
}

func (s *SaveEntityRequest) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SaveEntityRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler SaveEntityRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SaveEntityRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SaveEntityRequest) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SaveEntityResponse struct {
	Data *EntityResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SaveEntityResponse) GetData() *EntityResponseData {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SaveEntityResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SaveEntityResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SaveEntityResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SaveEntityResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SaveEntityResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}
