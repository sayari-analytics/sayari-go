// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

// Bad gateway
type BadGatewayResponse = interface{}

// Incorrectly formatted request
type BadRequestResponse = interface{}

// Connection error
type ConnectionErrorResponse = interface{}

// Internal server error occurred.
type InternalServerErrorResponse = interface{}

// Resource not found or does not exist.
type MethodNotAllowedResponse struct {
	Status  int      `json:"status" url:"status"`
	Message []string `json:"message,omitempty" url:"message,omitempty"`
	Success bool     `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MethodNotAllowedResponse) GetStatus() int {
	if m == nil {
		return 0
	}
	return m.Status
}

func (m *MethodNotAllowedResponse) GetMessage() []string {
	if m == nil {
		return nil
	}
	return m.Message
}

func (m *MethodNotAllowedResponse) GetSuccess() bool {
	if m == nil {
		return false
	}
	return m.Success
}

func (m *MethodNotAllowedResponse) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MethodNotAllowedResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler MethodNotAllowedResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MethodNotAllowedResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MethodNotAllowedResponse) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

// Request made in an unacceptable state. This is most commonly due to parameter validation errors.
type NotAcceptableResponse struct {
	Status  int      `json:"status" url:"status"`
	Message []string `json:"message,omitempty" url:"message,omitempty"`
	Success bool     `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotAcceptableResponse) GetStatus() int {
	if n == nil {
		return 0
	}
	return n.Status
}

func (n *NotAcceptableResponse) GetMessage() []string {
	if n == nil {
		return nil
	}
	return n.Message
}

func (n *NotAcceptableResponse) GetSuccess() bool {
	if n == nil {
		return false
	}
	return n.Success
}

func (n *NotAcceptableResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotAcceptableResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotAcceptableResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotAcceptableResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotAcceptableResponse) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Request made with an unsupported HTTP method.
type NotFoundResponse struct {
	Status  int      `json:"status" url:"status"`
	Message []string `json:"message,omitempty" url:"message,omitempty"`
	Success bool     `json:"success" url:"success"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (n *NotFoundResponse) GetStatus() int {
	if n == nil {
		return 0
	}
	return n.Status
}

func (n *NotFoundResponse) GetMessage() []string {
	if n == nil {
		return nil
	}
	return n.Message
}

func (n *NotFoundResponse) GetSuccess() bool {
	if n == nil {
		return false
	}
	return n.Success
}

func (n *NotFoundResponse) GetExtraProperties() map[string]interface{} {
	return n.extraProperties
}

func (n *NotFoundResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler NotFoundResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*n = NotFoundResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *n)
	if err != nil {
		return err
	}
	n.extraProperties = extraProperties
	n.rawJSON = json.RawMessage(data)
	return nil
}

func (n *NotFoundResponse) String() string {
	if len(n.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(n.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(n); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", n)
}

// Too many requests within too short of a period. The reply will contain a retry-after header that indicates when the client can safely retry.
type RateLimitResponse = interface{}

// Request made without valid token.
type UnauthorizedResponse = interface{}
