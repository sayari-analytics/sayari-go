// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type EntityId = string

type HsCodeWithDescription struct {
	Code        string `json:"code" url:"code"`
	Description string `json:"description" url:"description"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HsCodeWithDescription) GetCode() string {
	if h == nil {
		return ""
	}
	return h.Code
}

func (h *HsCodeWithDescription) GetDescription() string {
	if h == nil {
		return ""
	}
	return h.Description
}

func (h *HsCodeWithDescription) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeWithDescription) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeWithDescription
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeWithDescription(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeWithDescription) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type TradeTraversalEntity struct {
	Id        string   `json:"id" url:"id"`
	Type      string   `json:"type" url:"type"`
	Label     string   `json:"label" url:"label"`
	Countries []string `json:"countries,omitempty" url:"countries,omitempty"`
	Risk      []string `json:"risk,omitempty" url:"risk,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalEntity) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TradeTraversalEntity) GetType() string {
	if t == nil {
		return ""
	}
	return t.Type
}

func (t *TradeTraversalEntity) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TradeTraversalEntity) GetCountries() []string {
	if t == nil {
		return nil
	}
	return t.Countries
}

func (t *TradeTraversalEntity) GetRisk() []string {
	if t == nil {
		return nil
	}
	return t.Risk
}

func (t *TradeTraversalEntity) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalEntity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalEntity) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalPath struct {
	Source string                       `json:"source" url:"source"`
	Target *TradeTraversalEntity        `json:"target,omitempty" url:"target,omitempty"`
	Path   []*TradeTraversalPathSegment `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalPath) GetSource() string {
	if t == nil {
		return ""
	}
	return t.Source
}

func (t *TradeTraversalPath) GetTarget() *TradeTraversalEntity {
	if t == nil {
		return nil
	}
	return t.Target
}

func (t *TradeTraversalPath) GetPath() []*TradeTraversalPathSegment {
	if t == nil {
		return nil
	}
	return t.Path
}

func (t *TradeTraversalPath) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalPath) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalPath
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalPath(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalPath) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalPathSegment struct {
	Entity   *TradeTraversalEntity    `json:"entity,omitempty" url:"entity,omitempty"`
	Products []*TradeTraversalProduct `json:"products,omitempty" url:"products,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalPathSegment) GetEntity() *TradeTraversalEntity {
	if t == nil {
		return nil
	}
	return t.Entity
}

func (t *TradeTraversalPathSegment) GetProducts() []*TradeTraversalProduct {
	if t == nil {
		return nil
	}
	return t.Products
}

func (t *TradeTraversalPathSegment) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalPathSegment) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalPathSegment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalPathSegment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalPathSegment) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalProduct struct {
	HsCode             *HsCodeWithDescription `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	MinDate            string                 `json:"min_date" url:"min_date"`
	MaxDate            string                 `json:"max_date" url:"max_date"`
	ArrivalCountries   []string               `json:"arrival_countries,omitempty" url:"arrival_countries,omitempty"`
	DepartureCountries []string               `json:"departure_countries,omitempty" url:"departure_countries,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalProduct) GetHsCode() *HsCodeWithDescription {
	if t == nil {
		return nil
	}
	return t.HsCode
}

func (t *TradeTraversalProduct) GetMinDate() string {
	if t == nil {
		return ""
	}
	return t.MinDate
}

func (t *TradeTraversalProduct) GetMaxDate() string {
	if t == nil {
		return ""
	}
	return t.MaxDate
}

func (t *TradeTraversalProduct) GetArrivalCountries() []string {
	if t == nil {
		return nil
	}
	return t.ArrivalCountries
}

func (t *TradeTraversalProduct) GetDepartureCountries() []string {
	if t == nil {
		return nil
	}
	return t.DepartureCountries
}

func (t *TradeTraversalProduct) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalProduct) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalProduct
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalProduct(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalProduct) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpstreamTradeTraversalResponse struct {
	Status  *int                  `json:"status,omitempty" url:"status,omitempty"`
	Success *bool                 `json:"success,omitempty" url:"success,omitempty"`
	Message *string               `json:"message,omitempty" url:"message,omitempty"`
	Data    []*TradeTraversalPath `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpstreamTradeTraversalResponse) GetStatus() *int {
	if u == nil {
		return nil
	}
	return u.Status
}

func (u *UpstreamTradeTraversalResponse) GetSuccess() *bool {
	if u == nil {
		return nil
	}
	return u.Success
}

func (u *UpstreamTradeTraversalResponse) GetMessage() *string {
	if u == nil {
		return nil
	}
	return u.Message
}

func (u *UpstreamTradeTraversalResponse) GetData() []*TradeTraversalPath {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpstreamTradeTraversalResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpstreamTradeTraversalResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpstreamTradeTraversalResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpstreamTradeTraversalResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpstreamTradeTraversalResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpstreamTradeTraversalRequest struct {
	// Risk leaf node filter. Only return supply chains that end with a supplier that has 1+ of the specified [risk factors](/sayari-library/ontology/risk-factors).
	Risk []Risk `json:"-" url:"risk,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has none of the specified [risk factors](/sayari-library/ontology/risk-factors).
	NotRisk []Risk `json:"-" url:"-risk,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in 1+ of the specified countries.
	Countries []Country `json:"-" url:"countries,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in none of the specified countries.
	NotCountries []Country `json:"-" url:"-countries,omitempty"`
	// Product root edge filter. Only return supply chains that start with an edge that has 1+ of the specified HS codes.
	Product []string `json:"-" url:"product,omitempty"`
	// Product root edge filter. Only return supply chains that start with an edge that has none of the specified HS codes.
	NotProduct []string `json:"-" url:"-product,omitempty"`
	// Component node filter. Only return supply chains that contain at least one edge with 1+ of the specified HS codes.
	Component []string `json:"-" url:"component,omitempty"`
	// Component node filter. Only return supply chains that contain no edges with any of the specified HS codes.
	NotComponent []string `json:"-" url:"-component,omitempty"`
	// Minimum date edge filter. Only return supply chains with edge dates that are greater than or equal to this date.
	MinDate *string `json:"-" url:"min_date,omitempty"`
	// Maximum date edge filter. Only return supply chains with edge dates that are less than or equal to this date.
	MaxDate *string `json:"-" url:"max_date,omitempty"`
	// The maximum depth of the traversal, from 1 to 4 inclusive. Default is 4. Reduce if query is timing out.
	MaxDepth *int `json:"-" url:"max_depth,omitempty"`
	// The maximum number of results to return. Default and maximum values are 25,000.
	Limit *int `json:"-" url:"limit,omitempty"`
}
