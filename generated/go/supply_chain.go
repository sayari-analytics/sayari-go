// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type TradeTraversalComponent struct {
	HsCode             string   `json:"hs_code" url:"hs_code"`
	ArrivalCountries   []string `json:"arrival_countries,omitempty" url:"arrival_countries,omitempty"`
	DepartureCountries []string `json:"departure_countries,omitempty" url:"departure_countries,omitempty"`
	MinDate            *string  `json:"min_date,omitempty" url:"min_date,omitempty"`
	MaxDate            *string  `json:"max_date,omitempty" url:"max_date,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalComponent) GetHsCode() string {
	if t == nil {
		return ""
	}
	return t.HsCode
}

func (t *TradeTraversalComponent) GetArrivalCountries() []string {
	if t == nil {
		return nil
	}
	return t.ArrivalCountries
}

func (t *TradeTraversalComponent) GetDepartureCountries() []string {
	if t == nil {
		return nil
	}
	return t.DepartureCountries
}

func (t *TradeTraversalComponent) GetMinDate() *string {
	if t == nil {
		return nil
	}
	return t.MinDate
}

func (t *TradeTraversalComponent) GetMaxDate() *string {
	if t == nil {
		return nil
	}
	return t.MaxDate
}

func (t *TradeTraversalComponent) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalComponent) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalComponent
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalComponent(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalComponent) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalData struct {
	Paths    []*TradeTraversalPath            `json:"paths,omitempty" url:"paths,omitempty"`
	Entities map[string]*TradeTraversalEntity `json:"entities,omitempty" url:"entities,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalData) GetPaths() []*TradeTraversalPath {
	if t == nil {
		return nil
	}
	return t.Paths
}

func (t *TradeTraversalData) GetEntities() map[string]*TradeTraversalEntity {
	if t == nil {
		return nil
	}
	return t.Entities
}

func (t *TradeTraversalData) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalData) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalData) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalEntity struct {
	Id          string   `json:"id" url:"id"`
	Type        string   `json:"type" url:"type"`
	Label       string   `json:"label" url:"label"`
	RiskFactors []string `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	Countries   []string `json:"countries,omitempty" url:"countries,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalEntity) GetId() string {
	if t == nil {
		return ""
	}
	return t.Id
}

func (t *TradeTraversalEntity) GetType() string {
	if t == nil {
		return ""
	}
	return t.Type
}

func (t *TradeTraversalEntity) GetLabel() string {
	if t == nil {
		return ""
	}
	return t.Label
}

func (t *TradeTraversalEntity) GetRiskFactors() []string {
	if t == nil {
		return nil
	}
	return t.RiskFactors
}

func (t *TradeTraversalEntity) GetCountries() []string {
	if t == nil {
		return nil
	}
	return t.Countries
}

func (t *TradeTraversalEntity) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalEntity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalEntity) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalFilters struct {
	// Risk leaf node filter. Only return supply chains that end with a supplier that has 1+ of the specified risk factors.
	RiskFactors []Risk `json:"risk_factors,omitempty" url:"risk_factors,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has none of the specified risk factors.
	NotRisk []Risk `json:"-risk_factors,omitempty" url:"-risk_factors,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in 1+ of the specified countries.
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in none of the specified countries.
	NotCountries []Country `json:"-countries,omitempty" url:"-countries,omitempty"`
	// Product root edge filter. Only return supply chains that start with an edge that has 1+ of the specified HS codes.
	Product []string `json:"product,omitempty" url:"product,omitempty"`
	// Product root edge filter. Only return supply chains that start with an edge that has none of the specified HS codes.
	NotProduct []string `json:"-product,omitempty" url:"-product,omitempty"`
	// Component edge filter. Only return supply chains that contain at least one edge with 1+ of the specified HS codes.
	Component []string `json:"component,omitempty" url:"component,omitempty"`
	// Component edge filter. Only return supply chains that contain no edges with any of the specified HS codes.
	NotComponent []string `json:"-component,omitempty" url:"-component,omitempty"`
	// Minimum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are greater than or equal to this date.
	MinDate *string `json:"min_date,omitempty" url:"min_date,omitempty"`
	// Maximum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are less than or equal to this date.
	MaxDate *string `json:"max_date,omitempty" url:"max_date,omitempty"`
	// The maximum depth of the traversal, from 1 to 4 inclusive. Default is 4. Reduce if query is timing out.
	MaxDepth *int `json:"max_depth,omitempty" url:"max_depth,omitempty"`
	// The maximum number of results to return. Default is no limit.
	Limit *int `json:"limit,omitempty" url:"limit,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalFilters) GetRiskFactors() []Risk {
	if t == nil {
		return nil
	}
	return t.RiskFactors
}

func (t *TradeTraversalFilters) GetNotRisk() []Risk {
	if t == nil {
		return nil
	}
	return t.NotRisk
}

func (t *TradeTraversalFilters) GetCountries() []Country {
	if t == nil {
		return nil
	}
	return t.Countries
}

func (t *TradeTraversalFilters) GetNotCountries() []Country {
	if t == nil {
		return nil
	}
	return t.NotCountries
}

func (t *TradeTraversalFilters) GetProduct() []string {
	if t == nil {
		return nil
	}
	return t.Product
}

func (t *TradeTraversalFilters) GetNotProduct() []string {
	if t == nil {
		return nil
	}
	return t.NotProduct
}

func (t *TradeTraversalFilters) GetComponent() []string {
	if t == nil {
		return nil
	}
	return t.Component
}

func (t *TradeTraversalFilters) GetNotComponent() []string {
	if t == nil {
		return nil
	}
	return t.NotComponent
}

func (t *TradeTraversalFilters) GetMinDate() *string {
	if t == nil {
		return nil
	}
	return t.MinDate
}

func (t *TradeTraversalFilters) GetMaxDate() *string {
	if t == nil {
		return nil
	}
	return t.MaxDate
}

func (t *TradeTraversalFilters) GetMaxDepth() *int {
	if t == nil {
		return nil
	}
	return t.MaxDepth
}

func (t *TradeTraversalFilters) GetLimit() *int {
	if t == nil {
		return nil
	}
	return t.Limit
}

func (t *TradeTraversalFilters) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalFilters) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalFilters
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalFilters(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalFilters) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalPath struct {
	// Root entity ID
	SourceEntityId string `json:"source_entity_id" url:"source_entity_id"`
	// Upstream paths beginning with the T1-T2 edge
	Path []*TradeTraversalPathSegment `json:"path,omitempty" url:"path,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalPath) GetSourceEntityId() string {
	if t == nil {
		return ""
	}
	return t.SourceEntityId
}

func (t *TradeTraversalPath) GetPath() []*TradeTraversalPathSegment {
	if t == nil {
		return nil
	}
	return t.Path
}

func (t *TradeTraversalPath) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalPath) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalPath
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalPath(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalPath) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type TradeTraversalPathSegment struct {
	// Associated tier for that path segment (1-5)
	Tier int `json:"tier" url:"tier"`
	// Supplier entity ID
	EntityId string `json:"entity_id" url:"entity_id"`
	// Components shipped by the supplier
	Components []*TradeTraversalComponent `json:"components,omitempty" url:"components,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeTraversalPathSegment) GetTier() int {
	if t == nil {
		return 0
	}
	return t.Tier
}

func (t *TradeTraversalPathSegment) GetEntityId() string {
	if t == nil {
		return ""
	}
	return t.EntityId
}

func (t *TradeTraversalPathSegment) GetComponents() []*TradeTraversalComponent {
	if t == nil {
		return nil
	}
	return t.Components
}

func (t *TradeTraversalPathSegment) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeTraversalPathSegment) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeTraversalPathSegment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeTraversalPathSegment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeTraversalPathSegment) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type UpstreamTradeTraversalResponse struct {
	Status  *int                   `json:"status,omitempty" url:"status,omitempty"`
	Success *bool                  `json:"success,omitempty" url:"success,omitempty"`
	Message *string                `json:"message,omitempty" url:"message,omitempty"`
	Filters *TradeTraversalFilters `json:"filters,omitempty" url:"filters,omitempty"`
	Data    *TradeTraversalData    `json:"data,omitempty" url:"data,omitempty"`
	// Number of hops explored in the traversal
	ExploredCount int `json:"explored_count" url:"explored_count"`
	// True if the traversal returned partial results
	PartialResults bool `json:"partial_results" url:"partial_results"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpstreamTradeTraversalResponse) GetStatus() *int {
	if u == nil {
		return nil
	}
	return u.Status
}

func (u *UpstreamTradeTraversalResponse) GetSuccess() *bool {
	if u == nil {
		return nil
	}
	return u.Success
}

func (u *UpstreamTradeTraversalResponse) GetMessage() *string {
	if u == nil {
		return nil
	}
	return u.Message
}

func (u *UpstreamTradeTraversalResponse) GetFilters() *TradeTraversalFilters {
	if u == nil {
		return nil
	}
	return u.Filters
}

func (u *UpstreamTradeTraversalResponse) GetData() *TradeTraversalData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpstreamTradeTraversalResponse) GetExploredCount() int {
	if u == nil {
		return 0
	}
	return u.ExploredCount
}

func (u *UpstreamTradeTraversalResponse) GetPartialResults() bool {
	if u == nil {
		return false
	}
	return u.PartialResults
}

func (u *UpstreamTradeTraversalResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpstreamTradeTraversalResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpstreamTradeTraversalResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpstreamTradeTraversalResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpstreamTradeTraversalResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpstreamTradeTraversalRequest struct {
	// Risk leaf node filter. Only return supply chains that end with a supplier that has 1+ of the specified risk factors.
	Risk []Risk `json:"-" url:"risk,omitempty"`
	// Risk leaf node filter. Only return supply chains that end with a supplier that has none of the specified risk factors.
	NotRisk []Risk `json:"-" url:"-risk,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in 1+ of the specified countries.
	Countries []Country `json:"-" url:"countries,omitempty"`
	// Country leaf node filter. Only return supply chains that end with a supplier in none of the specified countries.
	NotCountries []Country `json:"-" url:"-countries,omitempty"`
	// Filters supply chain paths where 1+ shipment country from any tier matches the provided values.
	ShipmentCountry []Country `json:"-" url:"shipment_country,omitempty"`
	// Filters supply chain paths where none of the shipment countries from any tier matches the provided values.
	NotShipmentCountry []Country `json:"-" url:"-shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 1 matches the provided values.
	Tier1ShipmentCountry []Country `json:"-" url:"tier1_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 2 matches the provided values.
	Tier2ShipmentCountry []Country `json:"-" url:"tier2_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 3 matches the provided values.
	Tier3ShipmentCountry []Country `json:"-" url:"tier3_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 4 matches the provided values.
	Tier4ShipmentCountry []Country `json:"-" url:"tier4_shipment_country,omitempty"`
	// Filters supply chain paths where 1+ shipment country from tier 5 matches the provided values.
	Tier5ShipmentCountry []Country `json:"-" url:"tier5_shipment_country,omitempty"`
	// Product root edge filter. Only return supply chains that start with an edge that has 1+ of the specified HS codes.
	Product []string `json:"-" url:"product,omitempty"`
	// Product root edge filter. Only return supply chains that start with an edge that has none of the specified HS codes.
	NotProduct []string `json:"-" url:"-product,omitempty"`
	// Component edge filter. Only return supply chains that contain at least one edge with 1+ of the specified HS codes.
	Component []string `json:"-" url:"component,omitempty"`
	// Component edge filter. Only return supply chains that contain no edges with any of the specified HS codes.
	NotComponent []string `json:"-" url:"-component,omitempty"`
	// Minimum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are greater than or equal to this date.
	MinDate *string `json:"-" url:"min_date,omitempty"`
	// Maximum date edge filter in <YYYY-MM-DD> format. Only return supply chains with edge dates that are less than or equal to this date.
	MaxDate *string `json:"-" url:"max_date,omitempty"`
	// The maximum depth of the traversal, from 1 to 4 inclusive. Default is 4. Reduce if query is timing out.
	MaxDepth *int `json:"-" url:"max_depth,omitempty"`
	// The maximum number of results to return. Default is no limit.
	Limit *int `json:"-" url:"limit,omitempty"`
}
