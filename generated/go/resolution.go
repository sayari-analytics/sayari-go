// This file was auto-generated by Fern from our API Definition.

package api

import (
	fmt "fmt"
)

type Resolution struct {
	// Entity name
	Name []*string `json:"-"`
	// Entity identifier
	Identifier []*string `json:"-"`
	// Entity country
	Country []*Country `json:"-"`
	// Entity address
	Address []*string `json:"-"`
	// Entity date of birth
	DateOfBirth []*string `json:"-"`
	// Entity contact
	Contact []*string `json:"-"`
	// Entity type. If multiple values are passed for any field, the endpoint will match entities with ANY of the values.
	Type []*Entities `json:"-"`
}

type Entities string

const (
	EntitiesVessel               Entities = "vessel"
	EntitiesTradename            Entities = "tradename"
	EntitiesIntellectualProperty Entities = "intellectual_property"
	EntitiesPerson               Entities = "person"
	EntitiesShipment             Entities = "shipment"
	EntitiesGeneric              Entities = "generic"
	EntitiesProperty             Entities = "property"
	EntitiesCompany              Entities = "company"
	EntitiesAircraft             Entities = "aircraft"
	EntitiesLegalMatter          Entities = "legal_matter"
	EntitiesSecurity             Entities = "security"
	EntitiesUnknown              Entities = "unknown"
)

func NewEntitiesFromString(s string) (Entities, error) {
	switch s {
	case "vessel":
		return EntitiesVessel, nil
	case "tradename":
		return EntitiesTradename, nil
	case "intellectual_property":
		return EntitiesIntellectualProperty, nil
	case "person":
		return EntitiesPerson, nil
	case "shipment":
		return EntitiesShipment, nil
	case "generic":
		return EntitiesGeneric, nil
	case "property":
		return EntitiesProperty, nil
	case "company":
		return EntitiesCompany, nil
	case "aircraft":
		return EntitiesAircraft, nil
	case "legal_matter":
		return EntitiesLegalMatter, nil
	case "security":
		return EntitiesSecurity, nil
	case "unknown":
		return EntitiesUnknown, nil
	}
	var t Entities
	return "", fmt.Errorf("%s is not a valid %T", s, t)
}

func (e Entities) Ptr() *Entities {
	return &e
}

type ResolutionResponse struct {
	Fields *ResolutionResponseFields `json:"fields,omitempty"`
	Data   []*ResolutionResult       `json:"data,omitempty"`
}
