// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type UpdateProjectEntityAttributeRequest struct {
	Field           string `json:"field" url:"field"`
	Value           string `json:"value" url:"value"`
	MatchResolution bool   `json:"match_resolution" url:"match_resolution"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateProjectEntityAttributeRequest) GetField() string {
	if u == nil {
		return ""
	}
	return u.Field
}

func (u *UpdateProjectEntityAttributeRequest) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UpdateProjectEntityAttributeRequest) GetMatchResolution() bool {
	if u == nil {
		return false
	}
	return u.MatchResolution
}

func (u *UpdateProjectEntityAttributeRequest) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateProjectEntityAttributeRequest) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateProjectEntityAttributeRequest
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateProjectEntityAttributeRequest(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateProjectEntityAttributeRequest) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateProjectEntityAttributeResponse struct {
	Data *UpdateProjectEntityAttributeResponseData `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateProjectEntityAttributeResponse) GetData() *UpdateProjectEntityAttributeResponseData {
	if u == nil {
		return nil
	}
	return u.Data
}

func (u *UpdateProjectEntityAttributeResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateProjectEntityAttributeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateProjectEntityAttributeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateProjectEntityAttributeResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateProjectEntityAttributeResponse) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateProjectEntityAttributeResponseData struct {
	Id              string `json:"id" url:"id"`
	Field           string `json:"field" url:"field"`
	Value           string `json:"value" url:"value"`
	MatchResolution bool   `json:"match_resolution" url:"match_resolution"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (u *UpdateProjectEntityAttributeResponseData) GetId() string {
	if u == nil {
		return ""
	}
	return u.Id
}

func (u *UpdateProjectEntityAttributeResponseData) GetField() string {
	if u == nil {
		return ""
	}
	return u.Field
}

func (u *UpdateProjectEntityAttributeResponseData) GetValue() string {
	if u == nil {
		return ""
	}
	return u.Value
}

func (u *UpdateProjectEntityAttributeResponseData) GetMatchResolution() bool {
	if u == nil {
		return false
	}
	return u.MatchResolution
}

func (u *UpdateProjectEntityAttributeResponseData) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateProjectEntityAttributeResponseData) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateProjectEntityAttributeResponseData
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateProjectEntityAttributeResponseData(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties
	u.rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateProjectEntityAttributeResponseData) String() string {
	if len(u.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(u.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
