// This file was auto-generated by Fern from our API Definition.

package api

import (
	json "encoding/json"
	fmt "fmt"
	internal "github.com/sayari-analytics/sayari-go/generated/go/internal"
)

type SearchBuyers struct {
	// A limit on the number of objects to be returned with a range between 1 and 10000. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q *string `json:"q,omitempty" url:"-"`
	// Filters to be applied to search query to limit the result-set.
	Filter *TradeFilterList `json:"filter,omitempty" url:"-"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty" url:"-"`
}

type SearchShipments struct {
	// A limit on the number of objects to be returned with a range between 1 and 10000. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q *string `json:"q,omitempty" url:"-"`
	// Filters to be applied to search query to limit the result-set.
	Filter *TradeFilterList `json:"filter,omitempty" url:"-"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty" url:"-"`
}

type SearchSuppliers struct {
	// A limit on the number of objects to be returned with a range between 1 and 10000. Defaults to 100.
	Limit *int `json:"-" url:"limit,omitempty"`
	// Number of results to skip before returning response. Defaults to 0.
	Offset *int `json:"-" url:"offset,omitempty"`
	// Query term. The syntax for the query parameter follows elasticsearch simple query string syntax. The includes the ability to use search operators and to perform nested queries. Must be url encoded.
	Q *string `json:"q,omitempty" url:"-"`
	// Filters to be applied to search query to limit the result-set.
	Filter *TradeFilterList `json:"filter,omitempty" url:"-"`
	// Whether or not to return search facets in results giving counts by field. Defaults to false.
	Facets *bool `json:"facets,omitempty" url:"-"`
}

// OK
type BuyerSearchResponse struct {
	Limit  int                `json:"limit" url:"limit"`
	Size   *QualifiedCount    `json:"size,omitempty" url:"size,omitempty"`
	Offset int                `json:"offset" url:"offset"`
	Next   bool               `json:"next" url:"next"`
	Data   []*SupplierOrBuyer `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (b *BuyerSearchResponse) GetLimit() int {
	if b == nil {
		return 0
	}
	return b.Limit
}

func (b *BuyerSearchResponse) GetSize() *QualifiedCount {
	if b == nil {
		return nil
	}
	return b.Size
}

func (b *BuyerSearchResponse) GetOffset() int {
	if b == nil {
		return 0
	}
	return b.Offset
}

func (b *BuyerSearchResponse) GetNext() bool {
	if b == nil {
		return false
	}
	return b.Next
}

func (b *BuyerSearchResponse) GetData() []*SupplierOrBuyer {
	if b == nil {
		return nil
	}
	return b.Data
}

func (b *BuyerSearchResponse) GetExtraProperties() map[string]interface{} {
	return b.extraProperties
}

func (b *BuyerSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler BuyerSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*b = BuyerSearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *b)
	if err != nil {
		return err
	}
	b.extraProperties = extraProperties
	b.rawJSON = json.RawMessage(data)
	return nil
}

func (b *BuyerSearchResponse) String() string {
	if len(b.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(b.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(b); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", b)
}

type DataSource struct {
	// The unique identifier for a source in the database
	Id    string `json:"id" url:"id"`
	Label string `json:"label" url:"label"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (d *DataSource) GetId() string {
	if d == nil {
		return ""
	}
	return d.Id
}

func (d *DataSource) GetLabel() string {
	if d == nil {
		return ""
	}
	return d.Label
}

func (d *DataSource) GetExtraProperties() map[string]interface{} {
	return d.extraProperties
}

func (d *DataSource) UnmarshalJSON(data []byte) error {
	type unmarshaler DataSource
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*d = DataSource(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *d)
	if err != nil {
		return err
	}
	d.extraProperties = extraProperties
	d.rawJSON = json.RawMessage(data)
	return nil
}

func (d *DataSource) String() string {
	if len(d.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(d.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(d); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", d)
}

type MonetaryValue struct {
	Value    float64   `json:"value" url:"value"`
	Currency *Currency `json:"currency,omitempty" url:"currency,omitempty"`
	Context  *string   `json:"context,omitempty" url:"context,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (m *MonetaryValue) GetValue() float64 {
	if m == nil {
		return 0
	}
	return m.Value
}

func (m *MonetaryValue) GetCurrency() *Currency {
	if m == nil {
		return nil
	}
	return m.Currency
}

func (m *MonetaryValue) GetContext() *string {
	if m == nil {
		return nil
	}
	return m.Context
}

func (m *MonetaryValue) GetExtraProperties() map[string]interface{} {
	return m.extraProperties
}

func (m *MonetaryValue) UnmarshalJSON(data []byte) error {
	type unmarshaler MonetaryValue
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*m = MonetaryValue(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *m)
	if err != nil {
		return err
	}
	m.extraProperties = extraProperties
	m.rawJSON = json.RawMessage(data)
	return nil
}

func (m *MonetaryValue) String() string {
	if len(m.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(m.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(m); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", m)
}

type Shipment struct {
	Id                  string                       `json:"id" url:"id"`
	Type                string                       `json:"type" url:"type"`
	Buyer               []*SourceOrDestinationEntity `json:"buyer,omitempty" url:"buyer,omitempty"`
	Supplier            []*SourceOrDestinationEntity `json:"supplier,omitempty" url:"supplier,omitempty"`
	ArrivalDate         []string                     `json:"arrival_date,omitempty" url:"arrival_date,omitempty"`
	DepartureDate       []string                     `json:"departure_date,omitempty" url:"departure_date,omitempty"`
	DepartureAddress    *ShipmentAddress             `json:"departure_address,omitempty" url:"departure_address,omitempty"`
	ArrivalAddress      *ShipmentAddress             `json:"arrival_address,omitempty" url:"arrival_address,omitempty"`
	ArrivalCountry      []Country                    `json:"arrival_country,omitempty" url:"arrival_country,omitempty"`
	DepartureCountry    []Country                    `json:"departure_country,omitempty" url:"departure_country,omitempty"`
	TransitCountry      []Country                    `json:"transit_country,omitempty" url:"transit_country,omitempty"`
	Countries           []Country                    `json:"countries,omitempty" url:"countries,omitempty"`
	ProductOrigin       []Country                    `json:"product_origin,omitempty" url:"product_origin,omitempty"`
	MonetaryValue       []*MonetaryValue             `json:"monetary_value,omitempty" url:"monetary_value,omitempty"`
	Weight              []*Weight                    `json:"weight,omitempty" url:"weight,omitempty"`
	Identifier          []*ShipmentIdentifier        `json:"identifier,omitempty" url:"identifier,omitempty"`
	Sources             []*DataSource                `json:"sources,omitempty" url:"sources,omitempty"`
	HsCodes             []*HsCodeInfo                `json:"hs_codes,omitempty" url:"hs_codes,omitempty"`
	ProductDescriptions []string                     `json:"product_descriptions,omitempty" url:"product_descriptions,omitempty"`
	// The unique identifier for a record in the database
	Record string `json:"record" url:"record"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *Shipment) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *Shipment) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *Shipment) GetBuyer() []*SourceOrDestinationEntity {
	if s == nil {
		return nil
	}
	return s.Buyer
}

func (s *Shipment) GetSupplier() []*SourceOrDestinationEntity {
	if s == nil {
		return nil
	}
	return s.Supplier
}

func (s *Shipment) GetArrivalDate() []string {
	if s == nil {
		return nil
	}
	return s.ArrivalDate
}

func (s *Shipment) GetDepartureDate() []string {
	if s == nil {
		return nil
	}
	return s.DepartureDate
}

func (s *Shipment) GetDepartureAddress() *ShipmentAddress {
	if s == nil {
		return nil
	}
	return s.DepartureAddress
}

func (s *Shipment) GetArrivalAddress() *ShipmentAddress {
	if s == nil {
		return nil
	}
	return s.ArrivalAddress
}

func (s *Shipment) GetArrivalCountry() []Country {
	if s == nil {
		return nil
	}
	return s.ArrivalCountry
}

func (s *Shipment) GetDepartureCountry() []Country {
	if s == nil {
		return nil
	}
	return s.DepartureCountry
}

func (s *Shipment) GetTransitCountry() []Country {
	if s == nil {
		return nil
	}
	return s.TransitCountry
}

func (s *Shipment) GetCountries() []Country {
	if s == nil {
		return nil
	}
	return s.Countries
}

func (s *Shipment) GetProductOrigin() []Country {
	if s == nil {
		return nil
	}
	return s.ProductOrigin
}

func (s *Shipment) GetMonetaryValue() []*MonetaryValue {
	if s == nil {
		return nil
	}
	return s.MonetaryValue
}

func (s *Shipment) GetWeight() []*Weight {
	if s == nil {
		return nil
	}
	return s.Weight
}

func (s *Shipment) GetIdentifier() []*ShipmentIdentifier {
	if s == nil {
		return nil
	}
	return s.Identifier
}

func (s *Shipment) GetSources() []*DataSource {
	if s == nil {
		return nil
	}
	return s.Sources
}

func (s *Shipment) GetHsCodes() []*HsCodeInfo {
	if s == nil {
		return nil
	}
	return s.HsCodes
}

func (s *Shipment) GetProductDescriptions() []string {
	if s == nil {
		return nil
	}
	return s.ProductDescriptions
}

func (s *Shipment) GetRecord() string {
	if s == nil {
		return ""
	}
	return s.Record
}

func (s *Shipment) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Shipment) UnmarshalJSON(data []byte) error {
	type unmarshaler Shipment
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Shipment(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *Shipment) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentAddress struct {
	X       *float64 `json:"x,omitempty" url:"x,omitempty"`
	Y       *float64 `json:"y,omitempty" url:"y,omitempty"`
	City    *string  `json:"city,omitempty" url:"city,omitempty"`
	State   *string  `json:"state,omitempty" url:"state,omitempty"`
	Country *string  `json:"country,omitempty" url:"country,omitempty"`
	Value   *string  `json:"value,omitempty" url:"value,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShipmentAddress) GetX() *float64 {
	if s == nil {
		return nil
	}
	return s.X
}

func (s *ShipmentAddress) GetY() *float64 {
	if s == nil {
		return nil
	}
	return s.Y
}

func (s *ShipmentAddress) GetCity() *string {
	if s == nil {
		return nil
	}
	return s.City
}

func (s *ShipmentAddress) GetState() *string {
	if s == nil {
		return nil
	}
	return s.State
}

func (s *ShipmentAddress) GetCountry() *string {
	if s == nil {
		return nil
	}
	return s.Country
}

func (s *ShipmentAddress) GetValue() *string {
	if s == nil {
		return nil
	}
	return s.Value
}

func (s *ShipmentAddress) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentAddress) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentAddress
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentAddress(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentAddress) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentCountry struct {
	Value Country `json:"value" url:"value"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShipmentCountry) GetValue() Country {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *ShipmentCountry) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentCountry) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentCountry
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentCountry(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentCountry) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentIdentifier struct {
	Value string               `json:"value" url:"value"`
	Type  *BothIdentifierTypes `json:"type,omitempty" url:"type,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShipmentIdentifier) GetValue() string {
	if s == nil {
		return ""
	}
	return s.Value
}

func (s *ShipmentIdentifier) GetType() *BothIdentifierTypes {
	if s == nil {
		return nil
	}
	return s.Type
}

func (s *ShipmentIdentifier) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentIdentifier) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentIdentifier
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentIdentifier(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentIdentifier) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type ShipmentMetadata struct {
	ArrivalCountry []Country `json:"arrival_country,omitempty" url:"arrival_country,omitempty"`
	Jurisdiction   []Country `json:"jurisdiction,omitempty" url:"jurisdiction,omitempty"`
	ReferenceId    string    `json:"reference_id" url:"reference_id"`
	// Unique identifier of the entity
	EntityId         string             `json:"entity_id" url:"entity_id"`
	DepartureAddress *AddressProperties `json:"departure_address,omitempty" url:"departure_address,omitempty"`
	Type             string             `json:"type" url:"type"`
	Sources          []string           `json:"sources,omitempty" url:"sources,omitempty"`
	DepartureCountry []Country          `json:"departure_country,omitempty" url:"departure_country,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShipmentMetadata) GetArrivalCountry() []Country {
	if s == nil {
		return nil
	}
	return s.ArrivalCountry
}

func (s *ShipmentMetadata) GetJurisdiction() []Country {
	if s == nil {
		return nil
	}
	return s.Jurisdiction
}

func (s *ShipmentMetadata) GetReferenceId() string {
	if s == nil {
		return ""
	}
	return s.ReferenceId
}

func (s *ShipmentMetadata) GetEntityId() string {
	if s == nil {
		return ""
	}
	return s.EntityId
}

func (s *ShipmentMetadata) GetDepartureAddress() *AddressProperties {
	if s == nil {
		return nil
	}
	return s.DepartureAddress
}

func (s *ShipmentMetadata) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *ShipmentMetadata) GetSources() []string {
	if s == nil {
		return nil
	}
	return s.Sources
}

func (s *ShipmentMetadata) GetDepartureCountry() []Country {
	if s == nil {
		return nil
	}
	return s.DepartureCountry
}

func (s *ShipmentMetadata) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentMetadata) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// OK
type ShipmentSearchResponse struct {
	Limit  int             `json:"limit" url:"limit"`
	Size   *QualifiedCount `json:"size,omitempty" url:"size,omitempty"`
	Offset int             `json:"offset" url:"offset"`
	Next   bool            `json:"next" url:"next"`
	Data   []*Shipment     `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *ShipmentSearchResponse) GetLimit() int {
	if s == nil {
		return 0
	}
	return s.Limit
}

func (s *ShipmentSearchResponse) GetSize() *QualifiedCount {
	if s == nil {
		return nil
	}
	return s.Size
}

func (s *ShipmentSearchResponse) GetOffset() int {
	if s == nil {
		return 0
	}
	return s.Offset
}

func (s *ShipmentSearchResponse) GetNext() bool {
	if s == nil {
		return false
	}
	return s.Next
}

func (s *ShipmentSearchResponse) GetData() []*Shipment {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *ShipmentSearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *ShipmentSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ShipmentSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = ShipmentSearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *ShipmentSearchResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SourceOrDestinationEntity struct {
	// Unique identifier of the entity
	Id    string   `json:"id" url:"id"`
	Type  string   `json:"type" url:"type"`
	Names []string `json:"names,omitempty" url:"names,omitempty"`
	// [Risks](/sayari-library/ontology/risk-factors)
	Risks map[Risk]interface{} `json:"risks,omitempty" url:"risks,omitempty"`
	// [Business Purpose](/sayari-library/ontology/attributes#business-purpose)
	BusinessPurpose []*BusinessPurposeProperties `json:"business_purpose,omitempty" url:"business_purpose,omitempty"`
	// [Address](/sayari-library/ontology/attributes#address)
	Address []interface{} `json:"address,omitempty" url:"address,omitempty"`
	// [Country](/sayari-library/ontology/attributes#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SourceOrDestinationEntity) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SourceOrDestinationEntity) GetType() string {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SourceOrDestinationEntity) GetNames() []string {
	if s == nil {
		return nil
	}
	return s.Names
}

func (s *SourceOrDestinationEntity) GetRisks() map[Risk]interface{} {
	if s == nil {
		return nil
	}
	return s.Risks
}

func (s *SourceOrDestinationEntity) GetBusinessPurpose() []*BusinessPurposeProperties {
	if s == nil {
		return nil
	}
	return s.BusinessPurpose
}

func (s *SourceOrDestinationEntity) GetAddress() []interface{} {
	if s == nil {
		return nil
	}
	return s.Address
}

func (s *SourceOrDestinationEntity) GetCountries() []Country {
	if s == nil {
		return nil
	}
	return s.Countries
}

func (s *SourceOrDestinationEntity) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SourceOrDestinationEntity) UnmarshalJSON(data []byte) error {
	type unmarshaler SourceOrDestinationEntity
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SourceOrDestinationEntity(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SourceOrDestinationEntity) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupplierMetadata struct {
	LatestShipmentDate *string   `json:"latestShipmentDate,omitempty" url:"latestShipmentDate,omitempty"`
	Shipments          int       `json:"shipments" url:"shipments"`
	HsCodes            []*HsCode `json:"hsCodes,omitempty" url:"hsCodes,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SupplierMetadata) GetLatestShipmentDate() *string {
	if s == nil {
		return nil
	}
	return s.LatestShipmentDate
}

func (s *SupplierMetadata) GetShipments() int {
	if s == nil {
		return 0
	}
	return s.Shipments
}

func (s *SupplierMetadata) GetHsCodes() []*HsCode {
	if s == nil {
		return nil
	}
	return s.HsCodes
}

func (s *SupplierMetadata) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplierMetadata) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplierMetadata
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplierMetadata(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplierMetadata) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SupplierOrBuyer struct {
	// Unique identifier of the entity
	Id string `json:"id" url:"id"`
	// Display name of the entity
	Label string `json:"label" url:"label"`
	// Number of outgoing relationships
	Degree int `json:"degree" url:"degree"`
	// True if the entity existed in the past but not at the present time, otherwise false. Always false for data curation.
	Closed bool `json:"closed" url:"closed"`
	// Convenience URL to the entity in the API.
	EntityUrl string `json:"entity_url" url:"entity_url"`
	// True if the entity has the ["Politically Exposed Person (PEP)" risk factor](/sayari-library/ontology/risk-factors#politically-exposed-person-pep-), otherwise false.
	Pep   bool    `json:"pep" url:"pep"`
	PsaId *string `json:"psa_id,omitempty" url:"psa_id,omitempty"`
	// Number of entities that are Possibly the Same As (PSA) the entity.
	PsaCount int `json:"psa_count" url:"psa_count"`
	// True if the entity has the ["Sanctioned" risk factor](/sayari-library/ontology/risk-factors#sanctioned), otherwise false.
	Sanctioned bool `json:"sanctioned" url:"sanctioned"`
	// The [entity type](/sayari-library/ontology/entities).
	Type        Entities      `json:"type" url:"type"`
	Identifiers []*Identifier `json:"identifiers,omitempty" url:"identifiers,omitempty"`
	// Entity [country](/sayari-library/ontology/enumerated-types#country)
	Countries []Country `json:"countries,omitempty" url:"countries,omitempty"`
	// Number of records associated with the entity, grouped by source.
	SourceCount map[string]*SourceCountInfo `json:"source_count,omitempty" url:"source_count,omitempty"`
	// List of physical addresses associated with the entity. See more [here](/sayari-library/ontology/attributes#address)
	Addresses  []string       `json:"addresses,omitempty" url:"addresses,omitempty"`
	TradeCount map[string]int `json:"trade_count,omitempty" url:"trade_count,omitempty"`
	// Birth date of a person. See more [here](/sayari-library/ontology/attributes#date-of-birth)
	DateOfBirth           *string           `json:"date_of_birth,omitempty" url:"date_of_birth,omitempty"`
	RelationshipCount     RelationshipCount `json:"relationship_count,omitempty" url:"relationship_count,omitempty"`
	UserRelationshipCount RelationshipCount `json:"user_relationship_count,omitempty" url:"user_relationship_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCount map[Attributes]int `json:"attribute_count,omitempty" url:"attribute_count,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCount map[Attributes]int `json:"user_attribute_count,omitempty" url:"user_attribute_count,omitempty"`
	// Count of attributes for a given [attribute type](/sayari-library/ontology/attributes)
	AttributeCounts map[Attributes]int `json:"attribute_counts,omitempty" url:"attribute_counts,omitempty"`
	// Count of user-created attributes for a given [attribute type](/sayari-library/ontology/attributes)
	UserAttributeCounts      map[Attributes]int      `json:"user_attribute_counts,omitempty" url:"user_attribute_counts,omitempty"`
	RelatedEntitiesCount     int                     `json:"related_entities_count" url:"related_entities_count"`
	UserRelatedEntitiesCount int                     `json:"user_related_entities_count" url:"user_related_entities_count"`
	UserRecordCount          int                     `json:"user_record_count" url:"user_record_count"`
	ReferenceId              *string                 `json:"reference_id,omitempty" url:"reference_id,omitempty"`
	RegistrationDate         *EntityRegistrationDate `json:"registration_date,omitempty" url:"registration_date,omitempty"`
	TranslatedLabel          *EntityTranslatedLabel  `json:"translated_label,omitempty" url:"translated_label,omitempty"`
	HsCode                   *EntityHsCode           `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	ShipmentArrival          *ShipmentArrival        `json:"shipment_arrival,omitempty" url:"shipment_arrival,omitempty"`
	ShipmentDeparture        *ShipmentDeparture      `json:"shipment_departure,omitempty" url:"shipment_departure,omitempty"`
	CompanyType              *CompanyType            `json:"company_type,omitempty" url:"company_type,omitempty"`
	LatestStatus             *Status                 `json:"latest_status,omitempty" url:"latest_status,omitempty"`
	// [Risk factors](/sayari-library/ontology/risk-factors) associated with the entity.
	Risk EntityRisk `json:"risk,omitempty" url:"risk,omitempty"`
	// Detailed information about the entity's [attributes](/sayari-library/ontology/attributes).
	Attributes *AttributeDetails `json:"attributes,omitempty" url:"attributes,omitempty"`
	// Detailed information about the entity's [relationships](/sayari-library/ontology/relationships).
	Relationships  *EntityRelationships `json:"relationships,omitempty" url:"relationships,omitempty"`
	PossiblySameAs *PossiblySameAs      `json:"possibly_same_as,omitempty" url:"possibly_same_as,omitempty"`
	ReferencedBy   *ReferencedBy        `json:"referenced_by,omitempty" url:"referenced_by,omitempty"`
	Metadata       *SupplierMetadata    `json:"metadata,omitempty" url:"metadata,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SupplierOrBuyer) GetId() string {
	if s == nil {
		return ""
	}
	return s.Id
}

func (s *SupplierOrBuyer) GetLabel() string {
	if s == nil {
		return ""
	}
	return s.Label
}

func (s *SupplierOrBuyer) GetDegree() int {
	if s == nil {
		return 0
	}
	return s.Degree
}

func (s *SupplierOrBuyer) GetClosed() bool {
	if s == nil {
		return false
	}
	return s.Closed
}

func (s *SupplierOrBuyer) GetEntityUrl() string {
	if s == nil {
		return ""
	}
	return s.EntityUrl
}

func (s *SupplierOrBuyer) GetPep() bool {
	if s == nil {
		return false
	}
	return s.Pep
}

func (s *SupplierOrBuyer) GetPsaId() *string {
	if s == nil {
		return nil
	}
	return s.PsaId
}

func (s *SupplierOrBuyer) GetPsaCount() int {
	if s == nil {
		return 0
	}
	return s.PsaCount
}

func (s *SupplierOrBuyer) GetSanctioned() bool {
	if s == nil {
		return false
	}
	return s.Sanctioned
}

func (s *SupplierOrBuyer) GetType() Entities {
	if s == nil {
		return ""
	}
	return s.Type
}

func (s *SupplierOrBuyer) GetIdentifiers() []*Identifier {
	if s == nil {
		return nil
	}
	return s.Identifiers
}

func (s *SupplierOrBuyer) GetCountries() []Country {
	if s == nil {
		return nil
	}
	return s.Countries
}

func (s *SupplierOrBuyer) GetSourceCount() map[string]*SourceCountInfo {
	if s == nil {
		return nil
	}
	return s.SourceCount
}

func (s *SupplierOrBuyer) GetAddresses() []string {
	if s == nil {
		return nil
	}
	return s.Addresses
}

func (s *SupplierOrBuyer) GetTradeCount() map[string]int {
	if s == nil {
		return nil
	}
	return s.TradeCount
}

func (s *SupplierOrBuyer) GetDateOfBirth() *string {
	if s == nil {
		return nil
	}
	return s.DateOfBirth
}

func (s *SupplierOrBuyer) GetRelationshipCount() RelationshipCount {
	if s == nil {
		return nil
	}
	return s.RelationshipCount
}

func (s *SupplierOrBuyer) GetUserRelationshipCount() RelationshipCount {
	if s == nil {
		return nil
	}
	return s.UserRelationshipCount
}

func (s *SupplierOrBuyer) GetAttributeCount() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.AttributeCount
}

func (s *SupplierOrBuyer) GetUserAttributeCount() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.UserAttributeCount
}

func (s *SupplierOrBuyer) GetAttributeCounts() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.AttributeCounts
}

func (s *SupplierOrBuyer) GetUserAttributeCounts() map[Attributes]int {
	if s == nil {
		return nil
	}
	return s.UserAttributeCounts
}

func (s *SupplierOrBuyer) GetRelatedEntitiesCount() int {
	if s == nil {
		return 0
	}
	return s.RelatedEntitiesCount
}

func (s *SupplierOrBuyer) GetUserRelatedEntitiesCount() int {
	if s == nil {
		return 0
	}
	return s.UserRelatedEntitiesCount
}

func (s *SupplierOrBuyer) GetUserRecordCount() int {
	if s == nil {
		return 0
	}
	return s.UserRecordCount
}

func (s *SupplierOrBuyer) GetReferenceId() *string {
	if s == nil {
		return nil
	}
	return s.ReferenceId
}

func (s *SupplierOrBuyer) GetRegistrationDate() *EntityRegistrationDate {
	if s == nil {
		return nil
	}
	return s.RegistrationDate
}

func (s *SupplierOrBuyer) GetTranslatedLabel() *EntityTranslatedLabel {
	if s == nil {
		return nil
	}
	return s.TranslatedLabel
}

func (s *SupplierOrBuyer) GetHsCode() *EntityHsCode {
	if s == nil {
		return nil
	}
	return s.HsCode
}

func (s *SupplierOrBuyer) GetShipmentArrival() *ShipmentArrival {
	if s == nil {
		return nil
	}
	return s.ShipmentArrival
}

func (s *SupplierOrBuyer) GetShipmentDeparture() *ShipmentDeparture {
	if s == nil {
		return nil
	}
	return s.ShipmentDeparture
}

func (s *SupplierOrBuyer) GetCompanyType() *CompanyType {
	if s == nil {
		return nil
	}
	return s.CompanyType
}

func (s *SupplierOrBuyer) GetLatestStatus() *Status {
	if s == nil {
		return nil
	}
	return s.LatestStatus
}

func (s *SupplierOrBuyer) GetRisk() EntityRisk {
	if s == nil {
		return nil
	}
	return s.Risk
}

func (s *SupplierOrBuyer) GetAttributes() *AttributeDetails {
	if s == nil {
		return nil
	}
	return s.Attributes
}

func (s *SupplierOrBuyer) GetRelationships() *EntityRelationships {
	if s == nil {
		return nil
	}
	return s.Relationships
}

func (s *SupplierOrBuyer) GetPossiblySameAs() *PossiblySameAs {
	if s == nil {
		return nil
	}
	return s.PossiblySameAs
}

func (s *SupplierOrBuyer) GetReferencedBy() *ReferencedBy {
	if s == nil {
		return nil
	}
	return s.ReferencedBy
}

func (s *SupplierOrBuyer) GetMetadata() *SupplierMetadata {
	if s == nil {
		return nil
	}
	return s.Metadata
}

func (s *SupplierOrBuyer) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplierOrBuyer) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplierOrBuyer
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplierOrBuyer(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplierOrBuyer) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// OK
type SupplierSearchResponse struct {
	Limit  int                `json:"limit" url:"limit"`
	Size   *QualifiedCount    `json:"size,omitempty" url:"size,omitempty"`
	Offset int                `json:"offset" url:"offset"`
	Next   bool               `json:"next" url:"next"`
	Data   []*SupplierOrBuyer `json:"data,omitempty" url:"data,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (s *SupplierSearchResponse) GetLimit() int {
	if s == nil {
		return 0
	}
	return s.Limit
}

func (s *SupplierSearchResponse) GetSize() *QualifiedCount {
	if s == nil {
		return nil
	}
	return s.Size
}

func (s *SupplierSearchResponse) GetOffset() int {
	if s == nil {
		return 0
	}
	return s.Offset
}

func (s *SupplierSearchResponse) GetNext() bool {
	if s == nil {
		return false
	}
	return s.Next
}

func (s *SupplierSearchResponse) GetData() []*SupplierOrBuyer {
	if s == nil {
		return nil
	}
	return s.Data
}

func (s *SupplierSearchResponse) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SupplierSearchResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler SupplierSearchResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SupplierSearchResponse(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties
	s.rawJSON = json.RawMessage(data)
	return nil
}

func (s *SupplierSearchResponse) String() string {
	if len(s.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(s.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// Filter your search on the following attributes.
type TradeFilterList struct {
	// Exact match against the entity_id of the buyer. The buyer is the receiver_of shipments.
	BuyerId []string `json:"buyer_id,omitempty" url:"buyer_id,omitempty"`
	// Exact match against the entity_id of the supplier. The supplier is the shipper_of shipments.
	SupplierId []string `json:"supplier_id,omitempty" url:"supplier_id,omitempty"`
	// Buyers whose name contains the provided string.
	BuyerName []string `json:"buyer_name,omitempty" url:"buyer_name,omitempty"`
	// Shipper whose name contains the provided string.
	SupplierName []string `json:"supplier_name,omitempty" url:"supplier_name,omitempty"`
	// Buyer with an exact match for the provided [risk factor](/sayari-library/ontology/risk-factors).
	BuyerRisk []Risk `json:"buyer_risk,omitempty" url:"buyer_risk,omitempty"`
	// Shipper with an exact match for the provided [risk factor](/sayari-library/ontology/risk-factors).
	SupplierRisk []Risk `json:"supplier_risk,omitempty" url:"supplier_risk,omitempty"`
	// Buyer with an exact match for the provided [country code](/sayari-library/ontology/enumerated-types#country).
	BuyerCountry []Country `json:"buyer_country,omitempty" url:"buyer_country,omitempty"`
	// Buyer city location
	BuyerCity []string `json:"buyer_city,omitempty" url:"buyer_city,omitempty"`
	// Buyer state location
	BuyerState []string `json:"buyer_state,omitempty" url:"buyer_state,omitempty"`
	// Supplier with an exact match for the provided [country code](/sayari-library/ontology/enumerated-types#country).
	SupplierCountry []Country `json:"supplier_country,omitempty" url:"supplier_country,omitempty"`
	// Supplier city location
	SupplierCity []string `json:"supplier_city,omitempty" url:"supplier_city,omitempty"`
	// Supplier state location
	SupplierState []string `json:"supplier_state,omitempty" url:"supplier_state,omitempty"`
	// Shipment departs from a country with an exact match for the provided [country code](/sayari-library/ontology/enumerated-types#country).
	DepartureCountry []Country `json:"departure_country,omitempty" url:"departure_country,omitempty"`
	// Shipment departs from a state that contains the provided state name.
	DepartureState []string `json:"departure_state,omitempty" url:"departure_state,omitempty"`
	// Shipment departs from a city that contains the provided city name.
	DepartureCity []string `json:"departure_city,omitempty" url:"departure_city,omitempty"`
	// Shipment arrives at a country with an exact match for the provided [country code](/sayari-library/ontology/enumerated-types#country).
	ArrivalCountry []Country `json:"arrival_country,omitempty" url:"arrival_country,omitempty"`
	// Shipment arrives at a state that contains the provided state name.
	ArrivalState []string `json:"arrival_state,omitempty" url:"arrival_state,omitempty"`
	// Shipment arrives at a city that contains the provided city name.
	ArrivalCity []string `json:"arrival_city,omitempty" url:"arrival_city,omitempty"`
	// The shipment HS code starts with the provided HS code.
	HsCode []string `json:"hs_code,omitempty" url:"hs_code,omitempty"`
	// The HS description contains the provided string.
	HsDescription []string `json:"hs_description,omitempty" url:"hs_description,omitempty"`
	// Product Origin with an exact match for the provided [country code](/sayari-library/ontology/enumerated-types#country).
	ProductOrigin []Country `json:"product_origin,omitempty" url:"product_origin,omitempty"`
	// The supplier purpose contains the provided string.
	SupplierPurpose []string `json:"supplier_purpose,omitempty" url:"supplier_purpose,omitempty"`
	// The buyer purpose contains the provided string.
	BuyerPurpose []string `json:"buyer_purpose,omitempty" url:"buyer_purpose,omitempty"`
	// The arrival date is within the provided range.
	ArrivalDate []string `json:"arrival_date,omitempty" url:"arrival_date,omitempty"`
	// The departure date is within the provided range.
	DepartureDate []string `json:"departure_date,omitempty" url:"departure_date,omitempty"`
	// The shipment identifier starts with the provided string.
	ShipmentIdentifier []string `json:"shipment_identifier,omitempty" url:"shipment_identifier,omitempty"`
	// Countries through which a shipment passes for the provided [country code](/sayari-library/ontology/enumerated-types#country).
	TransitCountry []Country `json:"transit_country,omitempty" url:"transit_country,omitempty"`
	// The shipment weight is within the provided range.
	Weight []string `json:"weight,omitempty" url:"weight,omitempty"`
	// An exact match for the provided sources.
	Sources []string `json:"sources,omitempty" url:"sources,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (t *TradeFilterList) GetBuyerId() []string {
	if t == nil {
		return nil
	}
	return t.BuyerId
}

func (t *TradeFilterList) GetSupplierId() []string {
	if t == nil {
		return nil
	}
	return t.SupplierId
}

func (t *TradeFilterList) GetBuyerName() []string {
	if t == nil {
		return nil
	}
	return t.BuyerName
}

func (t *TradeFilterList) GetSupplierName() []string {
	if t == nil {
		return nil
	}
	return t.SupplierName
}

func (t *TradeFilterList) GetBuyerRisk() []Risk {
	if t == nil {
		return nil
	}
	return t.BuyerRisk
}

func (t *TradeFilterList) GetSupplierRisk() []Risk {
	if t == nil {
		return nil
	}
	return t.SupplierRisk
}

func (t *TradeFilterList) GetBuyerCountry() []Country {
	if t == nil {
		return nil
	}
	return t.BuyerCountry
}

func (t *TradeFilterList) GetBuyerCity() []string {
	if t == nil {
		return nil
	}
	return t.BuyerCity
}

func (t *TradeFilterList) GetBuyerState() []string {
	if t == nil {
		return nil
	}
	return t.BuyerState
}

func (t *TradeFilterList) GetSupplierCountry() []Country {
	if t == nil {
		return nil
	}
	return t.SupplierCountry
}

func (t *TradeFilterList) GetSupplierCity() []string {
	if t == nil {
		return nil
	}
	return t.SupplierCity
}

func (t *TradeFilterList) GetSupplierState() []string {
	if t == nil {
		return nil
	}
	return t.SupplierState
}

func (t *TradeFilterList) GetDepartureCountry() []Country {
	if t == nil {
		return nil
	}
	return t.DepartureCountry
}

func (t *TradeFilterList) GetDepartureState() []string {
	if t == nil {
		return nil
	}
	return t.DepartureState
}

func (t *TradeFilterList) GetDepartureCity() []string {
	if t == nil {
		return nil
	}
	return t.DepartureCity
}

func (t *TradeFilterList) GetArrivalCountry() []Country {
	if t == nil {
		return nil
	}
	return t.ArrivalCountry
}

func (t *TradeFilterList) GetArrivalState() []string {
	if t == nil {
		return nil
	}
	return t.ArrivalState
}

func (t *TradeFilterList) GetArrivalCity() []string {
	if t == nil {
		return nil
	}
	return t.ArrivalCity
}

func (t *TradeFilterList) GetHsCode() []string {
	if t == nil {
		return nil
	}
	return t.HsCode
}

func (t *TradeFilterList) GetHsDescription() []string {
	if t == nil {
		return nil
	}
	return t.HsDescription
}

func (t *TradeFilterList) GetProductOrigin() []Country {
	if t == nil {
		return nil
	}
	return t.ProductOrigin
}

func (t *TradeFilterList) GetSupplierPurpose() []string {
	if t == nil {
		return nil
	}
	return t.SupplierPurpose
}

func (t *TradeFilterList) GetBuyerPurpose() []string {
	if t == nil {
		return nil
	}
	return t.BuyerPurpose
}

func (t *TradeFilterList) GetArrivalDate() []string {
	if t == nil {
		return nil
	}
	return t.ArrivalDate
}

func (t *TradeFilterList) GetDepartureDate() []string {
	if t == nil {
		return nil
	}
	return t.DepartureDate
}

func (t *TradeFilterList) GetShipmentIdentifier() []string {
	if t == nil {
		return nil
	}
	return t.ShipmentIdentifier
}

func (t *TradeFilterList) GetTransitCountry() []Country {
	if t == nil {
		return nil
	}
	return t.TransitCountry
}

func (t *TradeFilterList) GetWeight() []string {
	if t == nil {
		return nil
	}
	return t.Weight
}

func (t *TradeFilterList) GetSources() []string {
	if t == nil {
		return nil
	}
	return t.Sources
}

func (t *TradeFilterList) GetExtraProperties() map[string]interface{} {
	return t.extraProperties
}

func (t *TradeFilterList) UnmarshalJSON(data []byte) error {
	type unmarshaler TradeFilterList
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*t = TradeFilterList(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *t)
	if err != nil {
		return err
	}
	t.extraProperties = extraProperties
	t.rawJSON = json.RawMessage(data)
	return nil
}

func (t *TradeFilterList) String() string {
	if len(t.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(t.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(t); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", t)
}

type Weight struct {
	Value float64 `json:"value" url:"value"`
	Unit  string  `json:"unit" url:"unit"`
	Type  string  `json:"type" url:"type"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (w *Weight) GetValue() float64 {
	if w == nil {
		return 0
	}
	return w.Value
}

func (w *Weight) GetUnit() string {
	if w == nil {
		return ""
	}
	return w.Unit
}

func (w *Weight) GetType() string {
	if w == nil {
		return ""
	}
	return w.Type
}

func (w *Weight) GetExtraProperties() map[string]interface{} {
	return w.extraProperties
}

func (w *Weight) UnmarshalJSON(data []byte) error {
	type unmarshaler Weight
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*w = Weight(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *w)
	if err != nil {
		return err
	}
	w.extraProperties = extraProperties
	w.rawJSON = json.RawMessage(data)
	return nil
}

func (w *Weight) String() string {
	if len(w.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(w.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(w); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", w)
}

type HsCode struct {
	Key         string  `json:"key" url:"key"`
	DocCount    int     `json:"doc_count" url:"doc_count"`
	Value       string  `json:"value" url:"value"`
	ValueSimple *string `json:"value_simple,omitempty" url:"value_simple,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HsCode) GetKey() string {
	if h == nil {
		return ""
	}
	return h.Key
}

func (h *HsCode) GetDocCount() int {
	if h == nil {
		return 0
	}
	return h.DocCount
}

func (h *HsCode) GetValue() string {
	if h == nil {
		return ""
	}
	return h.Value
}

func (h *HsCode) GetValueSimple() *string {
	if h == nil {
		return nil
	}
	return h.ValueSimple
}

func (h *HsCode) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCode) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCode
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCode(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCode) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}

type HsCodeInfo struct {
	Code        string `json:"code" url:"code"`
	Description string `json:"description" url:"description"`
	Imputed     *bool  `json:"imputed,omitempty" url:"imputed,omitempty"`

	extraProperties map[string]interface{}
	rawJSON         json.RawMessage
}

func (h *HsCodeInfo) GetCode() string {
	if h == nil {
		return ""
	}
	return h.Code
}

func (h *HsCodeInfo) GetDescription() string {
	if h == nil {
		return ""
	}
	return h.Description
}

func (h *HsCodeInfo) GetImputed() *bool {
	if h == nil {
		return nil
	}
	return h.Imputed
}

func (h *HsCodeInfo) GetExtraProperties() map[string]interface{} {
	return h.extraProperties
}

func (h *HsCodeInfo) UnmarshalJSON(data []byte) error {
	type unmarshaler HsCodeInfo
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*h = HsCodeInfo(value)
	extraProperties, err := internal.ExtractExtraProperties(data, *h)
	if err != nil {
		return err
	}
	h.extraProperties = extraProperties
	h.rawJSON = json.RawMessage(data)
	return nil
}

func (h *HsCodeInfo) String() string {
	if len(h.rawJSON) > 0 {
		if value, err := internal.StringifyJSON(h.rawJSON); err == nil {
			return value
		}
	}
	if value, err := internal.StringifyJSON(h); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", h)
}
